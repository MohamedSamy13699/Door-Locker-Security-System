
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003df0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00003df0  00003e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800188  00800188  00003fac  2**0
                  ALLOC
  3 .stab         00003ce4  00000000  00000000  00003fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016a2  00000000  00000000  00007c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009332  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  000094d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000096c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000bace  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000ce45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e020  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000e4d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eea1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 25 07 	call	0xe4a	; 0xe4a <main>
      8a:	0c 94 f6 1e 	jmp	0x3dec	; 0x3dec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7a 1e 	jmp	0x3cf4	; 0x3cf4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 96 1e 	jmp	0x3d2c	; 0x3d2c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7a 1e 	jmp	0x3cf4	; 0x3cf4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 96 1e 	jmp	0x3d2c	; 0x3d2c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <Buzzer_init>:
 * Turn off the buzzer through the GPIO.
 * Inputs: None
 * Return: None
 */
void Buzzer_init(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	62 e0       	ldi	r22, 0x02	; 2
     e04:	41 e0       	ldi	r20, 0x01	; 1
     e06:	0e 94 df 11 	call	0x23be	; 0x23be <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	62 e0       	ldi	r22, 0x02	; 2
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>
}
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <Buzzer_on>:
 * Function to enable the Buzzer through the GPIO
 * Inputs: None
 * Return: None
 */
void Buzzer_on(void)
{
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	62 e0       	ldi	r22, 0x02	; 2
     e26:	41 e0       	ldi	r20, 0x01	; 1
     e28:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>
}
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <Buzzer_off>:
 * Function to disable the Buzzer through the GPIO
 * Inputs: None
 * Return: None
 */
void Buzzer_off(void)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	62 e0       	ldi	r22, 0x02	; 2
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <main>:
/*******************************************************************************
 *                             Application                                     *
 *******************************************************************************/

int main(void)
{
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	c5 58       	subi	r28, 0x85	; 133
     e58:	d0 40       	sbci	r29, 0x00	; 0
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61

/*******************************************************************************
 *                               LOCAL variables                               *
 *******************************************************************************/

	uint8 Local_PassCheck =0;
     e64:	fe 01       	movw	r30, r28
     e66:	eb 57       	subi	r30, 0x7B	; 123
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	10 82       	st	Z, r1
	uint8 Return_checkPass =0;
     e6c:	fe 01       	movw	r30, r28
     e6e:	ec 57       	subi	r30, 0x7C	; 124
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	10 82       	st	Z, r1
	uint8 Local_TakeOperation = 0;
     e74:	fe 01       	movw	r30, r28
     e76:	ed 57       	subi	r30, 0x7D	; 125
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	10 82       	st	Z, r1
	uint8 Step1_Flag =1;
     e7c:	fe 01       	movw	r30, r28
     e7e:	ee 57       	subi	r30, 0x7E	; 126
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	80 83       	st	Z, r24

	/* Enable the Global Interrupt */
	Global_interruptEnable();
     e86:	0e 94 c3 11 	call	0x2386	; 0x2386 <Global_interruptEnable>
	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(&uart);
     e8a:	82 e7       	ldi	r24, 0x72	; 114
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <UART_init>
	/*Call initialization function of TWI driver*/
	TWI_init(&TWI_ConfigPtr);
     e92:	85 e8       	ldi	r24, 0x85	; 133
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	0e 94 1c 1c 	call	0x3838	; 0x3838 <TWI_init>
	/* Initialize the dc motor Driver */
	DcMotor_Init();
     e9a:	0e 94 a1 10 	call	0x2142	; 0x2142 <DcMotor_Init>
	/*Call initialization function of TIMER1 driver*/
	Timer1_init(&Timer1_configCTCMode);
     e9e:	89 e7       	ldi	r24, 0x79	; 121
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <Timer1_init>
	/*CallBack Function  of Timer1  of CTC Mode*/
	Timer1_setCallBack(CTC_Mode,&A_DLSS_VoidGenerateSecond);
     ea6:	2a ef       	ldi	r18, 0xFA	; 250
     ea8:	3f e0       	ldi	r19, 0x0F	; 15
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	b9 01       	movw	r22, r18
     eae:	0e 94 35 1b 	call	0x366a	; 0x366a <Timer1_setCallBack>
	/* Initialize the Buzzer Driver */
	Buzzer_init();
     eb2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Buzzer_init>
     eb6:	6a c2       	rjmp	.+1236   	; 0x138c <main+0x542>
/*********************************************************************************************************/
/*************************************** STEP 1***********************************************************/
/*********************************************************************************************************/
		while(Step1_Flag)
		{
			Local_PassCheck =0;
     eb8:	fe 01       	movw	r30, r28
     eba:	eb 57       	subi	r30, 0x7B	; 123
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	10 82       	st	Z, r1
			/*Call A_DLSS_VoidTakePassword_1 to receive the pass for first time */
			A_DLSS_VoidRecivePassword_1();
     ec0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <A_DLSS_VoidRecivePassword_1>
			/*Call A_DLSS_VoidTakePassword_1 to receive the pass for second time */
			A_DLSS_VoidRecivePassword_2();
     ec4:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <A_DLSS_VoidRecivePassword_2>
			/* check the two pass matched or not */
			Local_PassCheck = A_DLSS_VoidCheckPassword(g_Arrpass1,g_Arrpass2,PASS_SIZE);
     ec8:	88 e6       	ldi	r24, 0x68	; 104
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	2d e6       	ldi	r18, 0x6D	; 109
     ece:	31 e0       	ldi	r19, 0x01	; 1
     ed0:	b9 01       	movw	r22, r18
     ed2:	45 e0       	ldi	r20, 0x05	; 5
     ed4:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <A_DLSS_VoidCheckPassword>
     ed8:	fe 01       	movw	r30, r28
     eda:	eb 57       	subi	r30, 0x7B	; 123
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	80 83       	st	Z, r24
     ee0:	fe 01       	movw	r30, r28
     ee2:	e5 58       	subi	r30, 0x85	; 133
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	a0 e2       	ldi	r26, 0x20	; 32
     eec:	b1 e4       	ldi	r27, 0x41	; 65
     eee:	80 83       	st	Z, r24
     ef0:	91 83       	std	Z+1, r25	; 0x01
     ef2:	a2 83       	std	Z+2, r26	; 0x02
     ef4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef6:	8e 01       	movw	r16, r28
     ef8:	09 58       	subi	r16, 0x89	; 137
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	fe 01       	movw	r30, r28
     efe:	e5 58       	subi	r30, 0x85	; 133
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	60 81       	ld	r22, Z
     f04:	71 81       	ldd	r23, Z+1	; 0x01
     f06:	82 81       	ldd	r24, Z+2	; 0x02
     f08:	93 81       	ldd	r25, Z+3	; 0x03
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	4a ef       	ldi	r20, 0xFA	; 250
     f10:	54 e4       	ldi	r21, 0x44	; 68
     f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	f8 01       	movw	r30, r16
     f1c:	80 83       	st	Z, r24
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	a2 83       	std	Z+2, r26	; 0x02
     f22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f24:	fe 01       	movw	r30, r28
     f26:	e9 58       	subi	r30, 0x89	; 137
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	60 81       	ld	r22, Z
     f2c:	71 81       	ldd	r23, Z+1	; 0x01
     f2e:	82 81       	ldd	r24, Z+2	; 0x02
     f30:	93 81       	ldd	r25, Z+3	; 0x03
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e8       	ldi	r20, 0x80	; 128
     f38:	5f e3       	ldi	r21, 0x3F	; 63
     f3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f3e:	88 23       	and	r24, r24
     f40:	44 f4       	brge	.+16     	; 0xf52 <main+0x108>
		__ticks = 1;
     f42:	fe 01       	movw	r30, r28
     f44:	eb 58       	subi	r30, 0x8B	; 139
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	91 83       	std	Z+1, r25	; 0x01
     f4e:	80 83       	st	Z, r24
     f50:	64 c0       	rjmp	.+200    	; 0x101a <main+0x1d0>
	else if (__tmp > 65535)
     f52:	fe 01       	movw	r30, r28
     f54:	e9 58       	subi	r30, 0x89	; 137
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	60 81       	ld	r22, Z
     f5a:	71 81       	ldd	r23, Z+1	; 0x01
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	93 81       	ldd	r25, Z+3	; 0x03
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	3f ef       	ldi	r19, 0xFF	; 255
     f64:	4f e7       	ldi	r20, 0x7F	; 127
     f66:	57 e4       	ldi	r21, 0x47	; 71
     f68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f6c:	18 16       	cp	r1, r24
     f6e:	0c f0       	brlt	.+2      	; 0xf72 <main+0x128>
     f70:	43 c0       	rjmp	.+134    	; 0xff8 <main+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f72:	fe 01       	movw	r30, r28
     f74:	e5 58       	subi	r30, 0x85	; 133
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	60 81       	ld	r22, Z
     f7a:	71 81       	ldd	r23, Z+1	; 0x01
     f7c:	82 81       	ldd	r24, Z+2	; 0x02
     f7e:	93 81       	ldd	r25, Z+3	; 0x03
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e2       	ldi	r20, 0x20	; 32
     f86:	51 e4       	ldi	r21, 0x41	; 65
     f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	8e 01       	movw	r16, r28
     f92:	0b 58       	subi	r16, 0x8B	; 139
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
     f96:	bc 01       	movw	r22, r24
     f98:	cd 01       	movw	r24, r26
     f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	f8 01       	movw	r30, r16
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	80 83       	st	Z, r24
     fa8:	1f c0       	rjmp	.+62     	; 0xfe8 <main+0x19e>
     faa:	fe 01       	movw	r30, r28
     fac:	ed 58       	subi	r30, 0x8D	; 141
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	88 ec       	ldi	r24, 0xC8	; 200
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	91 83       	std	Z+1, r25	; 0x01
     fb6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fb8:	fe 01       	movw	r30, r28
     fba:	ed 58       	subi	r30, 0x8D	; 141
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	80 81       	ld	r24, Z
     fc0:	91 81       	ldd	r25, Z+1	; 0x01
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	f1 f7       	brne	.-4      	; 0xfc2 <main+0x178>
     fc6:	fe 01       	movw	r30, r28
     fc8:	ed 58       	subi	r30, 0x8D	; 141
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	91 83       	std	Z+1, r25	; 0x01
     fce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd0:	de 01       	movw	r26, r28
     fd2:	ab 58       	subi	r26, 0x8B	; 139
     fd4:	bf 4f       	sbci	r27, 0xFF	; 255
     fd6:	fe 01       	movw	r30, r28
     fd8:	eb 58       	subi	r30, 0x8B	; 139
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	11 96       	adiw	r26, 0x01	; 1
     fe4:	9c 93       	st	X, r25
     fe6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe8:	fe 01       	movw	r30, r28
     fea:	eb 58       	subi	r30, 0x8B	; 139
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	80 81       	ld	r24, Z
     ff0:	91 81       	ldd	r25, Z+1	; 0x01
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	d1 f6       	brne	.-76     	; 0xfaa <main+0x160>
     ff6:	27 c0       	rjmp	.+78     	; 0x1046 <main+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff8:	8e 01       	movw	r16, r28
     ffa:	0b 58       	subi	r16, 0x8B	; 139
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
     ffe:	fe 01       	movw	r30, r28
    1000:	e9 58       	subi	r30, 0x89	; 137
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	60 81       	ld	r22, Z
    1006:	71 81       	ldd	r23, Z+1	; 0x01
    1008:	82 81       	ldd	r24, Z+2	; 0x02
    100a:	93 81       	ldd	r25, Z+3	; 0x03
    100c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	f8 01       	movw	r30, r16
    1016:	91 83       	std	Z+1, r25	; 0x01
    1018:	80 83       	st	Z, r24
    101a:	de 01       	movw	r26, r28
    101c:	af 58       	subi	r26, 0x8F	; 143
    101e:	bf 4f       	sbci	r27, 0xFF	; 255
    1020:	fe 01       	movw	r30, r28
    1022:	eb 58       	subi	r30, 0x8B	; 139
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	80 81       	ld	r24, Z
    1028:	91 81       	ldd	r25, Z+1	; 0x01
    102a:	8d 93       	st	X+, r24
    102c:	9c 93       	st	X, r25
    102e:	fe 01       	movw	r30, r28
    1030:	ef 58       	subi	r30, 0x8F	; 143
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	80 81       	ld	r24, Z
    1036:	91 81       	ldd	r25, Z+1	; 0x01
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	f1 f7       	brne	.-4      	; 0x1038 <main+0x1ee>
    103c:	fe 01       	movw	r30, r28
    103e:	ef 58       	subi	r30, 0x8F	; 143
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	91 83       	std	Z+1, r25	; 0x01
    1044:	80 83       	st	Z, r24
			_delay_ms(10);
			/* send the check password flag  */
			UART_sendByte(Local_PassCheck);
    1046:	fe 01       	movw	r30, r28
    1048:	eb 57       	subi	r30, 0x7B	; 123
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	80 81       	ld	r24, Z
    104e:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <UART_sendByte>
    1052:	fe 01       	movw	r30, r28
    1054:	e3 59       	subi	r30, 0x93	; 147
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	a8 e4       	ldi	r26, 0x48	; 72
    105e:	b2 e4       	ldi	r27, 0x42	; 66
    1060:	80 83       	st	Z, r24
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	a2 83       	std	Z+2, r26	; 0x02
    1066:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1068:	8e 01       	movw	r16, r28
    106a:	07 59       	subi	r16, 0x97	; 151
    106c:	1f 4f       	sbci	r17, 0xFF	; 255
    106e:	fe 01       	movw	r30, r28
    1070:	e3 59       	subi	r30, 0x93	; 147
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	60 81       	ld	r22, Z
    1076:	71 81       	ldd	r23, Z+1	; 0x01
    1078:	82 81       	ldd	r24, Z+2	; 0x02
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	4a ef       	ldi	r20, 0xFA	; 250
    1082:	54 e4       	ldi	r21, 0x44	; 68
    1084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	f8 01       	movw	r30, r16
    108e:	80 83       	st	Z, r24
    1090:	91 83       	std	Z+1, r25	; 0x01
    1092:	a2 83       	std	Z+2, r26	; 0x02
    1094:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1096:	fe 01       	movw	r30, r28
    1098:	e7 59       	subi	r30, 0x97	; 151
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	60 81       	ld	r22, Z
    109e:	71 81       	ldd	r23, Z+1	; 0x01
    10a0:	82 81       	ldd	r24, Z+2	; 0x02
    10a2:	93 81       	ldd	r25, Z+3	; 0x03
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e8       	ldi	r20, 0x80	; 128
    10aa:	5f e3       	ldi	r21, 0x3F	; 63
    10ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10b0:	88 23       	and	r24, r24
    10b2:	44 f4       	brge	.+16     	; 0x10c4 <main+0x27a>
		__ticks = 1;
    10b4:	fe 01       	movw	r30, r28
    10b6:	e9 59       	subi	r30, 0x99	; 153
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	91 83       	std	Z+1, r25	; 0x01
    10c0:	80 83       	st	Z, r24
    10c2:	64 c0       	rjmp	.+200    	; 0x118c <main+0x342>
	else if (__tmp > 65535)
    10c4:	fe 01       	movw	r30, r28
    10c6:	e7 59       	subi	r30, 0x97	; 151
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	60 81       	ld	r22, Z
    10cc:	71 81       	ldd	r23, Z+1	; 0x01
    10ce:	82 81       	ldd	r24, Z+2	; 0x02
    10d0:	93 81       	ldd	r25, Z+3	; 0x03
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	3f ef       	ldi	r19, 0xFF	; 255
    10d6:	4f e7       	ldi	r20, 0x7F	; 127
    10d8:	57 e4       	ldi	r21, 0x47	; 71
    10da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10de:	18 16       	cp	r1, r24
    10e0:	0c f0       	brlt	.+2      	; 0x10e4 <main+0x29a>
    10e2:	43 c0       	rjmp	.+134    	; 0x116a <main+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	fe 01       	movw	r30, r28
    10e6:	e3 59       	subi	r30, 0x93	; 147
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	60 81       	ld	r22, Z
    10ec:	71 81       	ldd	r23, Z+1	; 0x01
    10ee:	82 81       	ldd	r24, Z+2	; 0x02
    10f0:	93 81       	ldd	r25, Z+3	; 0x03
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	40 e2       	ldi	r20, 0x20	; 32
    10f8:	51 e4       	ldi	r21, 0x41	; 65
    10fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	8e 01       	movw	r16, r28
    1104:	09 59       	subi	r16, 0x99	; 153
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	bc 01       	movw	r22, r24
    110a:	cd 01       	movw	r24, r26
    110c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	f8 01       	movw	r30, r16
    1116:	91 83       	std	Z+1, r25	; 0x01
    1118:	80 83       	st	Z, r24
    111a:	1f c0       	rjmp	.+62     	; 0x115a <main+0x310>
    111c:	fe 01       	movw	r30, r28
    111e:	eb 59       	subi	r30, 0x9B	; 155
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	88 ec       	ldi	r24, 0xC8	; 200
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	80 83       	st	Z, r24
    112a:	fe 01       	movw	r30, r28
    112c:	eb 59       	subi	r30, 0x9B	; 155
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	80 81       	ld	r24, Z
    1132:	91 81       	ldd	r25, Z+1	; 0x01
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <main+0x2ea>
    1138:	fe 01       	movw	r30, r28
    113a:	eb 59       	subi	r30, 0x9B	; 155
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	91 83       	std	Z+1, r25	; 0x01
    1140:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1142:	de 01       	movw	r26, r28
    1144:	a9 59       	subi	r26, 0x99	; 153
    1146:	bf 4f       	sbci	r27, 0xFF	; 255
    1148:	fe 01       	movw	r30, r28
    114a:	e9 59       	subi	r30, 0x99	; 153
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	80 81       	ld	r24, Z
    1150:	91 81       	ldd	r25, Z+1	; 0x01
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	11 96       	adiw	r26, 0x01	; 1
    1156:	9c 93       	st	X, r25
    1158:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115a:	fe 01       	movw	r30, r28
    115c:	e9 59       	subi	r30, 0x99	; 153
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	80 81       	ld	r24, Z
    1162:	91 81       	ldd	r25, Z+1	; 0x01
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	d1 f6       	brne	.-76     	; 0x111c <main+0x2d2>
    1168:	28 c0       	rjmp	.+80     	; 0x11ba <main+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    116a:	8e 01       	movw	r16, r28
    116c:	09 59       	subi	r16, 0x99	; 153
    116e:	1f 4f       	sbci	r17, 0xFF	; 255
    1170:	fe 01       	movw	r30, r28
    1172:	e7 59       	subi	r30, 0x97	; 151
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	60 81       	ld	r22, Z
    1178:	71 81       	ldd	r23, Z+1	; 0x01
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	93 81       	ldd	r25, Z+3	; 0x03
    117e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	f8 01       	movw	r30, r16
    1188:	91 83       	std	Z+1, r25	; 0x01
    118a:	80 83       	st	Z, r24
    118c:	de 01       	movw	r26, r28
    118e:	ad 59       	subi	r26, 0x9D	; 157
    1190:	bf 4f       	sbci	r27, 0xFF	; 255
    1192:	fe 01       	movw	r30, r28
    1194:	e9 59       	subi	r30, 0x99	; 153
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	80 81       	ld	r24, Z
    119a:	91 81       	ldd	r25, Z+1	; 0x01
    119c:	11 96       	adiw	r26, 0x01	; 1
    119e:	9c 93       	st	X, r25
    11a0:	8e 93       	st	-X, r24
    11a2:	fe 01       	movw	r30, r28
    11a4:	ed 59       	subi	r30, 0x9D	; 157
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	80 81       	ld	r24, Z
    11aa:	91 81       	ldd	r25, Z+1	; 0x01
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <main+0x362>
    11b0:	fe 01       	movw	r30, r28
    11b2:	ed 59       	subi	r30, 0x9D	; 157
    11b4:	ff 4f       	sbci	r31, 0xFF	; 255
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	80 83       	st	Z, r24
			_delay_ms(50);
			/* if the two passwords matched */
			if(Local_PassCheck == PASS_MATCHED)
    11ba:	fe 01       	movw	r30, r28
    11bc:	eb 57       	subi	r30, 0x7B	; 123
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	80 81       	ld	r24, Z
    11c2:	80 39       	cpi	r24, 0x90	; 144
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <main+0x37e>
    11c6:	e2 c0       	rjmp	.+452    	; 0x138c <main+0x542>
			{
				uint8 count =0;
    11c8:	fe 01       	movw	r30, r28
    11ca:	ef 57       	subi	r30, 0x7F	; 127
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	10 82       	st	Z, r1
    11d0:	d2 c0       	rjmp	.+420    	; 0x1376 <main+0x52c>
				/* store pass in EEPROM*/
				while(count < PASS_SIZE)
				{
					EEPROM_writeByte(PASSWORD_ADDRESS_LOCATION_1 + count ,g_Arrpass2[count]);
    11d2:	fe 01       	movw	r30, r28
    11d4:	ef 57       	subi	r30, 0x7F	; 127
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	80 81       	ld	r24, Z
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	80 96       	adiw	r24, 0x20	; 32
    11e0:	ac 01       	movw	r20, r24
    11e2:	fe 01       	movw	r30, r28
    11e4:	ef 57       	subi	r30, 0x7F	; 127
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	80 81       	ld	r24, Z
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	fc 01       	movw	r30, r24
    11f0:	e3 59       	subi	r30, 0x93	; 147
    11f2:	fe 4f       	sbci	r31, 0xFE	; 254
    11f4:	20 81       	ld	r18, Z
    11f6:	ca 01       	movw	r24, r20
    11f8:	62 2f       	mov	r22, r18
    11fa:	0e 94 22 11 	call	0x2244	; 0x2244 <EEPROM_writeByte>
    11fe:	fe 01       	movw	r30, r28
    1200:	e1 5a       	subi	r30, 0xA1	; 161
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	aa ef       	ldi	r26, 0xFA	; 250
    120a:	b3 e4       	ldi	r27, 0x43	; 67
    120c:	80 83       	st	Z, r24
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	a2 83       	std	Z+2, r26	; 0x02
    1212:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1214:	8e 01       	movw	r16, r28
    1216:	05 5a       	subi	r16, 0xA5	; 165
    1218:	1f 4f       	sbci	r17, 0xFF	; 255
    121a:	fe 01       	movw	r30, r28
    121c:	e1 5a       	subi	r30, 0xA1	; 161
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	60 81       	ld	r22, Z
    1222:	71 81       	ldd	r23, Z+1	; 0x01
    1224:	82 81       	ldd	r24, Z+2	; 0x02
    1226:	93 81       	ldd	r25, Z+3	; 0x03
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	4a ef       	ldi	r20, 0xFA	; 250
    122e:	54 e4       	ldi	r21, 0x44	; 68
    1230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	f8 01       	movw	r30, r16
    123a:	80 83       	st	Z, r24
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	a2 83       	std	Z+2, r26	; 0x02
    1240:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1242:	fe 01       	movw	r30, r28
    1244:	e5 5a       	subi	r30, 0xA5	; 165
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	60 81       	ld	r22, Z
    124a:	71 81       	ldd	r23, Z+1	; 0x01
    124c:	82 81       	ldd	r24, Z+2	; 0x02
    124e:	93 81       	ldd	r25, Z+3	; 0x03
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e8       	ldi	r20, 0x80	; 128
    1256:	5f e3       	ldi	r21, 0x3F	; 63
    1258:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    125c:	88 23       	and	r24, r24
    125e:	44 f4       	brge	.+16     	; 0x1270 <main+0x426>
		__ticks = 1;
    1260:	fe 01       	movw	r30, r28
    1262:	e7 5a       	subi	r30, 0xA7	; 167
    1264:	ff 4f       	sbci	r31, 0xFF	; 255
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	91 83       	std	Z+1, r25	; 0x01
    126c:	80 83       	st	Z, r24
    126e:	64 c0       	rjmp	.+200    	; 0x1338 <main+0x4ee>
	else if (__tmp > 65535)
    1270:	fe 01       	movw	r30, r28
    1272:	e5 5a       	subi	r30, 0xA5	; 165
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	60 81       	ld	r22, Z
    1278:	71 81       	ldd	r23, Z+1	; 0x01
    127a:	82 81       	ldd	r24, Z+2	; 0x02
    127c:	93 81       	ldd	r25, Z+3	; 0x03
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	3f ef       	ldi	r19, 0xFF	; 255
    1282:	4f e7       	ldi	r20, 0x7F	; 127
    1284:	57 e4       	ldi	r21, 0x47	; 71
    1286:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    128a:	18 16       	cp	r1, r24
    128c:	0c f0       	brlt	.+2      	; 0x1290 <main+0x446>
    128e:	43 c0       	rjmp	.+134    	; 0x1316 <main+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1290:	fe 01       	movw	r30, r28
    1292:	e1 5a       	subi	r30, 0xA1	; 161
    1294:	ff 4f       	sbci	r31, 0xFF	; 255
    1296:	60 81       	ld	r22, Z
    1298:	71 81       	ldd	r23, Z+1	; 0x01
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	93 81       	ldd	r25, Z+3	; 0x03
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e2       	ldi	r20, 0x20	; 32
    12a4:	51 e4       	ldi	r21, 0x41	; 65
    12a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	8e 01       	movw	r16, r28
    12b0:	07 5a       	subi	r16, 0xA7	; 167
    12b2:	1f 4f       	sbci	r17, 0xFF	; 255
    12b4:	bc 01       	movw	r22, r24
    12b6:	cd 01       	movw	r24, r26
    12b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	f8 01       	movw	r30, r16
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	80 83       	st	Z, r24
    12c6:	1f c0       	rjmp	.+62     	; 0x1306 <main+0x4bc>
    12c8:	fe 01       	movw	r30, r28
    12ca:	e9 5a       	subi	r30, 0xA9	; 169
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	88 ec       	ldi	r24, 0xC8	; 200
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	91 83       	std	Z+1, r25	; 0x01
    12d4:	80 83       	st	Z, r24
    12d6:	fe 01       	movw	r30, r28
    12d8:	e9 5a       	subi	r30, 0xA9	; 169
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	80 81       	ld	r24, Z
    12de:	91 81       	ldd	r25, Z+1	; 0x01
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <main+0x496>
    12e4:	fe 01       	movw	r30, r28
    12e6:	e9 5a       	subi	r30, 0xA9	; 169
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	91 83       	std	Z+1, r25	; 0x01
    12ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ee:	de 01       	movw	r26, r28
    12f0:	a7 5a       	subi	r26, 0xA7	; 167
    12f2:	bf 4f       	sbci	r27, 0xFF	; 255
    12f4:	fe 01       	movw	r30, r28
    12f6:	e7 5a       	subi	r30, 0xA7	; 167
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	11 96       	adiw	r26, 0x01	; 1
    1302:	9c 93       	st	X, r25
    1304:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1306:	fe 01       	movw	r30, r28
    1308:	e7 5a       	subi	r30, 0xA7	; 167
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	80 81       	ld	r24, Z
    130e:	91 81       	ldd	r25, Z+1	; 0x01
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	d1 f6       	brne	.-76     	; 0x12c8 <main+0x47e>
    1314:	27 c0       	rjmp	.+78     	; 0x1364 <main+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1316:	8e 01       	movw	r16, r28
    1318:	07 5a       	subi	r16, 0xA7	; 167
    131a:	1f 4f       	sbci	r17, 0xFF	; 255
    131c:	fe 01       	movw	r30, r28
    131e:	e5 5a       	subi	r30, 0xA5	; 165
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	60 81       	ld	r22, Z
    1324:	71 81       	ldd	r23, Z+1	; 0x01
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	93 81       	ldd	r25, Z+3	; 0x03
    132a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	f8 01       	movw	r30, r16
    1334:	91 83       	std	Z+1, r25	; 0x01
    1336:	80 83       	st	Z, r24
    1338:	de 01       	movw	r26, r28
    133a:	ab 5a       	subi	r26, 0xAB	; 171
    133c:	bf 4f       	sbci	r27, 0xFF	; 255
    133e:	fe 01       	movw	r30, r28
    1340:	e7 5a       	subi	r30, 0xA7	; 167
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
    1348:	8d 93       	st	X+, r24
    134a:	9c 93       	st	X, r25
    134c:	fe 01       	movw	r30, r28
    134e:	eb 5a       	subi	r30, 0xAB	; 171
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <main+0x50c>
    135a:	fe 01       	movw	r30, r28
    135c:	eb 5a       	subi	r30, 0xAB	; 171
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	91 83       	std	Z+1, r25	; 0x01
    1362:	80 83       	st	Z, r24
					_delay_ms(500);
					count++;
    1364:	de 01       	movw	r26, r28
    1366:	af 57       	subi	r26, 0x7F	; 127
    1368:	bf 4f       	sbci	r27, 0xFF	; 255
    136a:	fe 01       	movw	r30, r28
    136c:	ef 57       	subi	r30, 0x7F	; 127
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	80 81       	ld	r24, Z
    1372:	8f 5f       	subi	r24, 0xFF	; 255
    1374:	8c 93       	st	X, r24
			/* if the two passwords matched */
			if(Local_PassCheck == PASS_MATCHED)
			{
				uint8 count =0;
				/* store pass in EEPROM*/
				while(count < PASS_SIZE)
    1376:	fe 01       	movw	r30, r28
    1378:	ef 57       	subi	r30, 0x7F	; 127
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	80 81       	ld	r24, Z
    137e:	85 30       	cpi	r24, 0x05	; 5
    1380:	08 f4       	brcc	.+2      	; 0x1384 <main+0x53a>
    1382:	27 cf       	rjmp	.-434    	; 0x11d2 <main+0x388>
					EEPROM_writeByte(PASSWORD_ADDRESS_LOCATION_1 + count ,g_Arrpass2[count]);
					_delay_ms(500);
					count++;
				}
				/* Go out from this while loop for first step */
				Step1_Flag =0;
    1384:	fe 01       	movw	r30, r28
    1386:	ee 57       	subi	r30, 0x7E	; 126
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	10 82       	st	Z, r1
    {

/*********************************************************************************************************/
/*************************************** STEP 1***********************************************************/
/*********************************************************************************************************/
		while(Step1_Flag)
    138c:	fe 01       	movw	r30, r28
    138e:	ee 57       	subi	r30, 0x7E	; 126
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	80 81       	ld	r24, Z
    1394:	88 23       	and	r24, r24
    1396:	09 f0       	breq	.+2      	; 0x139a <main+0x550>
    1398:	8f cd       	rjmp	.-1250   	; 0xeb8 <main+0x6e>

/*********************************************************************************************************/
/*************************************** STEP 2***********************************************************/
/*********************************************************************************************************/
			/* receive  the operation for open door or change pass*/
				Local_TakeOperation = UART_recieveByte();
    139a:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <UART_recieveByte>
    139e:	fe 01       	movw	r30, r28
    13a0:	ed 57       	subi	r30, 0x7D	; 125
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	80 83       	st	Z, r24
    13a6:	fe 01       	movw	r30, r28
    13a8:	ef 5a       	subi	r30, 0xAF	; 175
    13aa:	ff 4f       	sbci	r31, 0xFF	; 255
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a0 ea       	ldi	r26, 0xA0	; 160
    13b2:	b1 e4       	ldi	r27, 0x41	; 65
    13b4:	80 83       	st	Z, r24
    13b6:	91 83       	std	Z+1, r25	; 0x01
    13b8:	a2 83       	std	Z+2, r26	; 0x02
    13ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13bc:	8e 01       	movw	r16, r28
    13be:	03 5b       	subi	r16, 0xB3	; 179
    13c0:	1f 4f       	sbci	r17, 0xFF	; 255
    13c2:	fe 01       	movw	r30, r28
    13c4:	ef 5a       	subi	r30, 0xAF	; 175
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	60 81       	ld	r22, Z
    13ca:	71 81       	ldd	r23, Z+1	; 0x01
    13cc:	82 81       	ldd	r24, Z+2	; 0x02
    13ce:	93 81       	ldd	r25, Z+3	; 0x03
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	4a ef       	ldi	r20, 0xFA	; 250
    13d6:	54 e4       	ldi	r21, 0x44	; 68
    13d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	f8 01       	movw	r30, r16
    13e2:	80 83       	st	Z, r24
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	a2 83       	std	Z+2, r26	; 0x02
    13e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13ea:	fe 01       	movw	r30, r28
    13ec:	e3 5b       	subi	r30, 0xB3	; 179
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	60 81       	ld	r22, Z
    13f2:	71 81       	ldd	r23, Z+1	; 0x01
    13f4:	82 81       	ldd	r24, Z+2	; 0x02
    13f6:	93 81       	ldd	r25, Z+3	; 0x03
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e8       	ldi	r20, 0x80	; 128
    13fe:	5f e3       	ldi	r21, 0x3F	; 63
    1400:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1404:	88 23       	and	r24, r24
    1406:	44 f4       	brge	.+16     	; 0x1418 <main+0x5ce>
		__ticks = 1;
    1408:	fe 01       	movw	r30, r28
    140a:	e5 5b       	subi	r30, 0xB5	; 181
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	91 83       	std	Z+1, r25	; 0x01
    1414:	80 83       	st	Z, r24
    1416:	64 c0       	rjmp	.+200    	; 0x14e0 <main+0x696>
	else if (__tmp > 65535)
    1418:	fe 01       	movw	r30, r28
    141a:	e3 5b       	subi	r30, 0xB3	; 179
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	3f ef       	ldi	r19, 0xFF	; 255
    142a:	4f e7       	ldi	r20, 0x7F	; 127
    142c:	57 e4       	ldi	r21, 0x47	; 71
    142e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1432:	18 16       	cp	r1, r24
    1434:	0c f0       	brlt	.+2      	; 0x1438 <main+0x5ee>
    1436:	43 c0       	rjmp	.+134    	; 0x14be <main+0x674>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1438:	fe 01       	movw	r30, r28
    143a:	ef 5a       	subi	r30, 0xAF	; 175
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 e2       	ldi	r20, 0x20	; 32
    144c:	51 e4       	ldi	r21, 0x41	; 65
    144e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	8e 01       	movw	r16, r28
    1458:	05 5b       	subi	r16, 0xB5	; 181
    145a:	1f 4f       	sbci	r17, 0xFF	; 255
    145c:	bc 01       	movw	r22, r24
    145e:	cd 01       	movw	r24, r26
    1460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	f8 01       	movw	r30, r16
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	80 83       	st	Z, r24
    146e:	1f c0       	rjmp	.+62     	; 0x14ae <main+0x664>
    1470:	fe 01       	movw	r30, r28
    1472:	e7 5b       	subi	r30, 0xB7	; 183
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	88 ec       	ldi	r24, 0xC8	; 200
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	91 83       	std	Z+1, r25	; 0x01
    147c:	80 83       	st	Z, r24
    147e:	fe 01       	movw	r30, r28
    1480:	e7 5b       	subi	r30, 0xB7	; 183
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	80 81       	ld	r24, Z
    1486:	91 81       	ldd	r25, Z+1	; 0x01
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	f1 f7       	brne	.-4      	; 0x1488 <main+0x63e>
    148c:	fe 01       	movw	r30, r28
    148e:	e7 5b       	subi	r30, 0xB7	; 183
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	91 83       	std	Z+1, r25	; 0x01
    1494:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1496:	de 01       	movw	r26, r28
    1498:	a5 5b       	subi	r26, 0xB5	; 181
    149a:	bf 4f       	sbci	r27, 0xFF	; 255
    149c:	fe 01       	movw	r30, r28
    149e:	e5 5b       	subi	r30, 0xB5	; 181
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	80 81       	ld	r24, Z
    14a4:	91 81       	ldd	r25, Z+1	; 0x01
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	11 96       	adiw	r26, 0x01	; 1
    14aa:	9c 93       	st	X, r25
    14ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ae:	fe 01       	movw	r30, r28
    14b0:	e5 5b       	subi	r30, 0xB5	; 181
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	80 81       	ld	r24, Z
    14b6:	91 81       	ldd	r25, Z+1	; 0x01
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	d1 f6       	brne	.-76     	; 0x1470 <main+0x626>
    14bc:	28 c0       	rjmp	.+80     	; 0x150e <main+0x6c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14be:	8e 01       	movw	r16, r28
    14c0:	05 5b       	subi	r16, 0xB5	; 181
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	fe 01       	movw	r30, r28
    14c6:	e3 5b       	subi	r30, 0xB3	; 179
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	60 81       	ld	r22, Z
    14cc:	71 81       	ldd	r23, Z+1	; 0x01
    14ce:	82 81       	ldd	r24, Z+2	; 0x02
    14d0:	93 81       	ldd	r25, Z+3	; 0x03
    14d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	f8 01       	movw	r30, r16
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24
    14e0:	de 01       	movw	r26, r28
    14e2:	a9 5b       	subi	r26, 0xB9	; 185
    14e4:	bf 4f       	sbci	r27, 0xFF	; 255
    14e6:	fe 01       	movw	r30, r28
    14e8:	e5 5b       	subi	r30, 0xB5	; 181
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 81       	ld	r24, Z
    14ee:	91 81       	ldd	r25, Z+1	; 0x01
    14f0:	11 96       	adiw	r26, 0x01	; 1
    14f2:	9c 93       	st	X, r25
    14f4:	8e 93       	st	-X, r24
    14f6:	fe 01       	movw	r30, r28
    14f8:	e9 5b       	subi	r30, 0xB9	; 185
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	80 81       	ld	r24, Z
    14fe:	91 81       	ldd	r25, Z+1	; 0x01
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <main+0x6b6>
    1504:	fe 01       	movw	r30, r28
    1506:	e9 5b       	subi	r30, 0xB9	; 185
    1508:	ff 4f       	sbci	r31, 0xFF	; 255
    150a:	91 83       	std	Z+1, r25	; 0x01
    150c:	80 83       	st	Z, r24

/*********************************************************************************************************/
/*************************************** STEP 3***********************************************************/
/*********************************************************************************************************/
				/*if  the operation is open door */
				if(Local_TakeOperation == OPEN_DOOR)
    150e:	fe 01       	movw	r30, r28
    1510:	ed 57       	subi	r30, 0x7D	; 125
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	80 81       	ld	r24, Z
    1516:	8b 32       	cpi	r24, 0x2B	; 43
    1518:	09 f0       	breq	.+2      	; 0x151c <main+0x6d2>
    151a:	c3 c1       	rjmp	.+902    	; 0x18a2 <main+0xa58>
				{

					Return_checkPass =0;
    151c:	fe 01       	movw	r30, r28
    151e:	ec 57       	subi	r30, 0x7C	; 124
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	10 82       	st	Z, r1
					Local_TakeOperation=0;
    1524:	fe 01       	movw	r30, r28
    1526:	ed 57       	subi	r30, 0x7D	; 125
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	10 82       	st	Z, r1
					/* TAKE PASS FROM THE USER*/
					A_DLSS_VoidStep_3_RecievePassword();
    152c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <A_DLSS_VoidStep_3_RecievePassword>
					/* READ THE PASS STORED INTO EEPROM AND SAVE IT INTO g_Arrpass2*/
					uint8 count =0;
    1530:	fe 01       	movw	r30, r28
    1532:	e0 58       	subi	r30, 0x80	; 128
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	10 82       	st	Z, r1
    1538:	a7 c0       	rjmp	.+334    	; 0x1688 <main+0x83e>
					while(count < PASS_SIZE)
					{
						EEPROM_readByte(PASSWORD_ADDRESS_LOCATION_1+count , g_Arrpass2[count]);
    153a:	fe 01       	movw	r30, r28
    153c:	e0 58       	subi	r30, 0x80	; 128
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	80 81       	ld	r24, Z
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	80 96       	adiw	r24, 0x20	; 32
    1548:	ac 01       	movw	r20, r24
    154a:	fe 01       	movw	r30, r28
    154c:	e0 58       	subi	r30, 0x80	; 128
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	80 81       	ld	r24, Z
    1552:	88 2f       	mov	r24, r24
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	fc 01       	movw	r30, r24
    1558:	e3 59       	subi	r30, 0x93	; 147
    155a:	fe 4f       	sbci	r31, 0xFE	; 254
    155c:	80 81       	ld	r24, Z
    155e:	88 2f       	mov	r24, r24
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9c 01       	movw	r18, r24
    1564:	ca 01       	movw	r24, r20
    1566:	b9 01       	movw	r22, r18
    1568:	0e 94 63 11 	call	0x22c6	; 0x22c6 <EEPROM_readByte>
    156c:	fe 01       	movw	r30, r28
    156e:	ed 5b       	subi	r30, 0xBD	; 189
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	a8 e4       	ldi	r26, 0x48	; 72
    1578:	b2 e4       	ldi	r27, 0x42	; 66
    157a:	80 83       	st	Z, r24
    157c:	91 83       	std	Z+1, r25	; 0x01
    157e:	a2 83       	std	Z+2, r26	; 0x02
    1580:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1582:	8e 01       	movw	r16, r28
    1584:	01 5c       	subi	r16, 0xC1	; 193
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	fe 01       	movw	r30, r28
    158a:	ed 5b       	subi	r30, 0xBD	; 189
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	60 81       	ld	r22, Z
    1590:	71 81       	ldd	r23, Z+1	; 0x01
    1592:	82 81       	ldd	r24, Z+2	; 0x02
    1594:	93 81       	ldd	r25, Z+3	; 0x03
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	4a ef       	ldi	r20, 0xFA	; 250
    159c:	54 e4       	ldi	r21, 0x44	; 68
    159e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	f8 01       	movw	r30, r16
    15a8:	80 83       	st	Z, r24
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	a2 83       	std	Z+2, r26	; 0x02
    15ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15b0:	fe 01       	movw	r30, r28
    15b2:	ff 96       	adiw	r30, 0x3f	; 63
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e8       	ldi	r20, 0x80	; 128
    15c2:	5f e3       	ldi	r21, 0x3F	; 63
    15c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15c8:	88 23       	and	r24, r24
    15ca:	2c f4       	brge	.+10     	; 0x15d6 <main+0x78c>
		__ticks = 1;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	9e af       	std	Y+62, r25	; 0x3e
    15d2:	8d af       	std	Y+61, r24	; 0x3d
    15d4:	46 c0       	rjmp	.+140    	; 0x1662 <main+0x818>
	else if (__tmp > 65535)
    15d6:	fe 01       	movw	r30, r28
    15d8:	ff 96       	adiw	r30, 0x3f	; 63
    15da:	60 81       	ld	r22, Z
    15dc:	71 81       	ldd	r23, Z+1	; 0x01
    15de:	82 81       	ldd	r24, Z+2	; 0x02
    15e0:	93 81       	ldd	r25, Z+3	; 0x03
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	3f ef       	ldi	r19, 0xFF	; 255
    15e6:	4f e7       	ldi	r20, 0x7F	; 127
    15e8:	57 e4       	ldi	r21, 0x47	; 71
    15ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	64 f5       	brge	.+88     	; 0x164a <main+0x800>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f2:	fe 01       	movw	r30, r28
    15f4:	ed 5b       	subi	r30, 0xBD	; 189
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	60 81       	ld	r22, Z
    15fa:	71 81       	ldd	r23, Z+1	; 0x01
    15fc:	82 81       	ldd	r24, Z+2	; 0x02
    15fe:	93 81       	ldd	r25, Z+3	; 0x03
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e2       	ldi	r20, 0x20	; 32
    1606:	51 e4       	ldi	r21, 0x41	; 65
    1608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	bc 01       	movw	r22, r24
    1612:	cd 01       	movw	r24, r26
    1614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	9e af       	std	Y+62, r25	; 0x3e
    161e:	8d af       	std	Y+61, r24	; 0x3d
    1620:	0f c0       	rjmp	.+30     	; 0x1640 <main+0x7f6>
    1622:	88 ec       	ldi	r24, 0xC8	; 200
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	9c af       	std	Y+60, r25	; 0x3c
    1628:	8b af       	std	Y+59, r24	; 0x3b
    162a:	8b ad       	ldd	r24, Y+59	; 0x3b
    162c:	9c ad       	ldd	r25, Y+60	; 0x3c
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <main+0x7e4>
    1632:	9c af       	std	Y+60, r25	; 0x3c
    1634:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1636:	8d ad       	ldd	r24, Y+61	; 0x3d
    1638:	9e ad       	ldd	r25, Y+62	; 0x3e
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	9e af       	std	Y+62, r25	; 0x3e
    163e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1640:	8d ad       	ldd	r24, Y+61	; 0x3d
    1642:	9e ad       	ldd	r25, Y+62	; 0x3e
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	69 f7       	brne	.-38     	; 0x1622 <main+0x7d8>
    1648:	16 c0       	rjmp	.+44     	; 0x1676 <main+0x82c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164a:	fe 01       	movw	r30, r28
    164c:	ff 96       	adiw	r30, 0x3f	; 63
    164e:	60 81       	ld	r22, Z
    1650:	71 81       	ldd	r23, Z+1	; 0x01
    1652:	82 81       	ldd	r24, Z+2	; 0x02
    1654:	93 81       	ldd	r25, Z+3	; 0x03
    1656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	9e af       	std	Y+62, r25	; 0x3e
    1660:	8d af       	std	Y+61, r24	; 0x3d
    1662:	8d ad       	ldd	r24, Y+61	; 0x3d
    1664:	9e ad       	ldd	r25, Y+62	; 0x3e
    1666:	9a af       	std	Y+58, r25	; 0x3a
    1668:	89 af       	std	Y+57, r24	; 0x39
    166a:	89 ad       	ldd	r24, Y+57	; 0x39
    166c:	9a ad       	ldd	r25, Y+58	; 0x3a
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <main+0x824>
    1672:	9a af       	std	Y+58, r25	; 0x3a
    1674:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(50);
						count++;
    1676:	de 01       	movw	r26, r28
    1678:	a0 58       	subi	r26, 0x80	; 128
    167a:	bf 4f       	sbci	r27, 0xFF	; 255
    167c:	fe 01       	movw	r30, r28
    167e:	e0 58       	subi	r30, 0x80	; 128
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	80 81       	ld	r24, Z
    1684:	8f 5f       	subi	r24, 0xFF	; 255
    1686:	8c 93       	st	X, r24
					Local_TakeOperation=0;
					/* TAKE PASS FROM THE USER*/
					A_DLSS_VoidStep_3_RecievePassword();
					/* READ THE PASS STORED INTO EEPROM AND SAVE IT INTO g_Arrpass2*/
					uint8 count =0;
					while(count < PASS_SIZE)
    1688:	fe 01       	movw	r30, r28
    168a:	e0 58       	subi	r30, 0x80	; 128
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	80 81       	ld	r24, Z
    1690:	85 30       	cpi	r24, 0x05	; 5
    1692:	08 f4       	brcc	.+2      	; 0x1696 <main+0x84c>
    1694:	52 cf       	rjmp	.-348    	; 0x153a <main+0x6f0>
						EEPROM_readByte(PASSWORD_ADDRESS_LOCATION_1+count , g_Arrpass2[count]);
						_delay_ms(50);
						count++;
					}
					/*check pass  stored into g_Arrpass2  with the pass stored into g_Arrpass1*/
					Return_checkPass = A_DLSS_VoidCheckPassword(g_Arrpass1,g_Arrpass2,PASS_SIZE);
    1696:	88 e6       	ldi	r24, 0x68	; 104
    1698:	91 e0       	ldi	r25, 0x01	; 1
    169a:	2d e6       	ldi	r18, 0x6D	; 109
    169c:	31 e0       	ldi	r19, 0x01	; 1
    169e:	b9 01       	movw	r22, r18
    16a0:	45 e0       	ldi	r20, 0x05	; 5
    16a2:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <A_DLSS_VoidCheckPassword>
    16a6:	fe 01       	movw	r30, r28
    16a8:	ec 57       	subi	r30, 0x7C	; 124
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	80 83       	st	Z, r24
					/* Return_checkPass should return to HMI_ECU by UART*/
					UART_sendByte(Return_checkPass);
    16ae:	fe 01       	movw	r30, r28
    16b0:	ec 57       	subi	r30, 0x7C	; 124
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	80 81       	ld	r24, Z
    16b6:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <UART_sendByte>
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a8 e4       	ldi	r26, 0x48	; 72
    16c0:	b2 e4       	ldi	r27, 0x42	; 66
    16c2:	8d ab       	std	Y+53, r24	; 0x35
    16c4:	9e ab       	std	Y+54, r25	; 0x36
    16c6:	af ab       	std	Y+55, r26	; 0x37
    16c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ca:	6d a9       	ldd	r22, Y+53	; 0x35
    16cc:	7e a9       	ldd	r23, Y+54	; 0x36
    16ce:	8f a9       	ldd	r24, Y+55	; 0x37
    16d0:	98 ad       	ldd	r25, Y+56	; 0x38
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	4a ef       	ldi	r20, 0xFA	; 250
    16d8:	54 e4       	ldi	r21, 0x44	; 68
    16da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	89 ab       	std	Y+49, r24	; 0x31
    16e4:	9a ab       	std	Y+50, r25	; 0x32
    16e6:	ab ab       	std	Y+51, r26	; 0x33
    16e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16ea:	69 a9       	ldd	r22, Y+49	; 0x31
    16ec:	7a a9       	ldd	r23, Y+50	; 0x32
    16ee:	8b a9       	ldd	r24, Y+51	; 0x33
    16f0:	9c a9       	ldd	r25, Y+52	; 0x34
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e8       	ldi	r20, 0x80	; 128
    16f8:	5f e3       	ldi	r21, 0x3F	; 63
    16fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16fe:	88 23       	and	r24, r24
    1700:	2c f4       	brge	.+10     	; 0x170c <main+0x8c2>
		__ticks = 1;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	98 ab       	std	Y+48, r25	; 0x30
    1708:	8f a7       	std	Y+47, r24	; 0x2f
    170a:	3f c0       	rjmp	.+126    	; 0x178a <main+0x940>
	else if (__tmp > 65535)
    170c:	69 a9       	ldd	r22, Y+49	; 0x31
    170e:	7a a9       	ldd	r23, Y+50	; 0x32
    1710:	8b a9       	ldd	r24, Y+51	; 0x33
    1712:	9c a9       	ldd	r25, Y+52	; 0x34
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	3f ef       	ldi	r19, 0xFF	; 255
    1718:	4f e7       	ldi	r20, 0x7F	; 127
    171a:	57 e4       	ldi	r21, 0x47	; 71
    171c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1720:	18 16       	cp	r1, r24
    1722:	4c f5       	brge	.+82     	; 0x1776 <main+0x92c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1724:	6d a9       	ldd	r22, Y+53	; 0x35
    1726:	7e a9       	ldd	r23, Y+54	; 0x36
    1728:	8f a9       	ldd	r24, Y+55	; 0x37
    172a:	98 ad       	ldd	r25, Y+56	; 0x38
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e2       	ldi	r20, 0x20	; 32
    1732:	51 e4       	ldi	r21, 0x41	; 65
    1734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	98 ab       	std	Y+48, r25	; 0x30
    174a:	8f a7       	std	Y+47, r24	; 0x2f
    174c:	0f c0       	rjmp	.+30     	; 0x176c <main+0x922>
    174e:	88 ec       	ldi	r24, 0xC8	; 200
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	9e a7       	std	Y+46, r25	; 0x2e
    1754:	8d a7       	std	Y+45, r24	; 0x2d
    1756:	8d a5       	ldd	r24, Y+45	; 0x2d
    1758:	9e a5       	ldd	r25, Y+46	; 0x2e
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <main+0x910>
    175e:	9e a7       	std	Y+46, r25	; 0x2e
    1760:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1762:	8f a5       	ldd	r24, Y+47	; 0x2f
    1764:	98 a9       	ldd	r25, Y+48	; 0x30
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	98 ab       	std	Y+48, r25	; 0x30
    176a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176c:	8f a5       	ldd	r24, Y+47	; 0x2f
    176e:	98 a9       	ldd	r25, Y+48	; 0x30
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	69 f7       	brne	.-38     	; 0x174e <main+0x904>
    1774:	14 c0       	rjmp	.+40     	; 0x179e <main+0x954>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1776:	69 a9       	ldd	r22, Y+49	; 0x31
    1778:	7a a9       	ldd	r23, Y+50	; 0x32
    177a:	8b a9       	ldd	r24, Y+51	; 0x33
    177c:	9c a9       	ldd	r25, Y+52	; 0x34
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	98 ab       	std	Y+48, r25	; 0x30
    1788:	8f a7       	std	Y+47, r24	; 0x2f
    178a:	8f a5       	ldd	r24, Y+47	; 0x2f
    178c:	98 a9       	ldd	r25, Y+48	; 0x30
    178e:	9c a7       	std	Y+44, r25	; 0x2c
    1790:	8b a7       	std	Y+43, r24	; 0x2b
    1792:	8b a5       	ldd	r24, Y+43	; 0x2b
    1794:	9c a5       	ldd	r25, Y+44	; 0x2c
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <main+0x94c>
    179a:	9c a7       	std	Y+44, r25	; 0x2c
    179c:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(50);
					/* receive byte after the two pass matched to start open motor*/
					Local_TakeOperation = UART_recieveByte();
    179e:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <UART_recieveByte>
    17a2:	fe 01       	movw	r30, r28
    17a4:	ed 57       	subi	r30, 0x7D	; 125
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	80 83       	st	Z, r24
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	a0 ef       	ldi	r26, 0xF0	; 240
    17b0:	b1 e4       	ldi	r27, 0x41	; 65
    17b2:	8f a3       	std	Y+39, r24	; 0x27
    17b4:	98 a7       	std	Y+40, r25	; 0x28
    17b6:	a9 a7       	std	Y+41, r26	; 0x29
    17b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ba:	6f a1       	ldd	r22, Y+39	; 0x27
    17bc:	78 a5       	ldd	r23, Y+40	; 0x28
    17be:	89 a5       	ldd	r24, Y+41	; 0x29
    17c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	4a ef       	ldi	r20, 0xFA	; 250
    17c8:	54 e4       	ldi	r21, 0x44	; 68
    17ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	8b a3       	std	Y+35, r24	; 0x23
    17d4:	9c a3       	std	Y+36, r25	; 0x24
    17d6:	ad a3       	std	Y+37, r26	; 0x25
    17d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17da:	6b a1       	ldd	r22, Y+35	; 0x23
    17dc:	7c a1       	ldd	r23, Y+36	; 0x24
    17de:	8d a1       	ldd	r24, Y+37	; 0x25
    17e0:	9e a1       	ldd	r25, Y+38	; 0x26
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e8       	ldi	r20, 0x80	; 128
    17e8:	5f e3       	ldi	r21, 0x3F	; 63
    17ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ee:	88 23       	and	r24, r24
    17f0:	2c f4       	brge	.+10     	; 0x17fc <main+0x9b2>
		__ticks = 1;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	9a a3       	std	Y+34, r25	; 0x22
    17f8:	89 a3       	std	Y+33, r24	; 0x21
    17fa:	3f c0       	rjmp	.+126    	; 0x187a <main+0xa30>
	else if (__tmp > 65535)
    17fc:	6b a1       	ldd	r22, Y+35	; 0x23
    17fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1800:	8d a1       	ldd	r24, Y+37	; 0x25
    1802:	9e a1       	ldd	r25, Y+38	; 0x26
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	3f ef       	ldi	r19, 0xFF	; 255
    1808:	4f e7       	ldi	r20, 0x7F	; 127
    180a:	57 e4       	ldi	r21, 0x47	; 71
    180c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1810:	18 16       	cp	r1, r24
    1812:	4c f5       	brge	.+82     	; 0x1866 <main+0xa1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1814:	6f a1       	ldd	r22, Y+39	; 0x27
    1816:	78 a5       	ldd	r23, Y+40	; 0x28
    1818:	89 a5       	ldd	r24, Y+41	; 0x29
    181a:	9a a5       	ldd	r25, Y+42	; 0x2a
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e2       	ldi	r20, 0x20	; 32
    1822:	51 e4       	ldi	r21, 0x41	; 65
    1824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	bc 01       	movw	r22, r24
    182e:	cd 01       	movw	r24, r26
    1830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	9a a3       	std	Y+34, r25	; 0x22
    183a:	89 a3       	std	Y+33, r24	; 0x21
    183c:	0f c0       	rjmp	.+30     	; 0x185c <main+0xa12>
    183e:	88 ec       	ldi	r24, 0xC8	; 200
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	98 a3       	std	Y+32, r25	; 0x20
    1844:	8f 8f       	std	Y+31, r24	; 0x1f
    1846:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1848:	98 a1       	ldd	r25, Y+32	; 0x20
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <main+0xa00>
    184e:	98 a3       	std	Y+32, r25	; 0x20
    1850:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1852:	89 a1       	ldd	r24, Y+33	; 0x21
    1854:	9a a1       	ldd	r25, Y+34	; 0x22
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	9a a3       	std	Y+34, r25	; 0x22
    185a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185c:	89 a1       	ldd	r24, Y+33	; 0x21
    185e:	9a a1       	ldd	r25, Y+34	; 0x22
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	69 f7       	brne	.-38     	; 0x183e <main+0x9f4>
    1864:	14 c0       	rjmp	.+40     	; 0x188e <main+0xa44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1866:	6b a1       	ldd	r22, Y+35	; 0x23
    1868:	7c a1       	ldd	r23, Y+36	; 0x24
    186a:	8d a1       	ldd	r24, Y+37	; 0x25
    186c:	9e a1       	ldd	r25, Y+38	; 0x26
    186e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	9a a3       	std	Y+34, r25	; 0x22
    1878:	89 a3       	std	Y+33, r24	; 0x21
    187a:	89 a1       	ldd	r24, Y+33	; 0x21
    187c:	9a a1       	ldd	r25, Y+34	; 0x22
    187e:	9e 8f       	std	Y+30, r25	; 0x1e
    1880:	8d 8f       	std	Y+29, r24	; 0x1d
    1882:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1884:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	f1 f7       	brne	.-4      	; 0x1886 <main+0xa3c>
    188a:	9e 8f       	std	Y+30, r25	; 0x1e
    188c:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(30);
					if(Local_TakeOperation == TURN_MOTOR_ON)
    188e:	fe 01       	movw	r30, r28
    1890:	ed 57       	subi	r30, 0x7D	; 125
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 81       	ld	r24, Z
    1896:	80 36       	cpi	r24, 0x60	; 96
    1898:	09 f0       	breq	.+2      	; 0x189c <main+0xa52>
    189a:	78 cd       	rjmp	.-1296   	; 0x138c <main+0x542>
					{
						/* Motor State */
						A_DLSS_VoidStep_3_MotorState();
    189c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <A_DLSS_VoidStep_3_MotorState>
    18a0:	75 cd       	rjmp	.-1302   	; 0x138c <main+0x542>
/*********************************************************************************************************/

/*********************************************************************************************************/
/***************************************  STEP 4  ********************************************************/
/*********************************************************************************************************/
				else if(Local_TakeOperation == CHANGE_PASS)
    18a2:	fe 01       	movw	r30, r28
    18a4:	ed 57       	subi	r30, 0x7D	; 125
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	80 81       	ld	r24, Z
    18aa:	8d 32       	cpi	r24, 0x2D	; 45
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <main+0xa66>
    18ae:	41 c1       	rjmp	.+642    	; 0x1b32 <main+0xce8>
				{
					Return_checkPass=0;
    18b0:	fe 01       	movw	r30, r28
    18b2:	ec 57       	subi	r30, 0x7C	; 124
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	10 82       	st	Z, r1
					Local_TakeOperation=0;
    18b8:	fe 01       	movw	r30, r28
    18ba:	ed 57       	subi	r30, 0x7D	; 125
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	10 82       	st	Z, r1
					/* TAKE PASS FROM THE USER*/
					A_DLSS_VoidStep_4_RecievePassword();
    18c0:	0e 94 06 10 	call	0x200c	; 0x200c <A_DLSS_VoidStep_4_RecievePassword>
					/* READ THE PASS STORED INTO EEPROM AND SAVE IT INTO g_Arrpass2*/
					uint8 count =0;
    18c4:	fe 01       	movw	r30, r28
    18c6:	e1 58       	subi	r30, 0x81	; 129
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	10 82       	st	Z, r1
    18cc:	94 c0       	rjmp	.+296    	; 0x19f6 <main+0xbac>
					while(count < PASS_SIZE)
					{
						EEPROM_readByte(PASSWORD_ADDRESS_LOCATION_1+count , g_Arrpass2[count]);
    18ce:	fe 01       	movw	r30, r28
    18d0:	e1 58       	subi	r30, 0x81	; 129
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	80 81       	ld	r24, Z
    18d6:	88 2f       	mov	r24, r24
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	80 96       	adiw	r24, 0x20	; 32
    18dc:	ac 01       	movw	r20, r24
    18de:	fe 01       	movw	r30, r28
    18e0:	e1 58       	subi	r30, 0x81	; 129
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 81       	ld	r24, Z
    18e6:	88 2f       	mov	r24, r24
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	fc 01       	movw	r30, r24
    18ec:	e3 59       	subi	r30, 0x93	; 147
    18ee:	fe 4f       	sbci	r31, 0xFE	; 254
    18f0:	80 81       	ld	r24, Z
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	9c 01       	movw	r18, r24
    18f8:	ca 01       	movw	r24, r20
    18fa:	b9 01       	movw	r22, r18
    18fc:	0e 94 63 11 	call	0x22c6	; 0x22c6 <EEPROM_readByte>
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a8 e4       	ldi	r26, 0x48	; 72
    1906:	b2 e4       	ldi	r27, 0x42	; 66
    1908:	89 8f       	std	Y+25, r24	; 0x19
    190a:	9a 8f       	std	Y+26, r25	; 0x1a
    190c:	ab 8f       	std	Y+27, r26	; 0x1b
    190e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1910:	69 8d       	ldd	r22, Y+25	; 0x19
    1912:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1914:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1916:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	4a ef       	ldi	r20, 0xFA	; 250
    191e:	54 e4       	ldi	r21, 0x44	; 68
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	8d 8b       	std	Y+21, r24	; 0x15
    192a:	9e 8b       	std	Y+22, r25	; 0x16
    192c:	af 8b       	std	Y+23, r26	; 0x17
    192e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1930:	6d 89       	ldd	r22, Y+21	; 0x15
    1932:	7e 89       	ldd	r23, Y+22	; 0x16
    1934:	8f 89       	ldd	r24, Y+23	; 0x17
    1936:	98 8d       	ldd	r25, Y+24	; 0x18
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e8       	ldi	r20, 0x80	; 128
    193e:	5f e3       	ldi	r21, 0x3F	; 63
    1940:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1944:	88 23       	and	r24, r24
    1946:	2c f4       	brge	.+10     	; 0x1952 <main+0xb08>
		__ticks = 1;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9c 8b       	std	Y+20, r25	; 0x14
    194e:	8b 8b       	std	Y+19, r24	; 0x13
    1950:	3f c0       	rjmp	.+126    	; 0x19d0 <main+0xb86>
	else if (__tmp > 65535)
    1952:	6d 89       	ldd	r22, Y+21	; 0x15
    1954:	7e 89       	ldd	r23, Y+22	; 0x16
    1956:	8f 89       	ldd	r24, Y+23	; 0x17
    1958:	98 8d       	ldd	r25, Y+24	; 0x18
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	3f ef       	ldi	r19, 0xFF	; 255
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	57 e4       	ldi	r21, 0x47	; 71
    1962:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1966:	18 16       	cp	r1, r24
    1968:	4c f5       	brge	.+82     	; 0x19bc <main+0xb72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196a:	69 8d       	ldd	r22, Y+25	; 0x19
    196c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    196e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1970:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e2       	ldi	r20, 0x20	; 32
    1978:	51 e4       	ldi	r21, 0x41	; 65
    197a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9c 8b       	std	Y+20, r25	; 0x14
    1990:	8b 8b       	std	Y+19, r24	; 0x13
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <main+0xb68>
    1994:	88 ec       	ldi	r24, 0xC8	; 200
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9a 8b       	std	Y+18, r25	; 0x12
    199a:	89 8b       	std	Y+17, r24	; 0x11
    199c:	89 89       	ldd	r24, Y+17	; 0x11
    199e:	9a 89       	ldd	r25, Y+18	; 0x12
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <main+0xb56>
    19a4:	9a 8b       	std	Y+18, r25	; 0x12
    19a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a8:	8b 89       	ldd	r24, Y+19	; 0x13
    19aa:	9c 89       	ldd	r25, Y+20	; 0x14
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	9c 8b       	std	Y+20, r25	; 0x14
    19b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b2:	8b 89       	ldd	r24, Y+19	; 0x13
    19b4:	9c 89       	ldd	r25, Y+20	; 0x14
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	69 f7       	brne	.-38     	; 0x1994 <main+0xb4a>
    19ba:	14 c0       	rjmp	.+40     	; 0x19e4 <main+0xb9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19bc:	6d 89       	ldd	r22, Y+21	; 0x15
    19be:	7e 89       	ldd	r23, Y+22	; 0x16
    19c0:	8f 89       	ldd	r24, Y+23	; 0x17
    19c2:	98 8d       	ldd	r25, Y+24	; 0x18
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9c 8b       	std	Y+20, r25	; 0x14
    19ce:	8b 8b       	std	Y+19, r24	; 0x13
    19d0:	8b 89       	ldd	r24, Y+19	; 0x13
    19d2:	9c 89       	ldd	r25, Y+20	; 0x14
    19d4:	98 8b       	std	Y+16, r25	; 0x10
    19d6:	8f 87       	std	Y+15, r24	; 0x0f
    19d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19da:	98 89       	ldd	r25, Y+16	; 0x10
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <main+0xb92>
    19e0:	98 8b       	std	Y+16, r25	; 0x10
    19e2:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(50);
						count++;
    19e4:	de 01       	movw	r26, r28
    19e6:	a1 58       	subi	r26, 0x81	; 129
    19e8:	bf 4f       	sbci	r27, 0xFF	; 255
    19ea:	fe 01       	movw	r30, r28
    19ec:	e1 58       	subi	r30, 0x81	; 129
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	8f 5f       	subi	r24, 0xFF	; 255
    19f4:	8c 93       	st	X, r24
					Local_TakeOperation=0;
					/* TAKE PASS FROM THE USER*/
					A_DLSS_VoidStep_4_RecievePassword();
					/* READ THE PASS STORED INTO EEPROM AND SAVE IT INTO g_Arrpass2*/
					uint8 count =0;
					while(count < PASS_SIZE)
    19f6:	fe 01       	movw	r30, r28
    19f8:	e1 58       	subi	r30, 0x81	; 129
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	80 81       	ld	r24, Z
    19fe:	85 30       	cpi	r24, 0x05	; 5
    1a00:	08 f4       	brcc	.+2      	; 0x1a04 <main+0xbba>
    1a02:	65 cf       	rjmp	.-310    	; 0x18ce <main+0xa84>
						EEPROM_readByte(PASSWORD_ADDRESS_LOCATION_1+count , g_Arrpass2[count]);
						_delay_ms(50);
						count++;
					}
					/*check pass  stored into g_Arrpass2  with the pass stored into g_Arrpass1*/
					Return_checkPass = A_DLSS_VoidCheckPassword(g_Arrpass1,g_Arrpass2,PASS_SIZE);
    1a04:	88 e6       	ldi	r24, 0x68	; 104
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	2d e6       	ldi	r18, 0x6D	; 109
    1a0a:	31 e0       	ldi	r19, 0x01	; 1
    1a0c:	b9 01       	movw	r22, r18
    1a0e:	45 e0       	ldi	r20, 0x05	; 5
    1a10:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <A_DLSS_VoidCheckPassword>
    1a14:	fe 01       	movw	r30, r28
    1a16:	ec 57       	subi	r30, 0x7C	; 124
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	80 83       	st	Z, r24
					/* Return_checkPass should return to HMI_ECU by UART*/
					UART_sendByte(Return_checkPass);
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	ec 57       	subi	r30, 0x7C	; 124
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 81       	ld	r24, Z
    1a24:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <UART_sendByte>
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	a8 e4       	ldi	r26, 0x48	; 72
    1a2e:	b2 e4       	ldi	r27, 0x42	; 66
    1a30:	8b 87       	std	Y+11, r24	; 0x0b
    1a32:	9c 87       	std	Y+12, r25	; 0x0c
    1a34:	ad 87       	std	Y+13, r26	; 0x0d
    1a36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4a ef       	ldi	r20, 0xFA	; 250
    1a46:	54 e4       	ldi	r21, 0x44	; 68
    1a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	8f 83       	std	Y+7, r24	; 0x07
    1a52:	98 87       	std	Y+8, r25	; 0x08
    1a54:	a9 87       	std	Y+9, r26	; 0x09
    1a56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a58:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5a:	78 85       	ldd	r23, Y+8	; 0x08
    1a5c:	89 85       	ldd	r24, Y+9	; 0x09
    1a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e8       	ldi	r20, 0x80	; 128
    1a66:	5f e3       	ldi	r21, 0x3F	; 63
    1a68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a6c:	88 23       	and	r24, r24
    1a6e:	2c f4       	brge	.+10     	; 0x1a7a <main+0xc30>
		__ticks = 1;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9e 83       	std	Y+6, r25	; 0x06
    1a76:	8d 83       	std	Y+5, r24	; 0x05
    1a78:	3f c0       	rjmp	.+126    	; 0x1af8 <main+0xcae>
	else if (__tmp > 65535)
    1a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7c:	78 85       	ldd	r23, Y+8	; 0x08
    1a7e:	89 85       	ldd	r24, Y+9	; 0x09
    1a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	3f ef       	ldi	r19, 0xFF	; 255
    1a86:	4f e7       	ldi	r20, 0x7F	; 127
    1a88:	57 e4       	ldi	r21, 0x47	; 71
    1a8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a8e:	18 16       	cp	r1, r24
    1a90:	4c f5       	brge	.+82     	; 0x1ae4 <main+0xc9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e2       	ldi	r20, 0x20	; 32
    1aa0:	51 e4       	ldi	r21, 0x41	; 65
    1aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	bc 01       	movw	r22, r24
    1aac:	cd 01       	movw	r24, r26
    1aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	9e 83       	std	Y+6, r25	; 0x06
    1ab8:	8d 83       	std	Y+5, r24	; 0x05
    1aba:	0f c0       	rjmp	.+30     	; 0x1ada <main+0xc90>
    1abc:	88 ec       	ldi	r24, 0xC8	; 200
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9c 83       	std	Y+4, r25	; 0x04
    1ac2:	8b 83       	std	Y+3, r24	; 0x03
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <main+0xc7e>
    1acc:	9c 83       	std	Y+4, r25	; 0x04
    1ace:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	69 f7       	brne	.-38     	; 0x1abc <main+0xc72>
    1ae2:	14 c0       	rjmp	.+40     	; 0x1b0c <main+0xcc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae6:	78 85       	ldd	r23, Y+8	; 0x08
    1ae8:	89 85       	ldd	r24, Y+9	; 0x09
    1aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9e 83       	std	Y+6, r25	; 0x06
    1af6:	8d 83       	std	Y+5, r24	; 0x05
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <main+0xcba>
    1b08:	9a 83       	std	Y+2, r25	; 0x02
    1b0a:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(50);
					/* receive byte after the two pass matched to start change pass*/
					Local_TakeOperation = UART_recieveByte();
    1b0c:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <UART_recieveByte>
    1b10:	fe 01       	movw	r30, r28
    1b12:	ed 57       	subi	r30, 0x7D	; 125
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	80 83       	st	Z, r24
					if(Local_TakeOperation == REPEAT_STEP_1)
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ed 57       	subi	r30, 0x7D	; 125
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	80 81       	ld	r24, Z
    1b20:	80 33       	cpi	r24, 0x30	; 48
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <main+0xcdc>
    1b24:	33 cc       	rjmp	.-1946   	; 0x138c <main+0x542>
					{
						/* return to step 1 to take two pass again*/
						Step1_Flag =1;
    1b26:	fe 01       	movw	r30, r28
    1b28:	ee 57       	subi	r30, 0x7E	; 126
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	80 83       	st	Z, r24
    1b30:	2d cc       	rjmp	.-1958   	; 0x138c <main+0x542>
/*********************************************************************************************************/

/*********************************************************************************************************/
/***************************************  STEP 5  ********************************************************/
/*********************************************************************************************************/
				else if(Local_TakeOperation == BLOCK_SYSTEM)
    1b32:	fe 01       	movw	r30, r28
    1b34:	ed 57       	subi	r30, 0x7D	; 125
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	80 81       	ld	r24, Z
    1b3a:	80 37       	cpi	r24, 0x70	; 112
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <main+0xcf6>
    1b3e:	26 cc       	rjmp	.-1972   	; 0x138c <main+0x542>
    1b40:	08 c0       	rjmp	.+16     	; 0x1b52 <main+0xd08>
				{
					/* the system will still here until the HMI ECU send UNBLOCK_SYSTEM command*/
					while(Local_TakeOperation == BLOCK_SYSTEM)
					{
						/*Turn on Buzzer*/
						Buzzer_on();
    1b42:	0e 94 0d 07 	call	0xe1a	; 0xe1a <Buzzer_on>
						Local_TakeOperation = UART_recieveByte();
    1b46:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <UART_recieveByte>
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	ed 57       	subi	r30, 0x7D	; 125
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 83       	st	Z, r24
/***************************************  STEP 5  ********************************************************/
/*********************************************************************************************************/
				else if(Local_TakeOperation == BLOCK_SYSTEM)
				{
					/* the system will still here until the HMI ECU send UNBLOCK_SYSTEM command*/
					while(Local_TakeOperation == BLOCK_SYSTEM)
    1b52:	fe 01       	movw	r30, r28
    1b54:	ed 57       	subi	r30, 0x7D	; 125
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	80 81       	ld	r24, Z
    1b5a:	80 37       	cpi	r24, 0x70	; 112
    1b5c:	91 f3       	breq	.-28     	; 0x1b42 <main+0xcf8>
						/*Turn on Buzzer*/
						Buzzer_on();
						Local_TakeOperation = UART_recieveByte();

					}
					if(Local_TakeOperation == UNBLOCK_SYSTEM)
    1b5e:	fe 01       	movw	r30, r28
    1b60:	ed 57       	subi	r30, 0x7D	; 125
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	80 81       	ld	r24, Z
    1b66:	80 38       	cpi	r24, 0x80	; 128
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <main+0xd22>
    1b6a:	10 cc       	rjmp	.-2016   	; 0x138c <main+0x542>
					{
						/*Turn off Buzzer*/
						Buzzer_off();
    1b6c:	0e 94 19 07 	call	0xe32	; 0xe32 <Buzzer_off>
    1b70:	0d cc       	rjmp	.-2022   	; 0x138c <main+0x542>

00001b72 <A_DLSS_VoidRecivePassword_1>:
    }/*end of main while loop*/

}/*end of Application*/

void A_DLSS_VoidRecivePassword_1(void)
{
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	2f 97       	sbiw	r28, 0x0f	; 15
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
	uint8 Copy_u8_counter =0;
    1b8a:	1f 86       	std	Y+15, r1	; 0x0f
    1b8c:	7e c0       	rjmp	.+252    	; 0x1c8a <A_DLSS_VoidRecivePassword_1+0x118>
	while(Copy_u8_counter < PASS_SIZE)
	{
		g_Arrpass1[Copy_u8_counter] = UART_recieveByte();
    1b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b90:	08 2f       	mov	r16, r24
    1b92:	10 e0       	ldi	r17, 0x00	; 0
    1b94:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <UART_recieveByte>
    1b98:	f8 01       	movw	r30, r16
    1b9a:	e8 59       	subi	r30, 0x98	; 152
    1b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9e:	80 83       	st	Z, r24
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	a8 e4       	ldi	r26, 0x48	; 72
    1ba6:	b2 e4       	ldi	r27, 0x42	; 66
    1ba8:	8b 87       	std	Y+11, r24	; 0x0b
    1baa:	9c 87       	std	Y+12, r25	; 0x0c
    1bac:	ad 87       	std	Y+13, r26	; 0x0d
    1bae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	4a ef       	ldi	r20, 0xFA	; 250
    1bbe:	54 e4       	ldi	r21, 0x44	; 68
    1bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	8f 83       	std	Y+7, r24	; 0x07
    1bca:	98 87       	std	Y+8, r25	; 0x08
    1bcc:	a9 87       	std	Y+9, r26	; 0x09
    1bce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd2:	78 85       	ldd	r23, Y+8	; 0x08
    1bd4:	89 85       	ldd	r24, Y+9	; 0x09
    1bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be4:	88 23       	and	r24, r24
    1be6:	2c f4       	brge	.+10     	; 0x1bf2 <A_DLSS_VoidRecivePassword_1+0x80>
		__ticks = 1;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9e 83       	std	Y+6, r25	; 0x06
    1bee:	8d 83       	std	Y+5, r24	; 0x05
    1bf0:	3f c0       	rjmp	.+126    	; 0x1c70 <A_DLSS_VoidRecivePassword_1+0xfe>
	else if (__tmp > 65535)
    1bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf4:	78 85       	ldd	r23, Y+8	; 0x08
    1bf6:	89 85       	ldd	r24, Y+9	; 0x09
    1bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	3f ef       	ldi	r19, 0xFF	; 255
    1bfe:	4f e7       	ldi	r20, 0x7F	; 127
    1c00:	57 e4       	ldi	r21, 0x47	; 71
    1c02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c06:	18 16       	cp	r1, r24
    1c08:	4c f5       	brge	.+82     	; 0x1c5c <A_DLSS_VoidRecivePassword_1+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
    1c32:	0f c0       	rjmp	.+30     	; 0x1c52 <A_DLSS_VoidRecivePassword_1+0xe0>
    1c34:	88 ec       	ldi	r24, 0xC8	; 200
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9c 83       	std	Y+4, r25	; 0x04
    1c3a:	8b 83       	std	Y+3, r24	; 0x03
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <A_DLSS_VoidRecivePassword_1+0xce>
    1c44:	9c 83       	std	Y+4, r25	; 0x04
    1c46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	9e 83       	std	Y+6, r25	; 0x06
    1c50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	69 f7       	brne	.-38     	; 0x1c34 <A_DLSS_VoidRecivePassword_1+0xc2>
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <A_DLSS_VoidRecivePassword_1+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5e:	78 85       	ldd	r23, Y+8	; 0x08
    1c60:	89 85       	ldd	r24, Y+9	; 0x09
    1c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9e 83       	std	Y+6, r25	; 0x06
    1c6e:	8d 83       	std	Y+5, r24	; 0x05
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	9e 81       	ldd	r25, Y+6	; 0x06
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <A_DLSS_VoidRecivePassword_1+0x10a>
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		Copy_u8_counter++;
    1c84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c86:	8f 5f       	subi	r24, 0xFF	; 255
    1c88:	8f 87       	std	Y+15, r24	; 0x0f
}/*end of Application*/

void A_DLSS_VoidRecivePassword_1(void)
{
	uint8 Copy_u8_counter =0;
	while(Copy_u8_counter < PASS_SIZE)
    1c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8c:	85 30       	cpi	r24, 0x05	; 5
    1c8e:	08 f4       	brcc	.+2      	; 0x1c92 <A_DLSS_VoidRecivePassword_1+0x120>
    1c90:	7e cf       	rjmp	.-260    	; 0x1b8e <A_DLSS_VoidRecivePassword_1+0x1c>
		g_Arrpass1[Copy_u8_counter] = UART_recieveByte();
		_delay_ms(50);
		Copy_u8_counter++;
	}

}
    1c92:	2f 96       	adiw	r28, 0x0f	; 15
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	08 95       	ret

00001ca8 <A_DLSS_VoidRecivePassword_2>:


void A_DLSS_VoidRecivePassword_2(void)
{
    1ca8:	0f 93       	push	r16
    1caa:	1f 93       	push	r17
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	2f 97       	sbiw	r28, 0x0f	; 15
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
	uint8 Copy_u8_counter =0;
    1cc0:	1f 86       	std	Y+15, r1	; 0x0f
    1cc2:	7e c0       	rjmp	.+252    	; 0x1dc0 <A_DLSS_VoidRecivePassword_2+0x118>
	while(Copy_u8_counter < PASS_SIZE)
	{
		g_Arrpass2[Copy_u8_counter] = UART_recieveByte();
    1cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc6:	08 2f       	mov	r16, r24
    1cc8:	10 e0       	ldi	r17, 0x00	; 0
    1cca:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <UART_recieveByte>
    1cce:	f8 01       	movw	r30, r16
    1cd0:	e3 59       	subi	r30, 0x93	; 147
    1cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd4:	80 83       	st	Z, r24
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a8 e4       	ldi	r26, 0x48	; 72
    1cdc:	b2 e4       	ldi	r27, 0x42	; 66
    1cde:	8b 87       	std	Y+11, r24	; 0x0b
    1ce0:	9c 87       	std	Y+12, r25	; 0x0c
    1ce2:	ad 87       	std	Y+13, r26	; 0x0d
    1ce4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4a ef       	ldi	r20, 0xFA	; 250
    1cf4:	54 e4       	ldi	r21, 0x44	; 68
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8f 83       	std	Y+7, r24	; 0x07
    1d00:	98 87       	std	Y+8, r25	; 0x08
    1d02:	a9 87       	std	Y+9, r26	; 0x09
    1d04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d06:	6f 81       	ldd	r22, Y+7	; 0x07
    1d08:	78 85       	ldd	r23, Y+8	; 0x08
    1d0a:	89 85       	ldd	r24, Y+9	; 0x09
    1d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <A_DLSS_VoidRecivePassword_2+0x80>
		__ticks = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9e 83       	std	Y+6, r25	; 0x06
    1d24:	8d 83       	std	Y+5, r24	; 0x05
    1d26:	3f c0       	rjmp	.+126    	; 0x1da6 <A_DLSS_VoidRecivePassword_2+0xfe>
	else if (__tmp > 65535)
    1d28:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2a:	78 85       	ldd	r23, Y+8	; 0x08
    1d2c:	89 85       	ldd	r24, Y+9	; 0x09
    1d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	4c f5       	brge	.+82     	; 0x1d92 <A_DLSS_VoidRecivePassword_2+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9e 83       	std	Y+6, r25	; 0x06
    1d66:	8d 83       	std	Y+5, r24	; 0x05
    1d68:	0f c0       	rjmp	.+30     	; 0x1d88 <A_DLSS_VoidRecivePassword_2+0xe0>
    1d6a:	88 ec       	ldi	r24, 0xC8	; 200
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9c 83       	std	Y+4, r25	; 0x04
    1d70:	8b 83       	std	Y+3, r24	; 0x03
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	9c 81       	ldd	r25, Y+4	; 0x04
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <A_DLSS_VoidRecivePassword_2+0xce>
    1d7a:	9c 83       	std	Y+4, r25	; 0x04
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d80:	9e 81       	ldd	r25, Y+6	; 0x06
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	9e 83       	std	Y+6, r25	; 0x06
    1d86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	69 f7       	brne	.-38     	; 0x1d6a <A_DLSS_VoidRecivePassword_2+0xc2>
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <A_DLSS_VoidRecivePassword_2+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	6f 81       	ldd	r22, Y+7	; 0x07
    1d94:	78 85       	ldd	r23, Y+8	; 0x08
    1d96:	89 85       	ldd	r24, Y+9	; 0x09
    1d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9e 83       	std	Y+6, r25	; 0x06
    1da4:	8d 83       	std	Y+5, r24	; 0x05
    1da6:	8d 81       	ldd	r24, Y+5	; 0x05
    1da8:	9e 81       	ldd	r25, Y+6	; 0x06
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <A_DLSS_VoidRecivePassword_2+0x10a>
    1db6:	9a 83       	std	Y+2, r25	; 0x02
    1db8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		Copy_u8_counter++;
    1dba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dbc:	8f 5f       	subi	r24, 0xFF	; 255
    1dbe:	8f 87       	std	Y+15, r24	; 0x0f


void A_DLSS_VoidRecivePassword_2(void)
{
	uint8 Copy_u8_counter =0;
	while(Copy_u8_counter < PASS_SIZE)
    1dc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc2:	85 30       	cpi	r24, 0x05	; 5
    1dc4:	08 f4       	brcc	.+2      	; 0x1dc8 <A_DLSS_VoidRecivePassword_2+0x120>
    1dc6:	7e cf       	rjmp	.-260    	; 0x1cc4 <A_DLSS_VoidRecivePassword_2+0x1c>
		g_Arrpass2[Copy_u8_counter] = UART_recieveByte();
		_delay_ms(50);
		Copy_u8_counter++;
	}

}
    1dc8:	2f 96       	adiw	r28, 0x0f	; 15
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	08 95       	ret

00001dde <A_DLSS_VoidCheckPassword>:

uint8 A_DLSS_VoidCheckPassword(uint8 *Copy_Au8pass1 ,uint8 *Copy_Au8pass2 , uint8 Arr_Size)

{
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	28 97       	sbiw	r28, 0x08	; 8
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	9d 83       	std	Y+5, r25	; 0x05
    1df4:	8c 83       	std	Y+4, r24	; 0x04
    1df6:	7f 83       	std	Y+7, r23	; 0x07
    1df8:	6e 83       	std	Y+6, r22	; 0x06
    1dfa:	48 87       	std	Y+8, r20	; 0x08
	uint8 Check_Flag = PASS_MATCHED;
    1dfc:	80 e9       	ldi	r24, 0x90	; 144
    1dfe:	8b 83       	std	Y+3, r24	; 0x03

	for(int i = 0 ; i < Arr_Size ; i++)
    1e00:	1a 82       	std	Y+2, r1	; 0x02
    1e02:	19 82       	std	Y+1, r1	; 0x01
    1e04:	16 c0       	rjmp	.+44     	; 0x1e32 <A_DLSS_VoidCheckPassword+0x54>
	{
		if(g_Arrpass1[i] != g_Arrpass2[i])
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	e8 59       	subi	r30, 0x98	; 152
    1e0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e10:	20 81       	ld	r18, Z
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	9a 81       	ldd	r25, Y+2	; 0x02
    1e16:	fc 01       	movw	r30, r24
    1e18:	e3 59       	subi	r30, 0x93	; 147
    1e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e1c:	80 81       	ld	r24, Z
    1e1e:	28 17       	cp	r18, r24
    1e20:	19 f0       	breq	.+6      	; 0x1e28 <A_DLSS_VoidCheckPassword+0x4a>
		{
			Check_Flag = PASS_NOT_MATCHED;
    1e22:	80 e1       	ldi	r24, 0x10	; 16
    1e24:	8b 83       	std	Y+3, r24	; 0x03
    1e26:	0d c0       	rjmp	.+26     	; 0x1e42 <A_DLSS_VoidCheckPassword+0x64>
uint8 A_DLSS_VoidCheckPassword(uint8 *Copy_Au8pass1 ,uint8 *Copy_Au8pass2 , uint8 Arr_Size)

{
	uint8 Check_Flag = PASS_MATCHED;

	for(int i = 0 ; i < Arr_Size ; i++)
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	01 96       	adiw	r24, 0x01	; 1
    1e2e:	9a 83       	std	Y+2, r25	; 0x02
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	88 85       	ldd	r24, Y+8	; 0x08
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3c:	82 17       	cp	r24, r18
    1e3e:	93 07       	cpc	r25, r19
    1e40:	14 f3       	brlt	.-60     	; 0x1e06 <A_DLSS_VoidCheckPassword+0x28>
			Check_Flag = PASS_NOT_MATCHED;
			break;
		}

	}
	return Check_Flag;
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e44:	28 96       	adiw	r28, 0x08	; 8
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <A_DLSS_VoidStep_3_RecievePassword>:

void A_DLSS_VoidStep_3_RecievePassword(void)
{
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	2f 97       	sbiw	r28, 0x0f	; 15
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
	uint8 Copy_u8_counter =0;
    1e6e:	1f 86       	std	Y+15, r1	; 0x0f
    1e70:	7e c0       	rjmp	.+252    	; 0x1f6e <A_DLSS_VoidStep_3_RecievePassword+0x118>
	while(Copy_u8_counter < PASS_SIZE)
	{
		g_Arrpass1[Copy_u8_counter] = UART_recieveByte();
    1e72:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e74:	08 2f       	mov	r16, r24
    1e76:	10 e0       	ldi	r17, 0x00	; 0
    1e78:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <UART_recieveByte>
    1e7c:	f8 01       	movw	r30, r16
    1e7e:	e8 59       	subi	r30, 0x98	; 152
    1e80:	fe 4f       	sbci	r31, 0xFE	; 254
    1e82:	80 83       	st	Z, r24
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a8 e4       	ldi	r26, 0x48	; 72
    1e8a:	b2 e4       	ldi	r27, 0x42	; 66
    1e8c:	8b 87       	std	Y+11, r24	; 0x0b
    1e8e:	9c 87       	std	Y+12, r25	; 0x0c
    1e90:	ad 87       	std	Y+13, r26	; 0x0d
    1e92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4a ef       	ldi	r20, 0xFA	; 250
    1ea2:	54 e4       	ldi	r21, 0x44	; 68
    1ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	8f 83       	std	Y+7, r24	; 0x07
    1eae:	98 87       	std	Y+8, r25	; 0x08
    1eb0:	a9 87       	std	Y+9, r26	; 0x09
    1eb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb6:	78 85       	ldd	r23, Y+8	; 0x08
    1eb8:	89 85       	ldd	r24, Y+9	; 0x09
    1eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e8       	ldi	r20, 0x80	; 128
    1ec2:	5f e3       	ldi	r21, 0x3F	; 63
    1ec4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec8:	88 23       	and	r24, r24
    1eca:	2c f4       	brge	.+10     	; 0x1ed6 <A_DLSS_VoidStep_3_RecievePassword+0x80>
		__ticks = 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9e 83       	std	Y+6, r25	; 0x06
    1ed2:	8d 83       	std	Y+5, r24	; 0x05
    1ed4:	3f c0       	rjmp	.+126    	; 0x1f54 <A_DLSS_VoidStep_3_RecievePassword+0xfe>
	else if (__tmp > 65535)
    1ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed8:	78 85       	ldd	r23, Y+8	; 0x08
    1eda:	89 85       	ldd	r24, Y+9	; 0x09
    1edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	3f ef       	ldi	r19, 0xFF	; 255
    1ee2:	4f e7       	ldi	r20, 0x7F	; 127
    1ee4:	57 e4       	ldi	r21, 0x47	; 71
    1ee6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eea:	18 16       	cp	r1, r24
    1eec:	4c f5       	brge	.+82     	; 0x1f40 <A_DLSS_VoidStep_3_RecievePassword+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e2       	ldi	r20, 0x20	; 32
    1efc:	51 e4       	ldi	r21, 0x41	; 65
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	bc 01       	movw	r22, r24
    1f08:	cd 01       	movw	r24, r26
    1f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
    1f16:	0f c0       	rjmp	.+30     	; 0x1f36 <A_DLSS_VoidStep_3_RecievePassword+0xe0>
    1f18:	88 ec       	ldi	r24, 0xC8	; 200
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	9c 83       	std	Y+4, r25	; 0x04
    1f1e:	8b 83       	std	Y+3, r24	; 0x03
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <A_DLSS_VoidStep_3_RecievePassword+0xce>
    1f28:	9c 83       	std	Y+4, r25	; 0x04
    1f2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3a:	00 97       	sbiw	r24, 0x00	; 0
    1f3c:	69 f7       	brne	.-38     	; 0x1f18 <A_DLSS_VoidStep_3_RecievePassword+0xc2>
    1f3e:	14 c0       	rjmp	.+40     	; 0x1f68 <A_DLSS_VoidStep_3_RecievePassword+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f40:	6f 81       	ldd	r22, Y+7	; 0x07
    1f42:	78 85       	ldd	r23, Y+8	; 0x08
    1f44:	89 85       	ldd	r24, Y+9	; 0x09
    1f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9e 83       	std	Y+6, r25	; 0x06
    1f52:	8d 83       	std	Y+5, r24	; 0x05
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	9a 83       	std	Y+2, r25	; 0x02
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <A_DLSS_VoidStep_3_RecievePassword+0x10a>
    1f64:	9a 83       	std	Y+2, r25	; 0x02
    1f66:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
	    Copy_u8_counter++;
    1f68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f6a:	8f 5f       	subi	r24, 0xFF	; 255
    1f6c:	8f 87       	std	Y+15, r24	; 0x0f
}

void A_DLSS_VoidStep_3_RecievePassword(void)
{
	uint8 Copy_u8_counter =0;
	while(Copy_u8_counter < PASS_SIZE)
    1f6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f70:	85 30       	cpi	r24, 0x05	; 5
    1f72:	08 f4       	brcc	.+2      	; 0x1f76 <A_DLSS_VoidStep_3_RecievePassword+0x120>
    1f74:	7e cf       	rjmp	.-260    	; 0x1e72 <A_DLSS_VoidStep_3_RecievePassword+0x1c>
		g_Arrpass1[Copy_u8_counter] = UART_recieveByte();
		_delay_ms(50);
	    Copy_u8_counter++;
	}

}
    1f76:	2f 96       	adiw	r28, 0x0f	; 15
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	1f 91       	pop	r17
    1f88:	0f 91       	pop	r16
    1f8a:	08 95       	ret

00001f8c <A_DLSS_VoidStep_3_MotorState>:

void A_DLSS_VoidStep_3_MotorState(void)
{
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&Timer1_configCTCMode);
    1f94:	89 e7       	ldi	r24, 0x79	; 121
    1f96:	91 e0       	ldi	r25, 0x01	; 1
    1f98:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <Timer1_init>
	g_Second =0;
    1f9c:	10 92 88 01 	sts	0x0188, r1
    1fa0:	04 c0       	rjmp	.+8      	; 0x1faa <A_DLSS_VoidStep_3_MotorState+0x1e>

	while(g_Second < TIME_OF_DOOR_UNLOOKED)
	{
		DcMotor_Rotate(RUN_MOTOR_CW,MOTOR_FULL_SPEED);
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	64 e6       	ldi	r22, 0x64	; 100
    1fa6:	0e 94 bc 10 	call	0x2178	; 0x2178 <DcMotor_Rotate>
void A_DLSS_VoidStep_3_MotorState(void)
{
	Timer1_init(&Timer1_configCTCMode);
	g_Second =0;

	while(g_Second < TIME_OF_DOOR_UNLOOKED)
    1faa:	80 91 88 01 	lds	r24, 0x0188
    1fae:	8f 30       	cpi	r24, 0x0F	; 15
    1fb0:	c0 f3       	brcs	.-16     	; 0x1fa2 <A_DLSS_VoidStep_3_MotorState+0x16>
	{
		DcMotor_Rotate(RUN_MOTOR_CW,MOTOR_FULL_SPEED);
	}

	g_Second =0;
    1fb2:	10 92 88 01 	sts	0x0188, r1
    1fb6:	04 c0       	rjmp	.+8      	; 0x1fc0 <A_DLSS_VoidStep_3_MotorState+0x34>

	while(g_Second < TIME_OF_MOTOR_HOLD)
	{
		DcMotor_Rotate(STOP_MOTOR,0);
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	0e 94 bc 10 	call	0x2178	; 0x2178 <DcMotor_Rotate>
		DcMotor_Rotate(RUN_MOTOR_CW,MOTOR_FULL_SPEED);
	}

	g_Second =0;

	while(g_Second < TIME_OF_MOTOR_HOLD)
    1fc0:	80 91 88 01 	lds	r24, 0x0188
    1fc4:	83 30       	cpi	r24, 0x03	; 3
    1fc6:	c0 f3       	brcs	.-16     	; 0x1fb8 <A_DLSS_VoidStep_3_MotorState+0x2c>
	{
		DcMotor_Rotate(STOP_MOTOR,0);
	}
	g_Second=0;
    1fc8:	10 92 88 01 	sts	0x0188, r1
    1fcc:	04 c0       	rjmp	.+8      	; 0x1fd6 <A_DLSS_VoidStep_3_MotorState+0x4a>

	while(g_Second < TIME_OF_DOOR_LOOKED)
	{
		DcMotor_Rotate(RUN_MOTOR_A_CW,MOTOR_FULL_SPEED);
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	64 e6       	ldi	r22, 0x64	; 100
    1fd2:	0e 94 bc 10 	call	0x2178	; 0x2178 <DcMotor_Rotate>
	{
		DcMotor_Rotate(STOP_MOTOR,0);
	}
	g_Second=0;

	while(g_Second < TIME_OF_DOOR_LOOKED)
    1fd6:	80 91 88 01 	lds	r24, 0x0188
    1fda:	8f 30       	cpi	r24, 0x0F	; 15
    1fdc:	c0 f3       	brcs	.-16     	; 0x1fce <A_DLSS_VoidStep_3_MotorState+0x42>
	{
		DcMotor_Rotate(RUN_MOTOR_A_CW,MOTOR_FULL_SPEED);
	}


	g_Second=0;
    1fde:	10 92 88 01 	sts	0x0188, r1
	Timer1_deInit();
    1fe2:	0e 94 19 1b 	call	0x3632	; 0x3632 <Timer1_deInit>
	DcMotor_Rotate(STOP_MOTOR,0);
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	60 e0       	ldi	r22, 0x00	; 0
    1fea:	0e 94 bc 10 	call	0x2178	; 0x2178 <DcMotor_Rotate>

}
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <A_DLSS_VoidGenerateSecond>:
void A_DLSS_VoidGenerateSecond(void)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
	g_Second++;
    1ffc:	80 91 88 01 	lds	r24, 0x0188
    2000:	8f 5f       	subi	r24, 0xFF	; 255
    2002:	80 93 88 01 	sts	0x0188, r24

}
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <A_DLSS_VoidStep_4_RecievePassword>:

void A_DLSS_VoidStep_4_RecievePassword(void)
{
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	2f 97       	sbiw	r28, 0x0f	; 15
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61

	uint8 Copy_u8_counter =0;
    2024:	1f 86       	std	Y+15, r1	; 0x0f
    2026:	7e c0       	rjmp	.+252    	; 0x2124 <A_DLSS_VoidStep_4_RecievePassword+0x118>
	while(Copy_u8_counter < PASS_SIZE)
	{
		g_Arrpass1[Copy_u8_counter] = UART_recieveByte();
    2028:	8f 85       	ldd	r24, Y+15	; 0x0f
    202a:	08 2f       	mov	r16, r24
    202c:	10 e0       	ldi	r17, 0x00	; 0
    202e:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <UART_recieveByte>
    2032:	f8 01       	movw	r30, r16
    2034:	e8 59       	subi	r30, 0x98	; 152
    2036:	fe 4f       	sbci	r31, 0xFE	; 254
    2038:	80 83       	st	Z, r24
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	a8 e4       	ldi	r26, 0x48	; 72
    2040:	b2 e4       	ldi	r27, 0x42	; 66
    2042:	8b 87       	std	Y+11, r24	; 0x0b
    2044:	9c 87       	std	Y+12, r25	; 0x0c
    2046:	ad 87       	std	Y+13, r26	; 0x0d
    2048:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204a:	6b 85       	ldd	r22, Y+11	; 0x0b
    204c:	7c 85       	ldd	r23, Y+12	; 0x0c
    204e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2050:	9e 85       	ldd	r25, Y+14	; 0x0e
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	4a ef       	ldi	r20, 0xFA	; 250
    2058:	54 e4       	ldi	r21, 0x44	; 68
    205a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	8f 83       	std	Y+7, r24	; 0x07
    2064:	98 87       	std	Y+8, r25	; 0x08
    2066:	a9 87       	std	Y+9, r26	; 0x09
    2068:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    206a:	6f 81       	ldd	r22, Y+7	; 0x07
    206c:	78 85       	ldd	r23, Y+8	; 0x08
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e8       	ldi	r20, 0x80	; 128
    2078:	5f e3       	ldi	r21, 0x3F	; 63
    207a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    207e:	88 23       	and	r24, r24
    2080:	2c f4       	brge	.+10     	; 0x208c <A_DLSS_VoidStep_4_RecievePassword+0x80>
		__ticks = 1;
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9e 83       	std	Y+6, r25	; 0x06
    2088:	8d 83       	std	Y+5, r24	; 0x05
    208a:	3f c0       	rjmp	.+126    	; 0x210a <A_DLSS_VoidStep_4_RecievePassword+0xfe>
	else if (__tmp > 65535)
    208c:	6f 81       	ldd	r22, Y+7	; 0x07
    208e:	78 85       	ldd	r23, Y+8	; 0x08
    2090:	89 85       	ldd	r24, Y+9	; 0x09
    2092:	9a 85       	ldd	r25, Y+10	; 0x0a
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	3f ef       	ldi	r19, 0xFF	; 255
    2098:	4f e7       	ldi	r20, 0x7F	; 127
    209a:	57 e4       	ldi	r21, 0x47	; 71
    209c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20a0:	18 16       	cp	r1, r24
    20a2:	4c f5       	brge	.+82     	; 0x20f6 <A_DLSS_VoidStep_4_RecievePassword+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e2       	ldi	r20, 0x20	; 32
    20b2:	51 e4       	ldi	r21, 0x41	; 65
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	bc 01       	movw	r22, r24
    20be:	cd 01       	movw	r24, r26
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9e 83       	std	Y+6, r25	; 0x06
    20ca:	8d 83       	std	Y+5, r24	; 0x05
    20cc:	0f c0       	rjmp	.+30     	; 0x20ec <A_DLSS_VoidStep_4_RecievePassword+0xe0>
    20ce:	88 ec       	ldi	r24, 0xC8	; 200
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9c 83       	std	Y+4, r25	; 0x04
    20d4:	8b 83       	std	Y+3, r24	; 0x03
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	9c 81       	ldd	r25, Y+4	; 0x04
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <A_DLSS_VoidStep_4_RecievePassword+0xce>
    20de:	9c 83       	std	Y+4, r25	; 0x04
    20e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	9e 83       	std	Y+6, r25	; 0x06
    20ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ec:	8d 81       	ldd	r24, Y+5	; 0x05
    20ee:	9e 81       	ldd	r25, Y+6	; 0x06
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	69 f7       	brne	.-38     	; 0x20ce <A_DLSS_VoidStep_4_RecievePassword+0xc2>
    20f4:	14 c0       	rjmp	.+40     	; 0x211e <A_DLSS_VoidStep_4_RecievePassword+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f6:	6f 81       	ldd	r22, Y+7	; 0x07
    20f8:	78 85       	ldd	r23, Y+8	; 0x08
    20fa:	89 85       	ldd	r24, Y+9	; 0x09
    20fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	9e 81       	ldd	r25, Y+6	; 0x06
    210e:	9a 83       	std	Y+2, r25	; 0x02
    2110:	89 83       	std	Y+1, r24	; 0x01
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	9a 81       	ldd	r25, Y+2	; 0x02
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	f1 f7       	brne	.-4      	; 0x2116 <A_DLSS_VoidStep_4_RecievePassword+0x10a>
    211a:	9a 83       	std	Y+2, r25	; 0x02
    211c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		Copy_u8_counter++;
    211e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2120:	8f 5f       	subi	r24, 0xFF	; 255
    2122:	8f 87       	std	Y+15, r24	; 0x0f

void A_DLSS_VoidStep_4_RecievePassword(void)
{

	uint8 Copy_u8_counter =0;
	while(Copy_u8_counter < PASS_SIZE)
    2124:	8f 85       	ldd	r24, Y+15	; 0x0f
    2126:	85 30       	cpi	r24, 0x05	; 5
    2128:	08 f4       	brcc	.+2      	; 0x212c <A_DLSS_VoidStep_4_RecievePassword+0x120>
    212a:	7e cf       	rjmp	.-260    	; 0x2028 <A_DLSS_VoidStep_4_RecievePassword+0x1c>
		g_Arrpass1[Copy_u8_counter] = UART_recieveByte();
		_delay_ms(50);
		Copy_u8_counter++;
	}

}
    212c:	2f 96       	adiw	r28, 0x0f	; 15
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	de bf       	out	0x3e, r29	; 62
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	1f 91       	pop	r17
    213e:	0f 91       	pop	r16
    2140:	08 95       	ret

00002142 <DcMotor_Init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void DcMotor_Init(void)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
	/* setup the direction for the two motor pins through the GPIO driver. */
	GPIO_setupPinDirection(MOTOR_PORT_ID,MOTOR_PIN0_ID,PIN_OUTPUT);
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	41 e0       	ldi	r20, 0x01	; 1
    2150:	0e 94 df 11 	call	0x23be	; 0x23be <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID,MOTOR_PIN1_ID,PIN_OUTPUT);
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	61 e0       	ldi	r22, 0x01	; 1
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	0e 94 df 11 	call	0x23be	; 0x23be <GPIO_setupPinDirection>
	/*Stop at the DC-Motor at the beginning through the GPIO driver.*/
	GPIO_writePin(MOTOR_PORT_ID,MOTOR_PIN0_ID,LOGIC_LOW);
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	40 e0       	ldi	r20, 0x00	; 0
    2164:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID,MOTOR_PIN1_ID,LOGIC_LOW);
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	61 e0       	ldi	r22, 0x01	; 1
    216c:	40 e0       	ldi	r20, 0x00	; 0
    216e:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>

}
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <DcMotor_Rotate>:
void DcMotor_Rotate(uint8 DcMotor_State,uint8 speed)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <DcMotor_Rotate+0x6>
    217e:	0f 92       	push	r0
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	8a 83       	std	Y+2, r24	; 0x02
    2186:	6b 83       	std	Y+3, r22	; 0x03
	if(DcMotor_State == RUN_MOTOR_CW)
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	88 23       	and	r24, r24
    218c:	59 f4       	brne	.+22     	; 0x21a4 <DcMotor_Rotate+0x2c>
	{
		GPIO_writePin(MOTOR_PORT_ID,MOTOR_PIN0_ID,LOGIC_HIGH);
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	41 e0       	ldi	r20, 0x01	; 1
    2194:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID,MOTOR_PIN1_ID,LOGIC_LOW);
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	61 e0       	ldi	r22, 0x01	; 1
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>
    21a2:	1b c0       	rjmp	.+54     	; 0x21da <DcMotor_Rotate+0x62>
	}else if(DcMotor_State == RUN_MOTOR_A_CW)
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	59 f4       	brne	.+22     	; 0x21c0 <DcMotor_Rotate+0x48>
	{
		GPIO_writePin(MOTOR_PORT_ID,PIN0_ID,LOGIC_LOW);
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID,PIN1_ID,LOGIC_HIGH);
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	61 e0       	ldi	r22, 0x01	; 1
    21b8:	41 e0       	ldi	r20, 0x01	; 1
    21ba:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>
    21be:	0d c0       	rjmp	.+26     	; 0x21da <DcMotor_Rotate+0x62>
	}else if(DcMotor_State == STOP_MOTOR)
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	82 30       	cpi	r24, 0x02	; 2
    21c4:	51 f4       	brne	.+20     	; 0x21da <DcMotor_Rotate+0x62>
	{
		GPIO_writePin(MOTOR_PORT_ID,MOTOR_PIN0_ID,LOGIC_LOW);
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID,MOTOR_PIN1_ID,LOGIC_LOW);
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	61 e0       	ldi	r22, 0x01	; 1
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>

	}
	/* speed  0 ----> 100 %
	 * Duty cycle value 0 -----> 255
	 * */
	uint8 Duty_CycleValue = ( (uint8) ( (float32)(speed * 255) / 100) );
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	48 2f       	mov	r20, r24
    21de:	50 e0       	ldi	r21, 0x00	; 0
    21e0:	ca 01       	movw	r24, r20
    21e2:	9c 01       	movw	r18, r24
    21e4:	22 0f       	add	r18, r18
    21e6:	33 1f       	adc	r19, r19
    21e8:	c9 01       	movw	r24, r18
    21ea:	96 95       	lsr	r25
    21ec:	98 2f       	mov	r25, r24
    21ee:	88 27       	eor	r24, r24
    21f0:	97 95       	ror	r25
    21f2:	87 95       	ror	r24
    21f4:	82 1b       	sub	r24, r18
    21f6:	93 0b       	sbc	r25, r19
    21f8:	84 0f       	add	r24, r20
    21fa:	95 1f       	adc	r25, r21
    21fc:	aa 27       	eor	r26, r26
    21fe:	97 fd       	sbrc	r25, 7
    2200:	a0 95       	com	r26
    2202:	ba 2f       	mov	r27, r26
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	bc 01       	movw	r22, r24
    2212:	cd 01       	movw	r24, r26
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	48 ec       	ldi	r20, 0xC8	; 200
    221a:	52 e4       	ldi	r21, 0x42	; 66
    221c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_Start(Duty_CycleValue);
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	0e 94 48 1a 	call	0x3490	; 0x3490 <PWM_Timer0_Start>
}
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <EEPROM_writeByte>:
 */
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	00 d0       	rcall	.+0      	; 0x224a <EEPROM_writeByte+0x6>
    224a:	00 d0       	rcall	.+0      	; 0x224c <EEPROM_writeByte+0x8>
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	9a 83       	std	Y+2, r25	; 0x02
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2256:	0e 94 3b 1c 	call	0x3876	; 0x3876 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    225a:	0e 94 93 1c 	call	0x3926	; 0x3926 <TWI_getStatus>
    225e:	88 30       	cpi	r24, 0x08	; 8
    2260:	11 f0       	breq	.+4      	; 0x2266 <EEPROM_writeByte+0x22>
        return ERROR;
    2262:	1c 82       	std	Y+4, r1	; 0x04
    2264:	28 c0       	rjmp	.+80     	; 0x22b6 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	80 70       	andi	r24, 0x00	; 0
    226c:	97 70       	andi	r25, 0x07	; 7
    226e:	88 0f       	add	r24, r24
    2270:	89 2f       	mov	r24, r25
    2272:	88 1f       	adc	r24, r24
    2274:	99 0b       	sbc	r25, r25
    2276:	91 95       	neg	r25
    2278:	80 6a       	ori	r24, 0xA0	; 160
    227a:	0e 94 56 1c 	call	0x38ac	; 0x38ac <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    227e:	0e 94 93 1c 	call	0x3926	; 0x3926 <TWI_getStatus>
    2282:	88 31       	cpi	r24, 0x18	; 24
    2284:	11 f0       	breq	.+4      	; 0x228a <EEPROM_writeByte+0x46>
        return ERROR; 
    2286:	1c 82       	std	Y+4, r1	; 0x04
    2288:	16 c0       	rjmp	.+44     	; 0x22b6 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	0e 94 56 1c 	call	0x38ac	; 0x38ac <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2290:	0e 94 93 1c 	call	0x3926	; 0x3926 <TWI_getStatus>
    2294:	88 32       	cpi	r24, 0x28	; 40
    2296:	11 f0       	breq	.+4      	; 0x229c <EEPROM_writeByte+0x58>
        return ERROR;
    2298:	1c 82       	std	Y+4, r1	; 0x04
    229a:	0d c0       	rjmp	.+26     	; 0x22b6 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	0e 94 56 1c 	call	0x38ac	; 0x38ac <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    22a2:	0e 94 93 1c 	call	0x3926	; 0x3926 <TWI_getStatus>
    22a6:	88 32       	cpi	r24, 0x28	; 40
    22a8:	11 f0       	breq	.+4      	; 0x22ae <EEPROM_writeByte+0x6a>
        return ERROR;
    22aa:	1c 82       	std	Y+4, r1	; 0x04
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    22ae:	0e 94 4b 1c 	call	0x3896	; 0x3896 <TWI_stop>
	
    return SUCCESS;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	8c 83       	std	Y+4, r24	; 0x04
    22b6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <EEPROM_readByte+0x6>
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <EEPROM_readByte+0x8>
    22ce:	0f 92       	push	r0
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	7c 83       	std	Y+4, r23	; 0x04
    22da:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    22dc:	0e 94 3b 1c 	call	0x3876	; 0x3876 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    22e0:	0e 94 93 1c 	call	0x3926	; 0x3926 <TWI_getStatus>
    22e4:	88 30       	cpi	r24, 0x08	; 8
    22e6:	11 f0       	breq	.+4      	; 0x22ec <EEPROM_readByte+0x26>
        return ERROR;
    22e8:	1d 82       	std	Y+5, r1	; 0x05
    22ea:	44 c0       	rjmp	.+136    	; 0x2374 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	9a 81       	ldd	r25, Y+2	; 0x02
    22f0:	80 70       	andi	r24, 0x00	; 0
    22f2:	97 70       	andi	r25, 0x07	; 7
    22f4:	88 0f       	add	r24, r24
    22f6:	89 2f       	mov	r24, r25
    22f8:	88 1f       	adc	r24, r24
    22fa:	99 0b       	sbc	r25, r25
    22fc:	91 95       	neg	r25
    22fe:	80 6a       	ori	r24, 0xA0	; 160
    2300:	0e 94 56 1c 	call	0x38ac	; 0x38ac <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2304:	0e 94 93 1c 	call	0x3926	; 0x3926 <TWI_getStatus>
    2308:	88 31       	cpi	r24, 0x18	; 24
    230a:	11 f0       	breq	.+4      	; 0x2310 <EEPROM_readByte+0x4a>
        return ERROR;
    230c:	1d 82       	std	Y+5, r1	; 0x05
    230e:	32 c0       	rjmp	.+100    	; 0x2374 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	0e 94 56 1c 	call	0x38ac	; 0x38ac <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2316:	0e 94 93 1c 	call	0x3926	; 0x3926 <TWI_getStatus>
    231a:	88 32       	cpi	r24, 0x28	; 40
    231c:	11 f0       	breq	.+4      	; 0x2322 <EEPROM_readByte+0x5c>
        return ERROR;
    231e:	1d 82       	std	Y+5, r1	; 0x05
    2320:	29 c0       	rjmp	.+82     	; 0x2374 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2322:	0e 94 3b 1c 	call	0x3876	; 0x3876 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2326:	0e 94 93 1c 	call	0x3926	; 0x3926 <TWI_getStatus>
    232a:	80 31       	cpi	r24, 0x10	; 16
    232c:	11 f0       	breq	.+4      	; 0x2332 <EEPROM_readByte+0x6c>
        return ERROR;
    232e:	1d 82       	std	Y+5, r1	; 0x05
    2330:	21 c0       	rjmp	.+66     	; 0x2374 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	9a 81       	ldd	r25, Y+2	; 0x02
    2336:	80 70       	andi	r24, 0x00	; 0
    2338:	97 70       	andi	r25, 0x07	; 7
    233a:	88 0f       	add	r24, r24
    233c:	89 2f       	mov	r24, r25
    233e:	88 1f       	adc	r24, r24
    2340:	99 0b       	sbc	r25, r25
    2342:	91 95       	neg	r25
    2344:	81 6a       	ori	r24, 0xA1	; 161
    2346:	0e 94 56 1c 	call	0x38ac	; 0x38ac <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    234a:	0e 94 93 1c 	call	0x3926	; 0x3926 <TWI_getStatus>
    234e:	80 34       	cpi	r24, 0x40	; 64
    2350:	11 f0       	breq	.+4      	; 0x2356 <EEPROM_readByte+0x90>
        return ERROR;
    2352:	1d 82       	std	Y+5, r1	; 0x05
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2356:	0e 94 80 1c 	call	0x3900	; 0x3900 <TWI_readByteWithNACK>
    235a:	eb 81       	ldd	r30, Y+3	; 0x03
    235c:	fc 81       	ldd	r31, Y+4	; 0x04
    235e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2360:	0e 94 93 1c 	call	0x3926	; 0x3926 <TWI_getStatus>
    2364:	88 35       	cpi	r24, 0x58	; 88
    2366:	11 f0       	breq	.+4      	; 0x236c <EEPROM_readByte+0xa6>
        return ERROR;
    2368:	1d 82       	std	Y+5, r1	; 0x05
    236a:	04 c0       	rjmp	.+8      	; 0x2374 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    236c:	0e 94 4b 1c 	call	0x3896	; 0x3896 <TWI_stop>

    return SUCCESS;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <Global_interruptEnable>:
 */
#include <avr/io.h>
#include "common_macros.h"
#include "g_interrupt.h"
void Global_interruptEnable(void)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    238e:	af e5       	ldi	r26, 0x5F	; 95
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	ef e5       	ldi	r30, 0x5F	; 95
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	80 68       	ori	r24, 0x80	; 128
    239a:	8c 93       	st	X, r24
}
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <Global_interruptDisable>:
void Global_interruptDisable(void)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,7);
    23aa:	af e5       	ldi	r26, 0x5F	; 95
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	ef e5       	ldi	r30, 0x5F	; 95
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	8f 77       	andi	r24, 0x7F	; 127
    23b6:	8c 93       	st	X, r24
}
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <GPIO_setupPinDirection+0x6>
    23c4:	00 d0       	rcall	.+0      	; 0x23c6 <GPIO_setupPinDirection+0x8>
    23c6:	0f 92       	push	r0
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	6a 83       	std	Y+2, r22	; 0x02
    23d0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	88 30       	cpi	r24, 0x08	; 8
    23d6:	08 f0       	brcs	.+2      	; 0x23da <GPIO_setupPinDirection+0x1c>
    23d8:	d5 c0       	rjmp	.+426    	; 0x2584 <GPIO_setupPinDirection+0x1c6>
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	84 30       	cpi	r24, 0x04	; 4
    23de:	08 f0       	brcs	.+2      	; 0x23e2 <GPIO_setupPinDirection+0x24>
    23e0:	d1 c0       	rjmp	.+418    	; 0x2584 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	3d 83       	std	Y+5, r19	; 0x05
    23ea:	2c 83       	std	Y+4, r18	; 0x04
    23ec:	8c 81       	ldd	r24, Y+4	; 0x04
    23ee:	9d 81       	ldd	r25, Y+5	; 0x05
    23f0:	81 30       	cpi	r24, 0x01	; 1
    23f2:	91 05       	cpc	r25, r1
    23f4:	09 f4       	brne	.+2      	; 0x23f8 <GPIO_setupPinDirection+0x3a>
    23f6:	43 c0       	rjmp	.+134    	; 0x247e <GPIO_setupPinDirection+0xc0>
    23f8:	2c 81       	ldd	r18, Y+4	; 0x04
    23fa:	3d 81       	ldd	r19, Y+5	; 0x05
    23fc:	22 30       	cpi	r18, 0x02	; 2
    23fe:	31 05       	cpc	r19, r1
    2400:	2c f4       	brge	.+10     	; 0x240c <GPIO_setupPinDirection+0x4e>
    2402:	8c 81       	ldd	r24, Y+4	; 0x04
    2404:	9d 81       	ldd	r25, Y+5	; 0x05
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	71 f0       	breq	.+28     	; 0x2426 <GPIO_setupPinDirection+0x68>
    240a:	bc c0       	rjmp	.+376    	; 0x2584 <GPIO_setupPinDirection+0x1c6>
    240c:	2c 81       	ldd	r18, Y+4	; 0x04
    240e:	3d 81       	ldd	r19, Y+5	; 0x05
    2410:	22 30       	cpi	r18, 0x02	; 2
    2412:	31 05       	cpc	r19, r1
    2414:	09 f4       	brne	.+2      	; 0x2418 <GPIO_setupPinDirection+0x5a>
    2416:	5f c0       	rjmp	.+190    	; 0x24d6 <GPIO_setupPinDirection+0x118>
    2418:	8c 81       	ldd	r24, Y+4	; 0x04
    241a:	9d 81       	ldd	r25, Y+5	; 0x05
    241c:	83 30       	cpi	r24, 0x03	; 3
    241e:	91 05       	cpc	r25, r1
    2420:	09 f4       	brne	.+2      	; 0x2424 <GPIO_setupPinDirection+0x66>
    2422:	85 c0       	rjmp	.+266    	; 0x252e <GPIO_setupPinDirection+0x170>
    2424:	af c0       	rjmp	.+350    	; 0x2584 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	81 30       	cpi	r24, 0x01	; 1
    242a:	a1 f4       	brne	.+40     	; 0x2454 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    242c:	aa e3       	ldi	r26, 0x3A	; 58
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	ea e3       	ldi	r30, 0x3A	; 58
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	48 2f       	mov	r20, r24
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	02 2e       	mov	r0, r18
    2444:	02 c0       	rjmp	.+4      	; 0x244a <GPIO_setupPinDirection+0x8c>
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	0a 94       	dec	r0
    244c:	e2 f7       	brpl	.-8      	; 0x2446 <GPIO_setupPinDirection+0x88>
    244e:	84 2b       	or	r24, r20
    2450:	8c 93       	st	X, r24
    2452:	98 c0       	rjmp	.+304    	; 0x2584 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2454:	aa e3       	ldi	r26, 0x3A	; 58
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	ea e3       	ldi	r30, 0x3A	; 58
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	48 2f       	mov	r20, r24
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	02 2e       	mov	r0, r18
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <GPIO_setupPinDirection+0xb4>
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	0a 94       	dec	r0
    2474:	e2 f7       	brpl	.-8      	; 0x246e <GPIO_setupPinDirection+0xb0>
    2476:	80 95       	com	r24
    2478:	84 23       	and	r24, r20
    247a:	8c 93       	st	X, r24
    247c:	83 c0       	rjmp	.+262    	; 0x2584 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	81 30       	cpi	r24, 0x01	; 1
    2482:	a1 f4       	brne	.+40     	; 0x24ac <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2484:	a7 e3       	ldi	r26, 0x37	; 55
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e7 e3       	ldi	r30, 0x37	; 55
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	48 2f       	mov	r20, r24
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	02 2e       	mov	r0, r18
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <GPIO_setupPinDirection+0xe4>
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	0a 94       	dec	r0
    24a4:	e2 f7       	brpl	.-8      	; 0x249e <GPIO_setupPinDirection+0xe0>
    24a6:	84 2b       	or	r24, r20
    24a8:	8c 93       	st	X, r24
    24aa:	6c c0       	rjmp	.+216    	; 0x2584 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    24ac:	a7 e3       	ldi	r26, 0x37	; 55
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e7 e3       	ldi	r30, 0x37	; 55
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	48 2f       	mov	r20, r24
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	02 2e       	mov	r0, r18
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <GPIO_setupPinDirection+0x10c>
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	0a 94       	dec	r0
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <GPIO_setupPinDirection+0x108>
    24ce:	80 95       	com	r24
    24d0:	84 23       	and	r24, r20
    24d2:	8c 93       	st	X, r24
    24d4:	57 c0       	rjmp	.+174    	; 0x2584 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    24d6:	8b 81       	ldd	r24, Y+3	; 0x03
    24d8:	81 30       	cpi	r24, 0x01	; 1
    24da:	a1 f4       	brne	.+40     	; 0x2504 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    24dc:	a4 e3       	ldi	r26, 0x34	; 52
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	e4 e3       	ldi	r30, 0x34	; 52
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	48 2f       	mov	r20, r24
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	02 2e       	mov	r0, r18
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <GPIO_setupPinDirection+0x13c>
    24f6:	88 0f       	add	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	0a 94       	dec	r0
    24fc:	e2 f7       	brpl	.-8      	; 0x24f6 <GPIO_setupPinDirection+0x138>
    24fe:	84 2b       	or	r24, r20
    2500:	8c 93       	st	X, r24
    2502:	40 c0       	rjmp	.+128    	; 0x2584 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2504:	a4 e3       	ldi	r26, 0x34	; 52
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	e4 e3       	ldi	r30, 0x34	; 52
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	48 2f       	mov	r20, r24
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	02 2e       	mov	r0, r18
    251c:	02 c0       	rjmp	.+4      	; 0x2522 <GPIO_setupPinDirection+0x164>
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	0a 94       	dec	r0
    2524:	e2 f7       	brpl	.-8      	; 0x251e <GPIO_setupPinDirection+0x160>
    2526:	80 95       	com	r24
    2528:	84 23       	and	r24, r20
    252a:	8c 93       	st	X, r24
    252c:	2b c0       	rjmp	.+86     	; 0x2584 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	81 30       	cpi	r24, 0x01	; 1
    2532:	a1 f4       	brne	.+40     	; 0x255c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2534:	a1 e3       	ldi	r26, 0x31	; 49
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e1 e3       	ldi	r30, 0x31	; 49
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	48 2f       	mov	r20, r24
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	02 2e       	mov	r0, r18
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <GPIO_setupPinDirection+0x194>
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	0a 94       	dec	r0
    2554:	e2 f7       	brpl	.-8      	; 0x254e <GPIO_setupPinDirection+0x190>
    2556:	84 2b       	or	r24, r20
    2558:	8c 93       	st	X, r24
    255a:	14 c0       	rjmp	.+40     	; 0x2584 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    255c:	a1 e3       	ldi	r26, 0x31	; 49
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e1 e3       	ldi	r30, 0x31	; 49
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	48 2f       	mov	r20, r24
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	02 2e       	mov	r0, r18
    2574:	02 c0       	rjmp	.+4      	; 0x257a <GPIO_setupPinDirection+0x1bc>
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	0a 94       	dec	r0
    257c:	e2 f7       	brpl	.-8      	; 0x2576 <GPIO_setupPinDirection+0x1b8>
    257e:	80 95       	com	r24
    2580:	84 23       	and	r24, r20
    2582:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	00 d0       	rcall	.+0      	; 0x259a <GPIO_writePin+0x6>
    259a:	00 d0       	rcall	.+0      	; 0x259c <GPIO_writePin+0x8>
    259c:	0f 92       	push	r0
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	6a 83       	std	Y+2, r22	; 0x02
    25a6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	88 30       	cpi	r24, 0x08	; 8
    25ac:	08 f0       	brcs	.+2      	; 0x25b0 <GPIO_writePin+0x1c>
    25ae:	d5 c0       	rjmp	.+426    	; 0x275a <GPIO_writePin+0x1c6>
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	84 30       	cpi	r24, 0x04	; 4
    25b4:	08 f0       	brcs	.+2      	; 0x25b8 <GPIO_writePin+0x24>
    25b6:	d1 c0       	rjmp	.+418    	; 0x275a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	3d 83       	std	Y+5, r19	; 0x05
    25c0:	2c 83       	std	Y+4, r18	; 0x04
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
    25c4:	9d 81       	ldd	r25, Y+5	; 0x05
    25c6:	81 30       	cpi	r24, 0x01	; 1
    25c8:	91 05       	cpc	r25, r1
    25ca:	09 f4       	brne	.+2      	; 0x25ce <GPIO_writePin+0x3a>
    25cc:	43 c0       	rjmp	.+134    	; 0x2654 <GPIO_writePin+0xc0>
    25ce:	2c 81       	ldd	r18, Y+4	; 0x04
    25d0:	3d 81       	ldd	r19, Y+5	; 0x05
    25d2:	22 30       	cpi	r18, 0x02	; 2
    25d4:	31 05       	cpc	r19, r1
    25d6:	2c f4       	brge	.+10     	; 0x25e2 <GPIO_writePin+0x4e>
    25d8:	8c 81       	ldd	r24, Y+4	; 0x04
    25da:	9d 81       	ldd	r25, Y+5	; 0x05
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	71 f0       	breq	.+28     	; 0x25fc <GPIO_writePin+0x68>
    25e0:	bc c0       	rjmp	.+376    	; 0x275a <GPIO_writePin+0x1c6>
    25e2:	2c 81       	ldd	r18, Y+4	; 0x04
    25e4:	3d 81       	ldd	r19, Y+5	; 0x05
    25e6:	22 30       	cpi	r18, 0x02	; 2
    25e8:	31 05       	cpc	r19, r1
    25ea:	09 f4       	brne	.+2      	; 0x25ee <GPIO_writePin+0x5a>
    25ec:	5f c0       	rjmp	.+190    	; 0x26ac <GPIO_writePin+0x118>
    25ee:	8c 81       	ldd	r24, Y+4	; 0x04
    25f0:	9d 81       	ldd	r25, Y+5	; 0x05
    25f2:	83 30       	cpi	r24, 0x03	; 3
    25f4:	91 05       	cpc	r25, r1
    25f6:	09 f4       	brne	.+2      	; 0x25fa <GPIO_writePin+0x66>
    25f8:	85 c0       	rjmp	.+266    	; 0x2704 <GPIO_writePin+0x170>
    25fa:	af c0       	rjmp	.+350    	; 0x275a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    25fc:	8b 81       	ldd	r24, Y+3	; 0x03
    25fe:	81 30       	cpi	r24, 0x01	; 1
    2600:	a1 f4       	brne	.+40     	; 0x262a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2602:	ab e3       	ldi	r26, 0x3B	; 59
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	eb e3       	ldi	r30, 0x3B	; 59
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	48 2f       	mov	r20, r24
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	02 2e       	mov	r0, r18
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <GPIO_writePin+0x8c>
    261c:	88 0f       	add	r24, r24
    261e:	99 1f       	adc	r25, r25
    2620:	0a 94       	dec	r0
    2622:	e2 f7       	brpl	.-8      	; 0x261c <GPIO_writePin+0x88>
    2624:	84 2b       	or	r24, r20
    2626:	8c 93       	st	X, r24
    2628:	98 c0       	rjmp	.+304    	; 0x275a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    262a:	ab e3       	ldi	r26, 0x3B	; 59
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	eb e3       	ldi	r30, 0x3B	; 59
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	48 2f       	mov	r20, r24
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	28 2f       	mov	r18, r24
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	02 2e       	mov	r0, r18
    2642:	02 c0       	rjmp	.+4      	; 0x2648 <GPIO_writePin+0xb4>
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	0a 94       	dec	r0
    264a:	e2 f7       	brpl	.-8      	; 0x2644 <GPIO_writePin+0xb0>
    264c:	80 95       	com	r24
    264e:	84 23       	and	r24, r20
    2650:	8c 93       	st	X, r24
    2652:	83 c0       	rjmp	.+262    	; 0x275a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	81 30       	cpi	r24, 0x01	; 1
    2658:	a1 f4       	brne	.+40     	; 0x2682 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    265a:	a8 e3       	ldi	r26, 0x38	; 56
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e8 e3       	ldi	r30, 0x38	; 56
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	48 2f       	mov	r20, r24
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	28 2f       	mov	r18, r24
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	02 2e       	mov	r0, r18
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <GPIO_writePin+0xe4>
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	0a 94       	dec	r0
    267a:	e2 f7       	brpl	.-8      	; 0x2674 <GPIO_writePin+0xe0>
    267c:	84 2b       	or	r24, r20
    267e:	8c 93       	st	X, r24
    2680:	6c c0       	rjmp	.+216    	; 0x275a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2682:	a8 e3       	ldi	r26, 0x38	; 56
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	e8 e3       	ldi	r30, 0x38	; 56
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	48 2f       	mov	r20, r24
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	02 2e       	mov	r0, r18
    269a:	02 c0       	rjmp	.+4      	; 0x26a0 <GPIO_writePin+0x10c>
    269c:	88 0f       	add	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	0a 94       	dec	r0
    26a2:	e2 f7       	brpl	.-8      	; 0x269c <GPIO_writePin+0x108>
    26a4:	80 95       	com	r24
    26a6:	84 23       	and	r24, r20
    26a8:	8c 93       	st	X, r24
    26aa:	57 c0       	rjmp	.+174    	; 0x275a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	81 30       	cpi	r24, 0x01	; 1
    26b0:	a1 f4       	brne	.+40     	; 0x26da <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    26b2:	a5 e3       	ldi	r26, 0x35	; 53
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	e5 e3       	ldi	r30, 0x35	; 53
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	48 2f       	mov	r20, r24
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	28 2f       	mov	r18, r24
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	02 2e       	mov	r0, r18
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <GPIO_writePin+0x13c>
    26cc:	88 0f       	add	r24, r24
    26ce:	99 1f       	adc	r25, r25
    26d0:	0a 94       	dec	r0
    26d2:	e2 f7       	brpl	.-8      	; 0x26cc <GPIO_writePin+0x138>
    26d4:	84 2b       	or	r24, r20
    26d6:	8c 93       	st	X, r24
    26d8:	40 c0       	rjmp	.+128    	; 0x275a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    26da:	a5 e3       	ldi	r26, 0x35	; 53
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e5 e3       	ldi	r30, 0x35	; 53
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	48 2f       	mov	r20, r24
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	02 2e       	mov	r0, r18
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <GPIO_writePin+0x164>
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	0a 94       	dec	r0
    26fa:	e2 f7       	brpl	.-8      	; 0x26f4 <GPIO_writePin+0x160>
    26fc:	80 95       	com	r24
    26fe:	84 23       	and	r24, r20
    2700:	8c 93       	st	X, r24
    2702:	2b c0       	rjmp	.+86     	; 0x275a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	81 30       	cpi	r24, 0x01	; 1
    2708:	a1 f4       	brne	.+40     	; 0x2732 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    270a:	a2 e3       	ldi	r26, 0x32	; 50
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e2 e3       	ldi	r30, 0x32	; 50
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	48 2f       	mov	r20, r24
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	28 2f       	mov	r18, r24
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	02 2e       	mov	r0, r18
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <GPIO_writePin+0x194>
    2724:	88 0f       	add	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	0a 94       	dec	r0
    272a:	e2 f7       	brpl	.-8      	; 0x2724 <GPIO_writePin+0x190>
    272c:	84 2b       	or	r24, r20
    272e:	8c 93       	st	X, r24
    2730:	14 c0       	rjmp	.+40     	; 0x275a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2732:	a2 e3       	ldi	r26, 0x32	; 50
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e2 e3       	ldi	r30, 0x32	; 50
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	48 2f       	mov	r20, r24
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	02 2e       	mov	r0, r18
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <GPIO_writePin+0x1bc>
    274c:	88 0f       	add	r24, r24
    274e:	99 1f       	adc	r25, r25
    2750:	0a 94       	dec	r0
    2752:	e2 f7       	brpl	.-8      	; 0x274c <GPIO_writePin+0x1b8>
    2754:	80 95       	com	r24
    2756:	84 23       	and	r24, r20
    2758:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	00 d0       	rcall	.+0      	; 0x2770 <GPIO_readPin+0x6>
    2770:	00 d0       	rcall	.+0      	; 0x2772 <GPIO_readPin+0x8>
    2772:	0f 92       	push	r0
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	8a 83       	std	Y+2, r24	; 0x02
    277a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    277c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	88 30       	cpi	r24, 0x08	; 8
    2782:	08 f0       	brcs	.+2      	; 0x2786 <GPIO_readPin+0x1c>
    2784:	84 c0       	rjmp	.+264    	; 0x288e <GPIO_readPin+0x124>
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	84 30       	cpi	r24, 0x04	; 4
    278a:	08 f0       	brcs	.+2      	; 0x278e <GPIO_readPin+0x24>
    278c:	80 c0       	rjmp	.+256    	; 0x288e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	3d 83       	std	Y+5, r19	; 0x05
    2796:	2c 83       	std	Y+4, r18	; 0x04
    2798:	4c 81       	ldd	r20, Y+4	; 0x04
    279a:	5d 81       	ldd	r21, Y+5	; 0x05
    279c:	41 30       	cpi	r20, 0x01	; 1
    279e:	51 05       	cpc	r21, r1
    27a0:	79 f1       	breq	.+94     	; 0x2800 <GPIO_readPin+0x96>
    27a2:	8c 81       	ldd	r24, Y+4	; 0x04
    27a4:	9d 81       	ldd	r25, Y+5	; 0x05
    27a6:	82 30       	cpi	r24, 0x02	; 2
    27a8:	91 05       	cpc	r25, r1
    27aa:	34 f4       	brge	.+12     	; 0x27b8 <GPIO_readPin+0x4e>
    27ac:	2c 81       	ldd	r18, Y+4	; 0x04
    27ae:	3d 81       	ldd	r19, Y+5	; 0x05
    27b0:	21 15       	cp	r18, r1
    27b2:	31 05       	cpc	r19, r1
    27b4:	69 f0       	breq	.+26     	; 0x27d0 <GPIO_readPin+0x66>
    27b6:	6b c0       	rjmp	.+214    	; 0x288e <GPIO_readPin+0x124>
    27b8:	4c 81       	ldd	r20, Y+4	; 0x04
    27ba:	5d 81       	ldd	r21, Y+5	; 0x05
    27bc:	42 30       	cpi	r20, 0x02	; 2
    27be:	51 05       	cpc	r21, r1
    27c0:	b9 f1       	breq	.+110    	; 0x2830 <GPIO_readPin+0xc6>
    27c2:	8c 81       	ldd	r24, Y+4	; 0x04
    27c4:	9d 81       	ldd	r25, Y+5	; 0x05
    27c6:	83 30       	cpi	r24, 0x03	; 3
    27c8:	91 05       	cpc	r25, r1
    27ca:	09 f4       	brne	.+2      	; 0x27ce <GPIO_readPin+0x64>
    27cc:	49 c0       	rjmp	.+146    	; 0x2860 <GPIO_readPin+0xf6>
    27ce:	5f c0       	rjmp	.+190    	; 0x288e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    27d0:	e9 e3       	ldi	r30, 0x39	; 57
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	28 2f       	mov	r18, r24
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	88 2f       	mov	r24, r24
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	a9 01       	movw	r20, r18
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <GPIO_readPin+0x7e>
    27e4:	55 95       	asr	r21
    27e6:	47 95       	ror	r20
    27e8:	8a 95       	dec	r24
    27ea:	e2 f7       	brpl	.-8      	; 0x27e4 <GPIO_readPin+0x7a>
    27ec:	ca 01       	movw	r24, r20
    27ee:	81 70       	andi	r24, 0x01	; 1
    27f0:	90 70       	andi	r25, 0x00	; 0
    27f2:	88 23       	and	r24, r24
    27f4:	19 f0       	breq	.+6      	; 0x27fc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	49 c0       	rjmp	.+146    	; 0x288e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    27fc:	19 82       	std	Y+1, r1	; 0x01
    27fe:	47 c0       	rjmp	.+142    	; 0x288e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2800:	e6 e3       	ldi	r30, 0x36	; 54
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	28 2f       	mov	r18, r24
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	88 2f       	mov	r24, r24
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	a9 01       	movw	r20, r18
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <GPIO_readPin+0xae>
    2814:	55 95       	asr	r21
    2816:	47 95       	ror	r20
    2818:	8a 95       	dec	r24
    281a:	e2 f7       	brpl	.-8      	; 0x2814 <GPIO_readPin+0xaa>
    281c:	ca 01       	movw	r24, r20
    281e:	81 70       	andi	r24, 0x01	; 1
    2820:	90 70       	andi	r25, 0x00	; 0
    2822:	88 23       	and	r24, r24
    2824:	19 f0       	breq	.+6      	; 0x282c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	89 83       	std	Y+1, r24	; 0x01
    282a:	31 c0       	rjmp	.+98     	; 0x288e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    282c:	19 82       	std	Y+1, r1	; 0x01
    282e:	2f c0       	rjmp	.+94     	; 0x288e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2830:	e3 e3       	ldi	r30, 0x33	; 51
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	28 2f       	mov	r18, r24
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	8b 81       	ldd	r24, Y+3	; 0x03
    283c:	88 2f       	mov	r24, r24
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	a9 01       	movw	r20, r18
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <GPIO_readPin+0xde>
    2844:	55 95       	asr	r21
    2846:	47 95       	ror	r20
    2848:	8a 95       	dec	r24
    284a:	e2 f7       	brpl	.-8      	; 0x2844 <GPIO_readPin+0xda>
    284c:	ca 01       	movw	r24, r20
    284e:	81 70       	andi	r24, 0x01	; 1
    2850:	90 70       	andi	r25, 0x00	; 0
    2852:	88 23       	and	r24, r24
    2854:	19 f0       	breq	.+6      	; 0x285c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	89 83       	std	Y+1, r24	; 0x01
    285a:	19 c0       	rjmp	.+50     	; 0x288e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    285c:	19 82       	std	Y+1, r1	; 0x01
    285e:	17 c0       	rjmp	.+46     	; 0x288e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2860:	e0 e3       	ldi	r30, 0x30	; 48
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	28 2f       	mov	r18, r24
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	8b 81       	ldd	r24, Y+3	; 0x03
    286c:	88 2f       	mov	r24, r24
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	a9 01       	movw	r20, r18
    2872:	02 c0       	rjmp	.+4      	; 0x2878 <GPIO_readPin+0x10e>
    2874:	55 95       	asr	r21
    2876:	47 95       	ror	r20
    2878:	8a 95       	dec	r24
    287a:	e2 f7       	brpl	.-8      	; 0x2874 <GPIO_readPin+0x10a>
    287c:	ca 01       	movw	r24, r20
    287e:	81 70       	andi	r24, 0x01	; 1
    2880:	90 70       	andi	r25, 0x00	; 0
    2882:	88 23       	and	r24, r24
    2884:	19 f0       	breq	.+6      	; 0x288c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	01 c0       	rjmp	.+2      	; 0x288e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    288c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    288e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <GPIO_setupPortDirection+0x6>
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <GPIO_setupPortDirection+0x8>
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	89 83       	std	Y+1, r24	; 0x01
    28ae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	84 30       	cpi	r24, 0x04	; 4
    28b4:	90 f5       	brcc	.+100    	; 0x291a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	28 2f       	mov	r18, r24
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	3c 83       	std	Y+4, r19	; 0x04
    28be:	2b 83       	std	Y+3, r18	; 0x03
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	9c 81       	ldd	r25, Y+4	; 0x04
    28c4:	81 30       	cpi	r24, 0x01	; 1
    28c6:	91 05       	cpc	r25, r1
    28c8:	d1 f0       	breq	.+52     	; 0x28fe <GPIO_setupPortDirection+0x5e>
    28ca:	2b 81       	ldd	r18, Y+3	; 0x03
    28cc:	3c 81       	ldd	r19, Y+4	; 0x04
    28ce:	22 30       	cpi	r18, 0x02	; 2
    28d0:	31 05       	cpc	r19, r1
    28d2:	2c f4       	brge	.+10     	; 0x28de <GPIO_setupPortDirection+0x3e>
    28d4:	8b 81       	ldd	r24, Y+3	; 0x03
    28d6:	9c 81       	ldd	r25, Y+4	; 0x04
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	61 f0       	breq	.+24     	; 0x28f4 <GPIO_setupPortDirection+0x54>
    28dc:	1e c0       	rjmp	.+60     	; 0x291a <GPIO_setupPortDirection+0x7a>
    28de:	2b 81       	ldd	r18, Y+3	; 0x03
    28e0:	3c 81       	ldd	r19, Y+4	; 0x04
    28e2:	22 30       	cpi	r18, 0x02	; 2
    28e4:	31 05       	cpc	r19, r1
    28e6:	81 f0       	breq	.+32     	; 0x2908 <GPIO_setupPortDirection+0x68>
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	9c 81       	ldd	r25, Y+4	; 0x04
    28ec:	83 30       	cpi	r24, 0x03	; 3
    28ee:	91 05       	cpc	r25, r1
    28f0:	81 f0       	breq	.+32     	; 0x2912 <GPIO_setupPortDirection+0x72>
    28f2:	13 c0       	rjmp	.+38     	; 0x291a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    28f4:	ea e3       	ldi	r30, 0x3A	; 58
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	80 83       	st	Z, r24
    28fc:	0e c0       	rjmp	.+28     	; 0x291a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    28fe:	e7 e3       	ldi	r30, 0x37	; 55
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	80 83       	st	Z, r24
    2906:	09 c0       	rjmp	.+18     	; 0x291a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2908:	e4 e3       	ldi	r30, 0x34	; 52
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	80 83       	st	Z, r24
    2910:	04 c0       	rjmp	.+8      	; 0x291a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2912:	e1 e3       	ldi	r30, 0x31	; 49
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	80 83       	st	Z, r24
			break;
		}
	}
}
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	00 d0       	rcall	.+0      	; 0x292e <GPIO_writePort+0x6>
    292e:	00 d0       	rcall	.+0      	; 0x2930 <GPIO_writePort+0x8>
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	89 83       	std	Y+1, r24	; 0x01
    2936:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	84 30       	cpi	r24, 0x04	; 4
    293c:	90 f5       	brcc	.+100    	; 0x29a2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	28 2f       	mov	r18, r24
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	3c 83       	std	Y+4, r19	; 0x04
    2946:	2b 83       	std	Y+3, r18	; 0x03
    2948:	8b 81       	ldd	r24, Y+3	; 0x03
    294a:	9c 81       	ldd	r25, Y+4	; 0x04
    294c:	81 30       	cpi	r24, 0x01	; 1
    294e:	91 05       	cpc	r25, r1
    2950:	d1 f0       	breq	.+52     	; 0x2986 <GPIO_writePort+0x5e>
    2952:	2b 81       	ldd	r18, Y+3	; 0x03
    2954:	3c 81       	ldd	r19, Y+4	; 0x04
    2956:	22 30       	cpi	r18, 0x02	; 2
    2958:	31 05       	cpc	r19, r1
    295a:	2c f4       	brge	.+10     	; 0x2966 <GPIO_writePort+0x3e>
    295c:	8b 81       	ldd	r24, Y+3	; 0x03
    295e:	9c 81       	ldd	r25, Y+4	; 0x04
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	61 f0       	breq	.+24     	; 0x297c <GPIO_writePort+0x54>
    2964:	1e c0       	rjmp	.+60     	; 0x29a2 <GPIO_writePort+0x7a>
    2966:	2b 81       	ldd	r18, Y+3	; 0x03
    2968:	3c 81       	ldd	r19, Y+4	; 0x04
    296a:	22 30       	cpi	r18, 0x02	; 2
    296c:	31 05       	cpc	r19, r1
    296e:	81 f0       	breq	.+32     	; 0x2990 <GPIO_writePort+0x68>
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	9c 81       	ldd	r25, Y+4	; 0x04
    2974:	83 30       	cpi	r24, 0x03	; 3
    2976:	91 05       	cpc	r25, r1
    2978:	81 f0       	breq	.+32     	; 0x299a <GPIO_writePort+0x72>
    297a:	13 c0       	rjmp	.+38     	; 0x29a2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    297c:	eb e3       	ldi	r30, 0x3B	; 59
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	8a 81       	ldd	r24, Y+2	; 0x02
    2982:	80 83       	st	Z, r24
    2984:	0e c0       	rjmp	.+28     	; 0x29a2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2986:	e8 e3       	ldi	r30, 0x38	; 56
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	8a 81       	ldd	r24, Y+2	; 0x02
    298c:	80 83       	st	Z, r24
    298e:	09 c0       	rjmp	.+18     	; 0x29a2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2990:	e5 e3       	ldi	r30, 0x35	; 53
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	80 83       	st	Z, r24
    2998:	04 c0       	rjmp	.+8      	; 0x29a2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    299a:	e2 e3       	ldi	r30, 0x32	; 50
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	8a 81       	ldd	r24, Y+2	; 0x02
    29a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <GPIO_readPort+0x6>
    29b6:	00 d0       	rcall	.+0      	; 0x29b8 <GPIO_readPort+0x8>
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    29be:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	84 30       	cpi	r24, 0x04	; 4
    29c4:	90 f5       	brcc	.+100    	; 0x2a2a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    29c6:	8a 81       	ldd	r24, Y+2	; 0x02
    29c8:	28 2f       	mov	r18, r24
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	3c 83       	std	Y+4, r19	; 0x04
    29ce:	2b 83       	std	Y+3, r18	; 0x03
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	9c 81       	ldd	r25, Y+4	; 0x04
    29d4:	81 30       	cpi	r24, 0x01	; 1
    29d6:	91 05       	cpc	r25, r1
    29d8:	d1 f0       	breq	.+52     	; 0x2a0e <GPIO_readPort+0x5e>
    29da:	2b 81       	ldd	r18, Y+3	; 0x03
    29dc:	3c 81       	ldd	r19, Y+4	; 0x04
    29de:	22 30       	cpi	r18, 0x02	; 2
    29e0:	31 05       	cpc	r19, r1
    29e2:	2c f4       	brge	.+10     	; 0x29ee <GPIO_readPort+0x3e>
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	9c 81       	ldd	r25, Y+4	; 0x04
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	61 f0       	breq	.+24     	; 0x2a04 <GPIO_readPort+0x54>
    29ec:	1e c0       	rjmp	.+60     	; 0x2a2a <GPIO_readPort+0x7a>
    29ee:	2b 81       	ldd	r18, Y+3	; 0x03
    29f0:	3c 81       	ldd	r19, Y+4	; 0x04
    29f2:	22 30       	cpi	r18, 0x02	; 2
    29f4:	31 05       	cpc	r19, r1
    29f6:	81 f0       	breq	.+32     	; 0x2a18 <GPIO_readPort+0x68>
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	9c 81       	ldd	r25, Y+4	; 0x04
    29fc:	83 30       	cpi	r24, 0x03	; 3
    29fe:	91 05       	cpc	r25, r1
    2a00:	81 f0       	breq	.+32     	; 0x2a22 <GPIO_readPort+0x72>
    2a02:	13 c0       	rjmp	.+38     	; 0x2a2a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2a04:	e9 e3       	ldi	r30, 0x39	; 57
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	0e c0       	rjmp	.+28     	; 0x2a2a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2a0e:	e6 e3       	ldi	r30, 0x36	; 54
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	89 83       	std	Y+1, r24	; 0x01
    2a16:	09 c0       	rjmp	.+18     	; 0x2a2a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2a18:	e3 e3       	ldi	r30, 0x33	; 51
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    2a20:	04 c0       	rjmp	.+8      	; 0x2a2a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2a22:	e0 e3       	ldi	r30, 0x30	; 48
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	08 95       	ret

00002a3a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	2e 97       	sbiw	r28, 0x0e	; 14
    2a44:	0f b6       	in	r0, 0x3f	; 63
    2a46:	f8 94       	cli
    2a48:	de bf       	out	0x3e, r29	; 62
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	65 e0       	ldi	r22, 0x05	; 5
    2a52:	41 e0       	ldi	r20, 0x01	; 1
    2a54:	0e 94 df 11 	call	0x23be	; 0x23be <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	67 e0       	ldi	r22, 0x07	; 7
    2a5c:	41 e0       	ldi	r20, 0x01	; 1
    2a5e:	0e 94 df 11 	call	0x23be	; 0x23be <GPIO_setupPinDirection>
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	a0 ea       	ldi	r26, 0xA0	; 160
    2a68:	b1 e4       	ldi	r27, 0x41	; 65
    2a6a:	8b 87       	std	Y+11, r24	; 0x0b
    2a6c:	9c 87       	std	Y+12, r25	; 0x0c
    2a6e:	ad 87       	std	Y+13, r26	; 0x0d
    2a70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	4a ef       	ldi	r20, 0xFA	; 250
    2a80:	54 e4       	ldi	r21, 0x44	; 68
    2a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	8f 83       	std	Y+7, r24	; 0x07
    2a8c:	98 87       	std	Y+8, r25	; 0x08
    2a8e:	a9 87       	std	Y+9, r26	; 0x09
    2a90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a92:	6f 81       	ldd	r22, Y+7	; 0x07
    2a94:	78 85       	ldd	r23, Y+8	; 0x08
    2a96:	89 85       	ldd	r24, Y+9	; 0x09
    2a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e8       	ldi	r20, 0x80	; 128
    2aa0:	5f e3       	ldi	r21, 0x3F	; 63
    2aa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aa6:	88 23       	and	r24, r24
    2aa8:	2c f4       	brge	.+10     	; 0x2ab4 <LCD_init+0x7a>
		__ticks = 1;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	9e 83       	std	Y+6, r25	; 0x06
    2ab0:	8d 83       	std	Y+5, r24	; 0x05
    2ab2:	3f c0       	rjmp	.+126    	; 0x2b32 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2ab4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab6:	78 85       	ldd	r23, Y+8	; 0x08
    2ab8:	89 85       	ldd	r24, Y+9	; 0x09
    2aba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	3f ef       	ldi	r19, 0xFF	; 255
    2ac0:	4f e7       	ldi	r20, 0x7F	; 127
    2ac2:	57 e4       	ldi	r21, 0x47	; 71
    2ac4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac8:	18 16       	cp	r1, r24
    2aca:	4c f5       	brge	.+82     	; 0x2b1e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e2       	ldi	r20, 0x20	; 32
    2ada:	51 e4       	ldi	r21, 0x41	; 65
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	bc 01       	movw	r22, r24
    2ae6:	cd 01       	movw	r24, r26
    2ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	9e 83       	std	Y+6, r25	; 0x06
    2af2:	8d 83       	std	Y+5, r24	; 0x05
    2af4:	0f c0       	rjmp	.+30     	; 0x2b14 <LCD_init+0xda>
    2af6:	88 ec       	ldi	r24, 0xC8	; 200
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	9c 83       	std	Y+4, r25	; 0x04
    2afc:	8b 83       	std	Y+3, r24	; 0x03
    2afe:	8b 81       	ldd	r24, Y+3	; 0x03
    2b00:	9c 81       	ldd	r25, Y+4	; 0x04
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <LCD_init+0xc8>
    2b06:	9c 83       	std	Y+4, r25	; 0x04
    2b08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	9e 83       	std	Y+6, r25	; 0x06
    2b12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b14:	8d 81       	ldd	r24, Y+5	; 0x05
    2b16:	9e 81       	ldd	r25, Y+6	; 0x06
    2b18:	00 97       	sbiw	r24, 0x00	; 0
    2b1a:	69 f7       	brne	.-38     	; 0x2af6 <LCD_init+0xbc>
    2b1c:	14 c0       	rjmp	.+40     	; 0x2b46 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b20:	78 85       	ldd	r23, Y+8	; 0x08
    2b22:	89 85       	ldd	r24, Y+9	; 0x09
    2b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	9e 83       	std	Y+6, r25	; 0x06
    2b30:	8d 83       	std	Y+5, r24	; 0x05
    2b32:	8d 81       	ldd	r24, Y+5	; 0x05
    2b34:	9e 81       	ldd	r25, Y+6	; 0x06
    2b36:	9a 83       	std	Y+2, r25	; 0x02
    2b38:	89 83       	std	Y+1, r24	; 0x01
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <LCD_init+0x104>
    2b42:	9a 83       	std	Y+2, r25	; 0x02
    2b44:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	6f ef       	ldi	r22, 0xFF	; 255
    2b4a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2b4e:	88 e3       	ldi	r24, 0x38	; 56
    2b50:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2b54:	8c e0       	ldi	r24, 0x0C	; 12
    2b56:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_sendCommand>
}
    2b60:	2e 96       	adiw	r28, 0x0e	; 14
    2b62:	0f b6       	in	r0, 0x3f	; 63
    2b64:	f8 94       	cli
    2b66:	de bf       	out	0x3e, r29	; 62
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	cd bf       	out	0x3d, r28	; 61
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	08 95       	ret

00002b72 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2b72:	df 93       	push	r29
    2b74:	cf 93       	push	r28
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	e9 97       	sbiw	r28, 0x39	; 57
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	65 e0       	ldi	r22, 0x05	; 5
    2b8c:	40 e0       	ldi	r20, 0x00	; 0
    2b8e:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	a0 e8       	ldi	r26, 0x80	; 128
    2b98:	bf e3       	ldi	r27, 0x3F	; 63
    2b9a:	8d ab       	std	Y+53, r24	; 0x35
    2b9c:	9e ab       	std	Y+54, r25	; 0x36
    2b9e:	af ab       	std	Y+55, r26	; 0x37
    2ba0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ba4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ba6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ba8:	98 ad       	ldd	r25, Y+56	; 0x38
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	4a ef       	ldi	r20, 0xFA	; 250
    2bb0:	54 e4       	ldi	r21, 0x44	; 68
    2bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	89 ab       	std	Y+49, r24	; 0x31
    2bbc:	9a ab       	std	Y+50, r25	; 0x32
    2bbe:	ab ab       	std	Y+51, r26	; 0x33
    2bc0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bc2:	69 a9       	ldd	r22, Y+49	; 0x31
    2bc4:	7a a9       	ldd	r23, Y+50	; 0x32
    2bc6:	8b a9       	ldd	r24, Y+51	; 0x33
    2bc8:	9c a9       	ldd	r25, Y+52	; 0x34
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e8       	ldi	r20, 0x80	; 128
    2bd0:	5f e3       	ldi	r21, 0x3F	; 63
    2bd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bd6:	88 23       	and	r24, r24
    2bd8:	2c f4       	brge	.+10     	; 0x2be4 <LCD_sendCommand+0x72>
		__ticks = 1;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	98 ab       	std	Y+48, r25	; 0x30
    2be0:	8f a7       	std	Y+47, r24	; 0x2f
    2be2:	3f c0       	rjmp	.+126    	; 0x2c62 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2be4:	69 a9       	ldd	r22, Y+49	; 0x31
    2be6:	7a a9       	ldd	r23, Y+50	; 0x32
    2be8:	8b a9       	ldd	r24, Y+51	; 0x33
    2bea:	9c a9       	ldd	r25, Y+52	; 0x34
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	3f ef       	ldi	r19, 0xFF	; 255
    2bf0:	4f e7       	ldi	r20, 0x7F	; 127
    2bf2:	57 e4       	ldi	r21, 0x47	; 71
    2bf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bf8:	18 16       	cp	r1, r24
    2bfa:	4c f5       	brge	.+82     	; 0x2c4e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfc:	6d a9       	ldd	r22, Y+53	; 0x35
    2bfe:	7e a9       	ldd	r23, Y+54	; 0x36
    2c00:	8f a9       	ldd	r24, Y+55	; 0x37
    2c02:	98 ad       	ldd	r25, Y+56	; 0x38
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e2       	ldi	r20, 0x20	; 32
    2c0a:	51 e4       	ldi	r21, 0x41	; 65
    2c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	bc 01       	movw	r22, r24
    2c16:	cd 01       	movw	r24, r26
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	98 ab       	std	Y+48, r25	; 0x30
    2c22:	8f a7       	std	Y+47, r24	; 0x2f
    2c24:	0f c0       	rjmp	.+30     	; 0x2c44 <LCD_sendCommand+0xd2>
    2c26:	88 ec       	ldi	r24, 0xC8	; 200
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	9e a7       	std	Y+46, r25	; 0x2e
    2c2c:	8d a7       	std	Y+45, r24	; 0x2d
    2c2e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c30:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <LCD_sendCommand+0xc0>
    2c36:	9e a7       	std	Y+46, r25	; 0x2e
    2c38:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	98 ab       	std	Y+48, r25	; 0x30
    2c42:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c44:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c46:	98 a9       	ldd	r25, Y+48	; 0x30
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	69 f7       	brne	.-38     	; 0x2c26 <LCD_sendCommand+0xb4>
    2c4c:	14 c0       	rjmp	.+40     	; 0x2c76 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4e:	69 a9       	ldd	r22, Y+49	; 0x31
    2c50:	7a a9       	ldd	r23, Y+50	; 0x32
    2c52:	8b a9       	ldd	r24, Y+51	; 0x33
    2c54:	9c a9       	ldd	r25, Y+52	; 0x34
    2c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	98 ab       	std	Y+48, r25	; 0x30
    2c60:	8f a7       	std	Y+47, r24	; 0x2f
    2c62:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c64:	98 a9       	ldd	r25, Y+48	; 0x30
    2c66:	9c a7       	std	Y+44, r25	; 0x2c
    2c68:	8b a7       	std	Y+43, r24	; 0x2b
    2c6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <LCD_sendCommand+0xfc>
    2c72:	9c a7       	std	Y+44, r25	; 0x2c
    2c74:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	67 e0       	ldi	r22, 0x07	; 7
    2c7a:	41 e0       	ldi	r20, 0x01	; 1
    2c7c:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	a0 e8       	ldi	r26, 0x80	; 128
    2c86:	bf e3       	ldi	r27, 0x3F	; 63
    2c88:	8f a3       	std	Y+39, r24	; 0x27
    2c8a:	98 a7       	std	Y+40, r25	; 0x28
    2c8c:	a9 a7       	std	Y+41, r26	; 0x29
    2c8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c90:	6f a1       	ldd	r22, Y+39	; 0x27
    2c92:	78 a5       	ldd	r23, Y+40	; 0x28
    2c94:	89 a5       	ldd	r24, Y+41	; 0x29
    2c96:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	4a ef       	ldi	r20, 0xFA	; 250
    2c9e:	54 e4       	ldi	r21, 0x44	; 68
    2ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	8b a3       	std	Y+35, r24	; 0x23
    2caa:	9c a3       	std	Y+36, r25	; 0x24
    2cac:	ad a3       	std	Y+37, r26	; 0x25
    2cae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cb0:	6b a1       	ldd	r22, Y+35	; 0x23
    2cb2:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb4:	8d a1       	ldd	r24, Y+37	; 0x25
    2cb6:	9e a1       	ldd	r25, Y+38	; 0x26
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	40 e8       	ldi	r20, 0x80	; 128
    2cbe:	5f e3       	ldi	r21, 0x3F	; 63
    2cc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cc4:	88 23       	and	r24, r24
    2cc6:	2c f4       	brge	.+10     	; 0x2cd2 <LCD_sendCommand+0x160>
		__ticks = 1;
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	9a a3       	std	Y+34, r25	; 0x22
    2cce:	89 a3       	std	Y+33, r24	; 0x21
    2cd0:	3f c0       	rjmp	.+126    	; 0x2d50 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2cd2:	6b a1       	ldd	r22, Y+35	; 0x23
    2cd4:	7c a1       	ldd	r23, Y+36	; 0x24
    2cd6:	8d a1       	ldd	r24, Y+37	; 0x25
    2cd8:	9e a1       	ldd	r25, Y+38	; 0x26
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	3f ef       	ldi	r19, 0xFF	; 255
    2cde:	4f e7       	ldi	r20, 0x7F	; 127
    2ce0:	57 e4       	ldi	r21, 0x47	; 71
    2ce2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ce6:	18 16       	cp	r1, r24
    2ce8:	4c f5       	brge	.+82     	; 0x2d3c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cea:	6f a1       	ldd	r22, Y+39	; 0x27
    2cec:	78 a5       	ldd	r23, Y+40	; 0x28
    2cee:	89 a5       	ldd	r24, Y+41	; 0x29
    2cf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e2       	ldi	r20, 0x20	; 32
    2cf8:	51 e4       	ldi	r21, 0x41	; 65
    2cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	bc 01       	movw	r22, r24
    2d04:	cd 01       	movw	r24, r26
    2d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	9a a3       	std	Y+34, r25	; 0x22
    2d10:	89 a3       	std	Y+33, r24	; 0x21
    2d12:	0f c0       	rjmp	.+30     	; 0x2d32 <LCD_sendCommand+0x1c0>
    2d14:	88 ec       	ldi	r24, 0xC8	; 200
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	98 a3       	std	Y+32, r25	; 0x20
    2d1a:	8f 8f       	std	Y+31, r24	; 0x1f
    2d1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d1e:	98 a1       	ldd	r25, Y+32	; 0x20
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	f1 f7       	brne	.-4      	; 0x2d20 <LCD_sendCommand+0x1ae>
    2d24:	98 a3       	std	Y+32, r25	; 0x20
    2d26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d28:	89 a1       	ldd	r24, Y+33	; 0x21
    2d2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	9a a3       	std	Y+34, r25	; 0x22
    2d30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d32:	89 a1       	ldd	r24, Y+33	; 0x21
    2d34:	9a a1       	ldd	r25, Y+34	; 0x22
    2d36:	00 97       	sbiw	r24, 0x00	; 0
    2d38:	69 f7       	brne	.-38     	; 0x2d14 <LCD_sendCommand+0x1a2>
    2d3a:	14 c0       	rjmp	.+40     	; 0x2d64 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d3e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d40:	8d a1       	ldd	r24, Y+37	; 0x25
    2d42:	9e a1       	ldd	r25, Y+38	; 0x26
    2d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	9a a3       	std	Y+34, r25	; 0x22
    2d4e:	89 a3       	std	Y+33, r24	; 0x21
    2d50:	89 a1       	ldd	r24, Y+33	; 0x21
    2d52:	9a a1       	ldd	r25, Y+34	; 0x22
    2d54:	9e 8f       	std	Y+30, r25	; 0x1e
    2d56:	8d 8f       	std	Y+29, r24	; 0x1d
    2d58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	f1 f7       	brne	.-4      	; 0x2d5c <LCD_sendCommand+0x1ea>
    2d60:	9e 8f       	std	Y+30, r25	; 0x1e
    2d62:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	69 ad       	ldd	r22, Y+57	; 0x39
    2d68:	0e 94 94 14 	call	0x2928	; 0x2928 <GPIO_writePort>
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	a0 e8       	ldi	r26, 0x80	; 128
    2d72:	bf e3       	ldi	r27, 0x3F	; 63
    2d74:	89 8f       	std	Y+25, r24	; 0x19
    2d76:	9a 8f       	std	Y+26, r25	; 0x1a
    2d78:	ab 8f       	std	Y+27, r26	; 0x1b
    2d7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	4a ef       	ldi	r20, 0xFA	; 250
    2d8a:	54 e4       	ldi	r21, 0x44	; 68
    2d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	8d 8b       	std	Y+21, r24	; 0x15
    2d96:	9e 8b       	std	Y+22, r25	; 0x16
    2d98:	af 8b       	std	Y+23, r26	; 0x17
    2d9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2da0:	8f 89       	ldd	r24, Y+23	; 0x17
    2da2:	98 8d       	ldd	r25, Y+24	; 0x18
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e8       	ldi	r20, 0x80	; 128
    2daa:	5f e3       	ldi	r21, 0x3F	; 63
    2dac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2db0:	88 23       	and	r24, r24
    2db2:	2c f4       	brge	.+10     	; 0x2dbe <LCD_sendCommand+0x24c>
		__ticks = 1;
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	9c 8b       	std	Y+20, r25	; 0x14
    2dba:	8b 8b       	std	Y+19, r24	; 0x13
    2dbc:	3f c0       	rjmp	.+126    	; 0x2e3c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2dbe:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc0:	7e 89       	ldd	r23, Y+22	; 0x16
    2dc2:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc4:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	3f ef       	ldi	r19, 0xFF	; 255
    2dca:	4f e7       	ldi	r20, 0x7F	; 127
    2dcc:	57 e4       	ldi	r21, 0x47	; 71
    2dce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dd2:	18 16       	cp	r1, r24
    2dd4:	4c f5       	brge	.+82     	; 0x2e28 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd6:	69 8d       	ldd	r22, Y+25	; 0x19
    2dd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ddc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	40 e2       	ldi	r20, 0x20	; 32
    2de4:	51 e4       	ldi	r21, 0x41	; 65
    2de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	bc 01       	movw	r22, r24
    2df0:	cd 01       	movw	r24, r26
    2df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	9c 8b       	std	Y+20, r25	; 0x14
    2dfc:	8b 8b       	std	Y+19, r24	; 0x13
    2dfe:	0f c0       	rjmp	.+30     	; 0x2e1e <LCD_sendCommand+0x2ac>
    2e00:	88 ec       	ldi	r24, 0xC8	; 200
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	9a 8b       	std	Y+18, r25	; 0x12
    2e06:	89 8b       	std	Y+17, r24	; 0x11
    2e08:	89 89       	ldd	r24, Y+17	; 0x11
    2e0a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <LCD_sendCommand+0x29a>
    2e10:	9a 8b       	std	Y+18, r25	; 0x12
    2e12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e14:	8b 89       	ldd	r24, Y+19	; 0x13
    2e16:	9c 89       	ldd	r25, Y+20	; 0x14
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	9c 8b       	std	Y+20, r25	; 0x14
    2e1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e20:	9c 89       	ldd	r25, Y+20	; 0x14
    2e22:	00 97       	sbiw	r24, 0x00	; 0
    2e24:	69 f7       	brne	.-38     	; 0x2e00 <LCD_sendCommand+0x28e>
    2e26:	14 c0       	rjmp	.+40     	; 0x2e50 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e28:	6d 89       	ldd	r22, Y+21	; 0x15
    2e2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	9c 8b       	std	Y+20, r25	; 0x14
    2e3a:	8b 8b       	std	Y+19, r24	; 0x13
    2e3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e40:	98 8b       	std	Y+16, r25	; 0x10
    2e42:	8f 87       	std	Y+15, r24	; 0x0f
    2e44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e46:	98 89       	ldd	r25, Y+16	; 0x10
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	f1 f7       	brne	.-4      	; 0x2e48 <LCD_sendCommand+0x2d6>
    2e4c:	98 8b       	std	Y+16, r25	; 0x10
    2e4e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	67 e0       	ldi	r22, 0x07	; 7
    2e54:	40 e0       	ldi	r20, 0x00	; 0
    2e56:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	a0 e8       	ldi	r26, 0x80	; 128
    2e60:	bf e3       	ldi	r27, 0x3F	; 63
    2e62:	8b 87       	std	Y+11, r24	; 0x0b
    2e64:	9c 87       	std	Y+12, r25	; 0x0c
    2e66:	ad 87       	std	Y+13, r26	; 0x0d
    2e68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	4a ef       	ldi	r20, 0xFA	; 250
    2e78:	54 e4       	ldi	r21, 0x44	; 68
    2e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	8f 83       	std	Y+7, r24	; 0x07
    2e84:	98 87       	std	Y+8, r25	; 0x08
    2e86:	a9 87       	std	Y+9, r26	; 0x09
    2e88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8c:	78 85       	ldd	r23, Y+8	; 0x08
    2e8e:	89 85       	ldd	r24, Y+9	; 0x09
    2e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e8       	ldi	r20, 0x80	; 128
    2e98:	5f e3       	ldi	r21, 0x3F	; 63
    2e9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e9e:	88 23       	and	r24, r24
    2ea0:	2c f4       	brge	.+10     	; 0x2eac <LCD_sendCommand+0x33a>
		__ticks = 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	9e 83       	std	Y+6, r25	; 0x06
    2ea8:	8d 83       	std	Y+5, r24	; 0x05
    2eaa:	3f c0       	rjmp	.+126    	; 0x2f2a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2eac:	6f 81       	ldd	r22, Y+7	; 0x07
    2eae:	78 85       	ldd	r23, Y+8	; 0x08
    2eb0:	89 85       	ldd	r24, Y+9	; 0x09
    2eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	3f ef       	ldi	r19, 0xFF	; 255
    2eb8:	4f e7       	ldi	r20, 0x7F	; 127
    2eba:	57 e4       	ldi	r21, 0x47	; 71
    2ebc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec0:	18 16       	cp	r1, r24
    2ec2:	4c f5       	brge	.+82     	; 0x2f16 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e2       	ldi	r20, 0x20	; 32
    2ed2:	51 e4       	ldi	r21, 0x41	; 65
    2ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	bc 01       	movw	r22, r24
    2ede:	cd 01       	movw	r24, r26
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9e 83       	std	Y+6, r25	; 0x06
    2eea:	8d 83       	std	Y+5, r24	; 0x05
    2eec:	0f c0       	rjmp	.+30     	; 0x2f0c <LCD_sendCommand+0x39a>
    2eee:	88 ec       	ldi	r24, 0xC8	; 200
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	9c 83       	std	Y+4, r25	; 0x04
    2ef4:	8b 83       	std	Y+3, r24	; 0x03
    2ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	f1 f7       	brne	.-4      	; 0x2efa <LCD_sendCommand+0x388>
    2efe:	9c 83       	std	Y+4, r25	; 0x04
    2f00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f02:	8d 81       	ldd	r24, Y+5	; 0x05
    2f04:	9e 81       	ldd	r25, Y+6	; 0x06
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	9e 83       	std	Y+6, r25	; 0x06
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	69 f7       	brne	.-38     	; 0x2eee <LCD_sendCommand+0x37c>
    2f14:	14 c0       	rjmp	.+40     	; 0x2f3e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f16:	6f 81       	ldd	r22, Y+7	; 0x07
    2f18:	78 85       	ldd	r23, Y+8	; 0x08
    2f1a:	89 85       	ldd	r24, Y+9	; 0x09
    2f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	9e 83       	std	Y+6, r25	; 0x06
    2f28:	8d 83       	std	Y+5, r24	; 0x05
    2f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2e:	9a 83       	std	Y+2, r25	; 0x02
    2f30:	89 83       	std	Y+1, r24	; 0x01
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
    2f34:	9a 81       	ldd	r25, Y+2	; 0x02
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	f1 f7       	brne	.-4      	; 0x2f36 <LCD_sendCommand+0x3c4>
    2f3a:	9a 83       	std	Y+2, r25	; 0x02
    2f3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2f3e:	e9 96       	adiw	r28, 0x39	; 57
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	08 95       	ret

00002f50 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2f50:	df 93       	push	r29
    2f52:	cf 93       	push	r28
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
    2f58:	e9 97       	sbiw	r28, 0x39	; 57
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	f8 94       	cli
    2f5e:	de bf       	out	0x3e, r29	; 62
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	cd bf       	out	0x3d, r28	; 61
    2f64:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	65 e0       	ldi	r22, 0x05	; 5
    2f6a:	41 e0       	ldi	r20, 0x01	; 1
    2f6c:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	a0 e8       	ldi	r26, 0x80	; 128
    2f76:	bf e3       	ldi	r27, 0x3F	; 63
    2f78:	8d ab       	std	Y+53, r24	; 0x35
    2f7a:	9e ab       	std	Y+54, r25	; 0x36
    2f7c:	af ab       	std	Y+55, r26	; 0x37
    2f7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f80:	6d a9       	ldd	r22, Y+53	; 0x35
    2f82:	7e a9       	ldd	r23, Y+54	; 0x36
    2f84:	8f a9       	ldd	r24, Y+55	; 0x37
    2f86:	98 ad       	ldd	r25, Y+56	; 0x38
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	4a ef       	ldi	r20, 0xFA	; 250
    2f8e:	54 e4       	ldi	r21, 0x44	; 68
    2f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	89 ab       	std	Y+49, r24	; 0x31
    2f9a:	9a ab       	std	Y+50, r25	; 0x32
    2f9c:	ab ab       	std	Y+51, r26	; 0x33
    2f9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fa0:	69 a9       	ldd	r22, Y+49	; 0x31
    2fa2:	7a a9       	ldd	r23, Y+50	; 0x32
    2fa4:	8b a9       	ldd	r24, Y+51	; 0x33
    2fa6:	9c a9       	ldd	r25, Y+52	; 0x34
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	40 e8       	ldi	r20, 0x80	; 128
    2fae:	5f e3       	ldi	r21, 0x3F	; 63
    2fb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fb4:	88 23       	and	r24, r24
    2fb6:	2c f4       	brge	.+10     	; 0x2fc2 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	98 ab       	std	Y+48, r25	; 0x30
    2fbe:	8f a7       	std	Y+47, r24	; 0x2f
    2fc0:	3f c0       	rjmp	.+126    	; 0x3040 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2fc2:	69 a9       	ldd	r22, Y+49	; 0x31
    2fc4:	7a a9       	ldd	r23, Y+50	; 0x32
    2fc6:	8b a9       	ldd	r24, Y+51	; 0x33
    2fc8:	9c a9       	ldd	r25, Y+52	; 0x34
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	3f ef       	ldi	r19, 0xFF	; 255
    2fce:	4f e7       	ldi	r20, 0x7F	; 127
    2fd0:	57 e4       	ldi	r21, 0x47	; 71
    2fd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fd6:	18 16       	cp	r1, r24
    2fd8:	4c f5       	brge	.+82     	; 0x302c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fda:	6d a9       	ldd	r22, Y+53	; 0x35
    2fdc:	7e a9       	ldd	r23, Y+54	; 0x36
    2fde:	8f a9       	ldd	r24, Y+55	; 0x37
    2fe0:	98 ad       	ldd	r25, Y+56	; 0x38
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e2       	ldi	r20, 0x20	; 32
    2fe8:	51 e4       	ldi	r21, 0x41	; 65
    2fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	bc 01       	movw	r22, r24
    2ff4:	cd 01       	movw	r24, r26
    2ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	98 ab       	std	Y+48, r25	; 0x30
    3000:	8f a7       	std	Y+47, r24	; 0x2f
    3002:	0f c0       	rjmp	.+30     	; 0x3022 <LCD_displayCharacter+0xd2>
    3004:	88 ec       	ldi	r24, 0xC8	; 200
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	9e a7       	std	Y+46, r25	; 0x2e
    300a:	8d a7       	std	Y+45, r24	; 0x2d
    300c:	8d a5       	ldd	r24, Y+45	; 0x2d
    300e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	f1 f7       	brne	.-4      	; 0x3010 <LCD_displayCharacter+0xc0>
    3014:	9e a7       	std	Y+46, r25	; 0x2e
    3016:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3018:	8f a5       	ldd	r24, Y+47	; 0x2f
    301a:	98 a9       	ldd	r25, Y+48	; 0x30
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	98 ab       	std	Y+48, r25	; 0x30
    3020:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3022:	8f a5       	ldd	r24, Y+47	; 0x2f
    3024:	98 a9       	ldd	r25, Y+48	; 0x30
    3026:	00 97       	sbiw	r24, 0x00	; 0
    3028:	69 f7       	brne	.-38     	; 0x3004 <LCD_displayCharacter+0xb4>
    302a:	14 c0       	rjmp	.+40     	; 0x3054 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302c:	69 a9       	ldd	r22, Y+49	; 0x31
    302e:	7a a9       	ldd	r23, Y+50	; 0x32
    3030:	8b a9       	ldd	r24, Y+51	; 0x33
    3032:	9c a9       	ldd	r25, Y+52	; 0x34
    3034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	98 ab       	std	Y+48, r25	; 0x30
    303e:	8f a7       	std	Y+47, r24	; 0x2f
    3040:	8f a5       	ldd	r24, Y+47	; 0x2f
    3042:	98 a9       	ldd	r25, Y+48	; 0x30
    3044:	9c a7       	std	Y+44, r25	; 0x2c
    3046:	8b a7       	std	Y+43, r24	; 0x2b
    3048:	8b a5       	ldd	r24, Y+43	; 0x2b
    304a:	9c a5       	ldd	r25, Y+44	; 0x2c
    304c:	01 97       	sbiw	r24, 0x01	; 1
    304e:	f1 f7       	brne	.-4      	; 0x304c <LCD_displayCharacter+0xfc>
    3050:	9c a7       	std	Y+44, r25	; 0x2c
    3052:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	67 e0       	ldi	r22, 0x07	; 7
    3058:	41 e0       	ldi	r20, 0x01	; 1
    305a:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	a0 e8       	ldi	r26, 0x80	; 128
    3064:	bf e3       	ldi	r27, 0x3F	; 63
    3066:	8f a3       	std	Y+39, r24	; 0x27
    3068:	98 a7       	std	Y+40, r25	; 0x28
    306a:	a9 a7       	std	Y+41, r26	; 0x29
    306c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306e:	6f a1       	ldd	r22, Y+39	; 0x27
    3070:	78 a5       	ldd	r23, Y+40	; 0x28
    3072:	89 a5       	ldd	r24, Y+41	; 0x29
    3074:	9a a5       	ldd	r25, Y+42	; 0x2a
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	4a ef       	ldi	r20, 0xFA	; 250
    307c:	54 e4       	ldi	r21, 0x44	; 68
    307e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	8b a3       	std	Y+35, r24	; 0x23
    3088:	9c a3       	std	Y+36, r25	; 0x24
    308a:	ad a3       	std	Y+37, r26	; 0x25
    308c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    308e:	6b a1       	ldd	r22, Y+35	; 0x23
    3090:	7c a1       	ldd	r23, Y+36	; 0x24
    3092:	8d a1       	ldd	r24, Y+37	; 0x25
    3094:	9e a1       	ldd	r25, Y+38	; 0x26
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	40 e8       	ldi	r20, 0x80	; 128
    309c:	5f e3       	ldi	r21, 0x3F	; 63
    309e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a2:	88 23       	and	r24, r24
    30a4:	2c f4       	brge	.+10     	; 0x30b0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	9a a3       	std	Y+34, r25	; 0x22
    30ac:	89 a3       	std	Y+33, r24	; 0x21
    30ae:	3f c0       	rjmp	.+126    	; 0x312e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    30b0:	6b a1       	ldd	r22, Y+35	; 0x23
    30b2:	7c a1       	ldd	r23, Y+36	; 0x24
    30b4:	8d a1       	ldd	r24, Y+37	; 0x25
    30b6:	9e a1       	ldd	r25, Y+38	; 0x26
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	3f ef       	ldi	r19, 0xFF	; 255
    30bc:	4f e7       	ldi	r20, 0x7F	; 127
    30be:	57 e4       	ldi	r21, 0x47	; 71
    30c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c4:	18 16       	cp	r1, r24
    30c6:	4c f5       	brge	.+82     	; 0x311a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c8:	6f a1       	ldd	r22, Y+39	; 0x27
    30ca:	78 a5       	ldd	r23, Y+40	; 0x28
    30cc:	89 a5       	ldd	r24, Y+41	; 0x29
    30ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	40 e2       	ldi	r20, 0x20	; 32
    30d6:	51 e4       	ldi	r21, 0x41	; 65
    30d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	bc 01       	movw	r22, r24
    30e2:	cd 01       	movw	r24, r26
    30e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	9a a3       	std	Y+34, r25	; 0x22
    30ee:	89 a3       	std	Y+33, r24	; 0x21
    30f0:	0f c0       	rjmp	.+30     	; 0x3110 <LCD_displayCharacter+0x1c0>
    30f2:	88 ec       	ldi	r24, 0xC8	; 200
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	98 a3       	std	Y+32, r25	; 0x20
    30f8:	8f 8f       	std	Y+31, r24	; 0x1f
    30fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30fc:	98 a1       	ldd	r25, Y+32	; 0x20
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	f1 f7       	brne	.-4      	; 0x30fe <LCD_displayCharacter+0x1ae>
    3102:	98 a3       	std	Y+32, r25	; 0x20
    3104:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3106:	89 a1       	ldd	r24, Y+33	; 0x21
    3108:	9a a1       	ldd	r25, Y+34	; 0x22
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	9a a3       	std	Y+34, r25	; 0x22
    310e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3110:	89 a1       	ldd	r24, Y+33	; 0x21
    3112:	9a a1       	ldd	r25, Y+34	; 0x22
    3114:	00 97       	sbiw	r24, 0x00	; 0
    3116:	69 f7       	brne	.-38     	; 0x30f2 <LCD_displayCharacter+0x1a2>
    3118:	14 c0       	rjmp	.+40     	; 0x3142 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311a:	6b a1       	ldd	r22, Y+35	; 0x23
    311c:	7c a1       	ldd	r23, Y+36	; 0x24
    311e:	8d a1       	ldd	r24, Y+37	; 0x25
    3120:	9e a1       	ldd	r25, Y+38	; 0x26
    3122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	9a a3       	std	Y+34, r25	; 0x22
    312c:	89 a3       	std	Y+33, r24	; 0x21
    312e:	89 a1       	ldd	r24, Y+33	; 0x21
    3130:	9a a1       	ldd	r25, Y+34	; 0x22
    3132:	9e 8f       	std	Y+30, r25	; 0x1e
    3134:	8d 8f       	std	Y+29, r24	; 0x1d
    3136:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3138:	9e 8d       	ldd	r25, Y+30	; 0x1e
    313a:	01 97       	sbiw	r24, 0x01	; 1
    313c:	f1 f7       	brne	.-4      	; 0x313a <LCD_displayCharacter+0x1ea>
    313e:	9e 8f       	std	Y+30, r25	; 0x1e
    3140:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	69 ad       	ldd	r22, Y+57	; 0x39
    3146:	0e 94 94 14 	call	0x2928	; 0x2928 <GPIO_writePort>
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	a0 e8       	ldi	r26, 0x80	; 128
    3150:	bf e3       	ldi	r27, 0x3F	; 63
    3152:	89 8f       	std	Y+25, r24	; 0x19
    3154:	9a 8f       	std	Y+26, r25	; 0x1a
    3156:	ab 8f       	std	Y+27, r26	; 0x1b
    3158:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    315a:	69 8d       	ldd	r22, Y+25	; 0x19
    315c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    315e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3160:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	4a ef       	ldi	r20, 0xFA	; 250
    3168:	54 e4       	ldi	r21, 0x44	; 68
    316a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	8d 8b       	std	Y+21, r24	; 0x15
    3174:	9e 8b       	std	Y+22, r25	; 0x16
    3176:	af 8b       	std	Y+23, r26	; 0x17
    3178:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    317a:	6d 89       	ldd	r22, Y+21	; 0x15
    317c:	7e 89       	ldd	r23, Y+22	; 0x16
    317e:	8f 89       	ldd	r24, Y+23	; 0x17
    3180:	98 8d       	ldd	r25, Y+24	; 0x18
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	40 e8       	ldi	r20, 0x80	; 128
    3188:	5f e3       	ldi	r21, 0x3F	; 63
    318a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    318e:	88 23       	and	r24, r24
    3190:	2c f4       	brge	.+10     	; 0x319c <LCD_displayCharacter+0x24c>
		__ticks = 1;
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	9c 8b       	std	Y+20, r25	; 0x14
    3198:	8b 8b       	std	Y+19, r24	; 0x13
    319a:	3f c0       	rjmp	.+126    	; 0x321a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    319c:	6d 89       	ldd	r22, Y+21	; 0x15
    319e:	7e 89       	ldd	r23, Y+22	; 0x16
    31a0:	8f 89       	ldd	r24, Y+23	; 0x17
    31a2:	98 8d       	ldd	r25, Y+24	; 0x18
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	3f ef       	ldi	r19, 0xFF	; 255
    31a8:	4f e7       	ldi	r20, 0x7F	; 127
    31aa:	57 e4       	ldi	r21, 0x47	; 71
    31ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31b0:	18 16       	cp	r1, r24
    31b2:	4c f5       	brge	.+82     	; 0x3206 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b4:	69 8d       	ldd	r22, Y+25	; 0x19
    31b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	40 e2       	ldi	r20, 0x20	; 32
    31c2:	51 e4       	ldi	r21, 0x41	; 65
    31c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	bc 01       	movw	r22, r24
    31ce:	cd 01       	movw	r24, r26
    31d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	9c 8b       	std	Y+20, r25	; 0x14
    31da:	8b 8b       	std	Y+19, r24	; 0x13
    31dc:	0f c0       	rjmp	.+30     	; 0x31fc <LCD_displayCharacter+0x2ac>
    31de:	88 ec       	ldi	r24, 0xC8	; 200
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	9a 8b       	std	Y+18, r25	; 0x12
    31e4:	89 8b       	std	Y+17, r24	; 0x11
    31e6:	89 89       	ldd	r24, Y+17	; 0x11
    31e8:	9a 89       	ldd	r25, Y+18	; 0x12
    31ea:	01 97       	sbiw	r24, 0x01	; 1
    31ec:	f1 f7       	brne	.-4      	; 0x31ea <LCD_displayCharacter+0x29a>
    31ee:	9a 8b       	std	Y+18, r25	; 0x12
    31f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f2:	8b 89       	ldd	r24, Y+19	; 0x13
    31f4:	9c 89       	ldd	r25, Y+20	; 0x14
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	9c 8b       	std	Y+20, r25	; 0x14
    31fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fc:	8b 89       	ldd	r24, Y+19	; 0x13
    31fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3200:	00 97       	sbiw	r24, 0x00	; 0
    3202:	69 f7       	brne	.-38     	; 0x31de <LCD_displayCharacter+0x28e>
    3204:	14 c0       	rjmp	.+40     	; 0x322e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3206:	6d 89       	ldd	r22, Y+21	; 0x15
    3208:	7e 89       	ldd	r23, Y+22	; 0x16
    320a:	8f 89       	ldd	r24, Y+23	; 0x17
    320c:	98 8d       	ldd	r25, Y+24	; 0x18
    320e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	9c 8b       	std	Y+20, r25	; 0x14
    3218:	8b 8b       	std	Y+19, r24	; 0x13
    321a:	8b 89       	ldd	r24, Y+19	; 0x13
    321c:	9c 89       	ldd	r25, Y+20	; 0x14
    321e:	98 8b       	std	Y+16, r25	; 0x10
    3220:	8f 87       	std	Y+15, r24	; 0x0f
    3222:	8f 85       	ldd	r24, Y+15	; 0x0f
    3224:	98 89       	ldd	r25, Y+16	; 0x10
    3226:	01 97       	sbiw	r24, 0x01	; 1
    3228:	f1 f7       	brne	.-4      	; 0x3226 <LCD_displayCharacter+0x2d6>
    322a:	98 8b       	std	Y+16, r25	; 0x10
    322c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	67 e0       	ldi	r22, 0x07	; 7
    3232:	40 e0       	ldi	r20, 0x00	; 0
    3234:	0e 94 ca 12 	call	0x2594	; 0x2594 <GPIO_writePin>
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	a0 e8       	ldi	r26, 0x80	; 128
    323e:	bf e3       	ldi	r27, 0x3F	; 63
    3240:	8b 87       	std	Y+11, r24	; 0x0b
    3242:	9c 87       	std	Y+12, r25	; 0x0c
    3244:	ad 87       	std	Y+13, r26	; 0x0d
    3246:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3248:	6b 85       	ldd	r22, Y+11	; 0x0b
    324a:	7c 85       	ldd	r23, Y+12	; 0x0c
    324c:	8d 85       	ldd	r24, Y+13	; 0x0d
    324e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	4a ef       	ldi	r20, 0xFA	; 250
    3256:	54 e4       	ldi	r21, 0x44	; 68
    3258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	8f 83       	std	Y+7, r24	; 0x07
    3262:	98 87       	std	Y+8, r25	; 0x08
    3264:	a9 87       	std	Y+9, r26	; 0x09
    3266:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3268:	6f 81       	ldd	r22, Y+7	; 0x07
    326a:	78 85       	ldd	r23, Y+8	; 0x08
    326c:	89 85       	ldd	r24, Y+9	; 0x09
    326e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	40 e8       	ldi	r20, 0x80	; 128
    3276:	5f e3       	ldi	r21, 0x3F	; 63
    3278:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    327c:	88 23       	and	r24, r24
    327e:	2c f4       	brge	.+10     	; 0x328a <LCD_displayCharacter+0x33a>
		__ticks = 1;
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	9e 83       	std	Y+6, r25	; 0x06
    3286:	8d 83       	std	Y+5, r24	; 0x05
    3288:	3f c0       	rjmp	.+126    	; 0x3308 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    328a:	6f 81       	ldd	r22, Y+7	; 0x07
    328c:	78 85       	ldd	r23, Y+8	; 0x08
    328e:	89 85       	ldd	r24, Y+9	; 0x09
    3290:	9a 85       	ldd	r25, Y+10	; 0x0a
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	3f ef       	ldi	r19, 0xFF	; 255
    3296:	4f e7       	ldi	r20, 0x7F	; 127
    3298:	57 e4       	ldi	r21, 0x47	; 71
    329a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    329e:	18 16       	cp	r1, r24
    32a0:	4c f5       	brge	.+82     	; 0x32f4 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	40 e2       	ldi	r20, 0x20	; 32
    32b0:	51 e4       	ldi	r21, 0x41	; 65
    32b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	bc 01       	movw	r22, r24
    32bc:	cd 01       	movw	r24, r26
    32be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	9e 83       	std	Y+6, r25	; 0x06
    32c8:	8d 83       	std	Y+5, r24	; 0x05
    32ca:	0f c0       	rjmp	.+30     	; 0x32ea <LCD_displayCharacter+0x39a>
    32cc:	88 ec       	ldi	r24, 0xC8	; 200
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	9c 83       	std	Y+4, r25	; 0x04
    32d2:	8b 83       	std	Y+3, r24	; 0x03
    32d4:	8b 81       	ldd	r24, Y+3	; 0x03
    32d6:	9c 81       	ldd	r25, Y+4	; 0x04
    32d8:	01 97       	sbiw	r24, 0x01	; 1
    32da:	f1 f7       	brne	.-4      	; 0x32d8 <LCD_displayCharacter+0x388>
    32dc:	9c 83       	std	Y+4, r25	; 0x04
    32de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e0:	8d 81       	ldd	r24, Y+5	; 0x05
    32e2:	9e 81       	ldd	r25, Y+6	; 0x06
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	9e 83       	std	Y+6, r25	; 0x06
    32e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ea:	8d 81       	ldd	r24, Y+5	; 0x05
    32ec:	9e 81       	ldd	r25, Y+6	; 0x06
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	69 f7       	brne	.-38     	; 0x32cc <LCD_displayCharacter+0x37c>
    32f2:	14 c0       	rjmp	.+40     	; 0x331c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f4:	6f 81       	ldd	r22, Y+7	; 0x07
    32f6:	78 85       	ldd	r23, Y+8	; 0x08
    32f8:	89 85       	ldd	r24, Y+9	; 0x09
    32fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	9e 83       	std	Y+6, r25	; 0x06
    3306:	8d 83       	std	Y+5, r24	; 0x05
    3308:	8d 81       	ldd	r24, Y+5	; 0x05
    330a:	9e 81       	ldd	r25, Y+6	; 0x06
    330c:	9a 83       	std	Y+2, r25	; 0x02
    330e:	89 83       	std	Y+1, r24	; 0x01
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	9a 81       	ldd	r25, Y+2	; 0x02
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	f1 f7       	brne	.-4      	; 0x3314 <LCD_displayCharacter+0x3c4>
    3318:	9a 83       	std	Y+2, r25	; 0x02
    331a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    331c:	e9 96       	adiw	r28, 0x39	; 57
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	f8 94       	cli
    3322:	de bf       	out	0x3e, r29	; 62
    3324:	0f be       	out	0x3f, r0	; 63
    3326:	cd bf       	out	0x3d, r28	; 61
    3328:	cf 91       	pop	r28
    332a:	df 91       	pop	r29
    332c:	08 95       	ret

0000332e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    332e:	df 93       	push	r29
    3330:	cf 93       	push	r28
    3332:	00 d0       	rcall	.+0      	; 0x3334 <LCD_displayString+0x6>
    3334:	0f 92       	push	r0
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
    333a:	9b 83       	std	Y+3, r25	; 0x03
    333c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    333e:	19 82       	std	Y+1, r1	; 0x01
    3340:	0e c0       	rjmp	.+28     	; 0x335e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3342:	89 81       	ldd	r24, Y+1	; 0x01
    3344:	28 2f       	mov	r18, r24
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	8a 81       	ldd	r24, Y+2	; 0x02
    334a:	9b 81       	ldd	r25, Y+3	; 0x03
    334c:	fc 01       	movw	r30, r24
    334e:	e2 0f       	add	r30, r18
    3350:	f3 1f       	adc	r31, r19
    3352:	80 81       	ld	r24, Z
    3354:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <LCD_displayCharacter>
		i++;
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	8f 5f       	subi	r24, 0xFF	; 255
    335c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	28 2f       	mov	r18, r24
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	8a 81       	ldd	r24, Y+2	; 0x02
    3366:	9b 81       	ldd	r25, Y+3	; 0x03
    3368:	fc 01       	movw	r30, r24
    336a:	e2 0f       	add	r30, r18
    336c:	f3 1f       	adc	r31, r19
    336e:	80 81       	ld	r24, Z
    3370:	88 23       	and	r24, r24
    3372:	39 f7       	brne	.-50     	; 0x3342 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3374:	0f 90       	pop	r0
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	cf 91       	pop	r28
    337c:	df 91       	pop	r29
    337e:	08 95       	ret

00003380 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3380:	df 93       	push	r29
    3382:	cf 93       	push	r28
    3384:	00 d0       	rcall	.+0      	; 0x3386 <LCD_moveCursor+0x6>
    3386:	00 d0       	rcall	.+0      	; 0x3388 <LCD_moveCursor+0x8>
    3388:	0f 92       	push	r0
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	8a 83       	std	Y+2, r24	; 0x02
    3390:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3392:	8a 81       	ldd	r24, Y+2	; 0x02
    3394:	28 2f       	mov	r18, r24
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	3d 83       	std	Y+5, r19	; 0x05
    339a:	2c 83       	std	Y+4, r18	; 0x04
    339c:	8c 81       	ldd	r24, Y+4	; 0x04
    339e:	9d 81       	ldd	r25, Y+5	; 0x05
    33a0:	81 30       	cpi	r24, 0x01	; 1
    33a2:	91 05       	cpc	r25, r1
    33a4:	c1 f0       	breq	.+48     	; 0x33d6 <LCD_moveCursor+0x56>
    33a6:	2c 81       	ldd	r18, Y+4	; 0x04
    33a8:	3d 81       	ldd	r19, Y+5	; 0x05
    33aa:	22 30       	cpi	r18, 0x02	; 2
    33ac:	31 05       	cpc	r19, r1
    33ae:	2c f4       	brge	.+10     	; 0x33ba <LCD_moveCursor+0x3a>
    33b0:	8c 81       	ldd	r24, Y+4	; 0x04
    33b2:	9d 81       	ldd	r25, Y+5	; 0x05
    33b4:	00 97       	sbiw	r24, 0x00	; 0
    33b6:	61 f0       	breq	.+24     	; 0x33d0 <LCD_moveCursor+0x50>
    33b8:	19 c0       	rjmp	.+50     	; 0x33ec <LCD_moveCursor+0x6c>
    33ba:	2c 81       	ldd	r18, Y+4	; 0x04
    33bc:	3d 81       	ldd	r19, Y+5	; 0x05
    33be:	22 30       	cpi	r18, 0x02	; 2
    33c0:	31 05       	cpc	r19, r1
    33c2:	69 f0       	breq	.+26     	; 0x33de <LCD_moveCursor+0x5e>
    33c4:	8c 81       	ldd	r24, Y+4	; 0x04
    33c6:	9d 81       	ldd	r25, Y+5	; 0x05
    33c8:	83 30       	cpi	r24, 0x03	; 3
    33ca:	91 05       	cpc	r25, r1
    33cc:	61 f0       	breq	.+24     	; 0x33e6 <LCD_moveCursor+0x66>
    33ce:	0e c0       	rjmp	.+28     	; 0x33ec <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    33d0:	8b 81       	ldd	r24, Y+3	; 0x03
    33d2:	89 83       	std	Y+1, r24	; 0x01
    33d4:	0b c0       	rjmp	.+22     	; 0x33ec <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    33d6:	8b 81       	ldd	r24, Y+3	; 0x03
    33d8:	80 5c       	subi	r24, 0xC0	; 192
    33da:	89 83       	std	Y+1, r24	; 0x01
    33dc:	07 c0       	rjmp	.+14     	; 0x33ec <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    33de:	8b 81       	ldd	r24, Y+3	; 0x03
    33e0:	80 5f       	subi	r24, 0xF0	; 240
    33e2:	89 83       	std	Y+1, r24	; 0x01
    33e4:	03 c0       	rjmp	.+6      	; 0x33ec <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    33e6:	8b 81       	ldd	r24, Y+3	; 0x03
    33e8:	80 5b       	subi	r24, 0xB0	; 176
    33ea:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	80 68       	ori	r24, 0x80	; 128
    33f0:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_sendCommand>
}
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	0f 90       	pop	r0
    33fc:	0f 90       	pop	r0
    33fe:	cf 91       	pop	r28
    3400:	df 91       	pop	r29
    3402:	08 95       	ret

00003404 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3404:	df 93       	push	r29
    3406:	cf 93       	push	r28
    3408:	00 d0       	rcall	.+0      	; 0x340a <LCD_displayStringRowColumn+0x6>
    340a:	00 d0       	rcall	.+0      	; 0x340c <LCD_displayStringRowColumn+0x8>
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62
    3410:	89 83       	std	Y+1, r24	; 0x01
    3412:	6a 83       	std	Y+2, r22	; 0x02
    3414:	5c 83       	std	Y+4, r21	; 0x04
    3416:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3418:	89 81       	ldd	r24, Y+1	; 0x01
    341a:	6a 81       	ldd	r22, Y+2	; 0x02
    341c:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3420:	8b 81       	ldd	r24, Y+3	; 0x03
    3422:	9c 81       	ldd	r25, Y+4	; 0x04
    3424:	0e 94 97 19 	call	0x332e	; 0x332e <LCD_displayString>
}
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	08 95       	ret

00003436 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3436:	df 93       	push	r29
    3438:	cf 93       	push	r28
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    343e:	62 97       	sbiw	r28, 0x12	; 18
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	de bf       	out	0x3e, r29	; 62
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	cd bf       	out	0x3d, r28	; 61
    344a:	9a 8b       	std	Y+18, r25	; 0x12
    344c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    344e:	89 89       	ldd	r24, Y+17	; 0x11
    3450:	9a 89       	ldd	r25, Y+18	; 0x12
    3452:	9e 01       	movw	r18, r28
    3454:	2f 5f       	subi	r18, 0xFF	; 255
    3456:	3f 4f       	sbci	r19, 0xFF	; 255
    3458:	b9 01       	movw	r22, r18
    345a:	4a e0       	ldi	r20, 0x0A	; 10
    345c:	50 e0       	ldi	r21, 0x00	; 0
    345e:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <itoa>
   LCD_displayString(buff); /* Display the string */
    3462:	ce 01       	movw	r24, r28
    3464:	01 96       	adiw	r24, 0x01	; 1
    3466:	0e 94 97 19 	call	0x332e	; 0x332e <LCD_displayString>
}
    346a:	62 96       	adiw	r28, 0x12	; 18
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	cd bf       	out	0x3d, r28	; 61
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	08 95       	ret

0000347c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    347c:	df 93       	push	r29
    347e:	cf 93       	push	r28
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_sendCommand>
}
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <PWM_Timer0_Start>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void PWM_Timer0_Start(uint8 duty_cycle)
{
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	0f 92       	push	r0
    3496:	cd b7       	in	r28, 0x3d	; 61
    3498:	de b7       	in	r29, 0x3e	; 62
    349a:	89 83       	std	Y+1, r24	; 0x01
	/*  TCNT0 = 0 */
	    TCNT0 = 0;
    349c:	e2 e5       	ldi	r30, 0x52	; 82
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	10 82       	st	Z, r1
	/*  OCR0  =  duty_cycle */
	    OCR0  =  duty_cycle;
    34a2:	ec e5       	ldi	r30, 0x5C	; 92
    34a4:	f0 e0       	ldi	r31, 0x00	; 0
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	80 83       	st	Z, r24
	/* Config OC0 As Output PB3*/
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	63 e0       	ldi	r22, 0x03	; 3
    34ae:	41 e0       	ldi	r20, 0x01	; 1
    34b0:	0e 94 df 11 	call	0x23be	; 0x23be <GPIO_setupPinDirection>

	/* FOC0: 0  Force Output Compare because we use PWM mode	*/
		CLEAR_BIT(TCCR0,FOC0);
    34b4:	a3 e5       	ldi	r26, 0x53	; 83
    34b6:	b0 e0       	ldi	r27, 0x00	; 0
    34b8:	e3 e5       	ldi	r30, 0x53	; 83
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	80 81       	ld	r24, Z
    34be:	8f 77       	andi	r24, 0x7F	; 127
    34c0:	8c 93       	st	X, r24
	/* select Waveform Generation Mode
	 * 		select PWM mode
	 * 			WGM01 = 1
	 *			WGM00 = 1
   	 */
		SET_BIT(TCCR0,WGM01);
    34c2:	a3 e5       	ldi	r26, 0x53	; 83
    34c4:	b0 e0       	ldi	r27, 0x00	; 0
    34c6:	e3 e5       	ldi	r30, 0x53	; 83
    34c8:	f0 e0       	ldi	r31, 0x00	; 0
    34ca:	80 81       	ld	r24, Z
    34cc:	88 60       	ori	r24, 0x08	; 8
    34ce:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM00);
    34d0:	a3 e5       	ldi	r26, 0x53	; 83
    34d2:	b0 e0       	ldi	r27, 0x00	; 0
    34d4:	e3 e5       	ldi	r30, 0x53	; 83
    34d6:	f0 e0       	ldi	r31, 0x00	; 0
    34d8:	80 81       	ld	r24, Z
    34da:	80 64       	ori	r24, 0x40	; 64
    34dc:	8c 93       	st	X, r24

	/* Clear OC0 on compare match, set OC0 at BOTTOM, (nin-inverting mode)
	 * 			COM01 = 1
	 * 		    COM00 = 0
	 */
		SET_BIT(TCCR0,COM01);
    34de:	a3 e5       	ldi	r26, 0x53	; 83
    34e0:	b0 e0       	ldi	r27, 0x00	; 0
    34e2:	e3 e5       	ldi	r30, 0x53	; 83
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	80 81       	ld	r24, Z
    34e8:	80 62       	ori	r24, 0x20	; 32
    34ea:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,COM00);
    34ec:	a3 e5       	ldi	r26, 0x53	; 83
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	e3 e5       	ldi	r30, 0x53	; 83
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	80 81       	ld	r24, Z
    34f6:	8f 7e       	andi	r24, 0xEF	; 239
    34f8:	8c 93       	st	X, r24
	/* select Clock Select Bit Description  clk/8 (From prescaler)
	 * 			CS02 = 0
	 * 			CS01 = 1
	 * 			CS00 = 0
	 */
		SET_BIT(TCCR0,CS01);
    34fa:	a3 e5       	ldi	r26, 0x53	; 83
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	e3 e5       	ldi	r30, 0x53	; 83
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
    3504:	82 60       	ori	r24, 0x02	; 2
    3506:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,CS02);
    3508:	a3 e5       	ldi	r26, 0x53	; 83
    350a:	b0 e0       	ldi	r27, 0x00	; 0
    350c:	e3 e5       	ldi	r30, 0x53	; 83
    350e:	f0 e0       	ldi	r31, 0x00	; 0
    3510:	80 81       	ld	r24, Z
    3512:	8b 7f       	andi	r24, 0xFB	; 251
    3514:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,CS00);
    3516:	a3 e5       	ldi	r26, 0x53	; 83
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	e3 e5       	ldi	r30, 0x53	; 83
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
    3520:	8e 7f       	andi	r24, 0xFE	; 254
    3522:	8c 93       	st	X, r24
}
    3524:	0f 90       	pop	r0
    3526:	cf 91       	pop	r28
    3528:	df 91       	pop	r29
    352a:	08 95       	ret

0000352c <__vector_9>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    352c:	1f 92       	push	r1
    352e:	0f 92       	push	r0
    3530:	0f b6       	in	r0, 0x3f	; 63
    3532:	0f 92       	push	r0
    3534:	11 24       	eor	r1, r1
    3536:	2f 93       	push	r18
    3538:	3f 93       	push	r19
    353a:	4f 93       	push	r20
    353c:	5f 93       	push	r21
    353e:	6f 93       	push	r22
    3540:	7f 93       	push	r23
    3542:	8f 93       	push	r24
    3544:	9f 93       	push	r25
    3546:	af 93       	push	r26
    3548:	bf 93       	push	r27
    354a:	ef 93       	push	r30
    354c:	ff 93       	push	r31
    354e:	df 93       	push	r29
    3550:	cf 93       	push	r28
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
	g_Ptr_OVFCallBack();
    3556:	e0 91 89 01 	lds	r30, 0x0189
    355a:	f0 91 8a 01 	lds	r31, 0x018A
    355e:	09 95       	icall
}
    3560:	cf 91       	pop	r28
    3562:	df 91       	pop	r29
    3564:	ff 91       	pop	r31
    3566:	ef 91       	pop	r30
    3568:	bf 91       	pop	r27
    356a:	af 91       	pop	r26
    356c:	9f 91       	pop	r25
    356e:	8f 91       	pop	r24
    3570:	7f 91       	pop	r23
    3572:	6f 91       	pop	r22
    3574:	5f 91       	pop	r21
    3576:	4f 91       	pop	r20
    3578:	3f 91       	pop	r19
    357a:	2f 91       	pop	r18
    357c:	0f 90       	pop	r0
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	0f 90       	pop	r0
    3582:	1f 90       	pop	r1
    3584:	18 95       	reti

00003586 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    3586:	1f 92       	push	r1
    3588:	0f 92       	push	r0
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	0f 92       	push	r0
    358e:	11 24       	eor	r1, r1
    3590:	2f 93       	push	r18
    3592:	3f 93       	push	r19
    3594:	4f 93       	push	r20
    3596:	5f 93       	push	r21
    3598:	6f 93       	push	r22
    359a:	7f 93       	push	r23
    359c:	8f 93       	push	r24
    359e:	9f 93       	push	r25
    35a0:	af 93       	push	r26
    35a2:	bf 93       	push	r27
    35a4:	ef 93       	push	r30
    35a6:	ff 93       	push	r31
    35a8:	df 93       	push	r29
    35aa:	cf 93       	push	r28
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
	g_Ptr_CTCCallBack();
    35b0:	e0 91 8b 01 	lds	r30, 0x018B
    35b4:	f0 91 8c 01 	lds	r31, 0x018C
    35b8:	09 95       	icall
}
    35ba:	cf 91       	pop	r28
    35bc:	df 91       	pop	r29
    35be:	ff 91       	pop	r31
    35c0:	ef 91       	pop	r30
    35c2:	bf 91       	pop	r27
    35c4:	af 91       	pop	r26
    35c6:	9f 91       	pop	r25
    35c8:	8f 91       	pop	r24
    35ca:	7f 91       	pop	r23
    35cc:	6f 91       	pop	r22
    35ce:	5f 91       	pop	r21
    35d0:	4f 91       	pop	r20
    35d2:	3f 91       	pop	r19
    35d4:	2f 91       	pop	r18
    35d6:	0f 90       	pop	r0
    35d8:	0f be       	out	0x3f, r0	; 63
    35da:	0f 90       	pop	r0
    35dc:	1f 90       	pop	r1
    35de:	18 95       	reti

000035e0 <Timer1_init>:

/* Description :
 * Function to initialize the Timer driver
 * */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    35e0:	df 93       	push	r29
    35e2:	cf 93       	push	r28
    35e4:	00 d0       	rcall	.+0      	; 0x35e6 <Timer1_init+0x6>
    35e6:	00 d0       	rcall	.+0      	; 0x35e8 <Timer1_init+0x8>
    35e8:	cd b7       	in	r28, 0x3d	; 61
    35ea:	de b7       	in	r29, 0x3e	; 62
    35ec:	9a 83       	std	Y+2, r25	; 0x02
    35ee:	89 83       	std	Y+1, r24	; 0x01
	/* check Timer Mode*/
	switch (Config_Ptr->mode)
    35f0:	e9 81       	ldd	r30, Y+1	; 0x01
    35f2:	fa 81       	ldd	r31, Y+2	; 0x02
    35f4:	85 81       	ldd	r24, Z+5	; 0x05
    35f6:	28 2f       	mov	r18, r24
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	3c 83       	std	Y+4, r19	; 0x04
    35fc:	2b 83       	std	Y+3, r18	; 0x03
    35fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3600:	9c 81       	ldd	r25, Y+4	; 0x04
    3602:	00 97       	sbiw	r24, 0x00	; 0
    3604:	31 f0       	breq	.+12     	; 0x3612 <Timer1_init+0x32>
    3606:	2b 81       	ldd	r18, Y+3	; 0x03
    3608:	3c 81       	ldd	r19, Y+4	; 0x04
    360a:	21 30       	cpi	r18, 0x01	; 1
    360c:	31 05       	cpc	r19, r1
    360e:	31 f0       	breq	.+12     	; 0x361c <Timer1_init+0x3c>
    3610:	09 c0       	rjmp	.+18     	; 0x3624 <Timer1_init+0x44>
	{
		case Normal_Mode:	Timer1_NormalModeConfiguration(Config_Ptr);	break;
    3612:	89 81       	ldd	r24, Y+1	; 0x01
    3614:	9a 81       	ldd	r25, Y+2	; 0x02
    3616:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <Timer1_NormalModeConfiguration>
    361a:	04 c0       	rjmp	.+8      	; 0x3624 <Timer1_init+0x44>
		case CTC_Mode   :   Timer1_CTCModeConfiguration(Config_Ptr)   ;	break;
    361c:	89 81       	ldd	r24, Y+1	; 0x01
    361e:	9a 81       	ldd	r25, Y+2	; 0x02
    3620:	0e 94 bb 1b 	call	0x3776	; 0x3776 <Timer1_CTCModeConfiguration>
		default:                                               		    break;
	}

}
    3624:	0f 90       	pop	r0
    3626:	0f 90       	pop	r0
    3628:	0f 90       	pop	r0
    362a:	0f 90       	pop	r0
    362c:	cf 91       	pop	r28
    362e:	df 91       	pop	r29
    3630:	08 95       	ret

00003632 <Timer1_deInit>:
/* Description :
 * Function to disable the Timer1.
 * */
void Timer1_deInit(void)
{
    3632:	df 93       	push	r29
    3634:	cf 93       	push	r28
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = TCCR1B & TIMER1_PRESCALLER_MASK;
    363a:	ae e4       	ldi	r26, 0x4E	; 78
    363c:	b0 e0       	ldi	r27, 0x00	; 0
    363e:	ee e4       	ldi	r30, 0x4E	; 78
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	80 81       	ld	r24, Z
    3644:	88 7f       	andi	r24, 0xF8	; 248
    3646:	8c 93       	st	X, r24
	TCNT1=0;
    3648:	ec e4       	ldi	r30, 0x4C	; 76
    364a:	f0 e0       	ldi	r31, 0x00	; 0
    364c:	11 82       	std	Z+1, r1	; 0x01
    364e:	10 82       	st	Z, r1
	TCCR1A=0;
    3650:	ef e4       	ldi	r30, 0x4F	; 79
    3652:	f0 e0       	ldi	r31, 0x00	; 0
    3654:	10 82       	st	Z, r1
	TIMSK=0;
    3656:	e9 e5       	ldi	r30, 0x59	; 89
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	10 82       	st	Z, r1
	OCR1A=0;
    365c:	ea e4       	ldi	r30, 0x4A	; 74
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	11 82       	std	Z+1, r1	; 0x01
    3662:	10 82       	st	Z, r1
}
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	08 95       	ret

0000366a <Timer1_setCallBack>:
/* Description :
 * Function to set the Call Back function address.
 * */
void Timer1_setCallBack(uint8 Copy_U8_Mode , void(*a_ptr)(void))
{
    366a:	df 93       	push	r29
    366c:	cf 93       	push	r28
    366e:	00 d0       	rcall	.+0      	; 0x3670 <Timer1_setCallBack+0x6>
    3670:	00 d0       	rcall	.+0      	; 0x3672 <Timer1_setCallBack+0x8>
    3672:	0f 92       	push	r0
    3674:	cd b7       	in	r28, 0x3d	; 61
    3676:	de b7       	in	r29, 0x3e	; 62
    3678:	89 83       	std	Y+1, r24	; 0x01
    367a:	7b 83       	std	Y+3, r23	; 0x03
    367c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_Mode)
    367e:	89 81       	ldd	r24, Y+1	; 0x01
    3680:	28 2f       	mov	r18, r24
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	3d 83       	std	Y+5, r19	; 0x05
    3686:	2c 83       	std	Y+4, r18	; 0x04
    3688:	8c 81       	ldd	r24, Y+4	; 0x04
    368a:	9d 81       	ldd	r25, Y+5	; 0x05
    368c:	00 97       	sbiw	r24, 0x00	; 0
    368e:	31 f0       	breq	.+12     	; 0x369c <Timer1_setCallBack+0x32>
    3690:	2c 81       	ldd	r18, Y+4	; 0x04
    3692:	3d 81       	ldd	r19, Y+5	; 0x05
    3694:	21 30       	cpi	r18, 0x01	; 1
    3696:	31 05       	cpc	r19, r1
    3698:	41 f0       	breq	.+16     	; 0x36aa <Timer1_setCallBack+0x40>
    369a:	0d c0       	rjmp	.+26     	; 0x36b6 <Timer1_setCallBack+0x4c>
	{
	case Normal_Mode:g_Ptr_OVFCallBack = a_ptr; break;
    369c:	8a 81       	ldd	r24, Y+2	; 0x02
    369e:	9b 81       	ldd	r25, Y+3	; 0x03
    36a0:	90 93 8a 01 	sts	0x018A, r25
    36a4:	80 93 89 01 	sts	0x0189, r24
    36a8:	06 c0       	rjmp	.+12     	; 0x36b6 <Timer1_setCallBack+0x4c>
	case CTC_Mode:   g_Ptr_CTCCallBack = a_ptr; break;
    36aa:	8a 81       	ldd	r24, Y+2	; 0x02
    36ac:	9b 81       	ldd	r25, Y+3	; 0x03
    36ae:	90 93 8c 01 	sts	0x018C, r25
    36b2:	80 93 8b 01 	sts	0x018B, r24

	default:                                    break;
	}

}
    36b6:	0f 90       	pop	r0
    36b8:	0f 90       	pop	r0
    36ba:	0f 90       	pop	r0
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
    36c0:	cf 91       	pop	r28
    36c2:	df 91       	pop	r29
    36c4:	08 95       	ret

000036c6 <Timer1_NormalModeConfiguration>:

/*******************************************************************************
 *                    Static Functions Definitions                             *
 *******************************************************************************/
static void Timer1_NormalModeConfiguration(const Timer1_ConfigType * Config_Ptr)
{
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	00 d0       	rcall	.+0      	; 0x36cc <Timer1_NormalModeConfiguration+0x6>
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    36d0:	9a 83       	std	Y+2, r25	; 0x02
    36d2:	89 83       	std	Y+1, r24	; 0x01
	 *  Set  (prescaler)
	 *  TCNT1 =0
	 * Overflow Interrupt Enable
	 * */

	SET_BIT(TCCR1A,FOC1A);
    36d4:	af e4       	ldi	r26, 0x4F	; 79
    36d6:	b0 e0       	ldi	r27, 0x00	; 0
    36d8:	ef e4       	ldi	r30, 0x4F	; 79
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	80 81       	ld	r24, Z
    36de:	88 60       	ori	r24, 0x08	; 8
    36e0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    36e2:	af e4       	ldi	r26, 0x4F	; 79
    36e4:	b0 e0       	ldi	r27, 0x00	; 0
    36e6:	ef e4       	ldi	r30, 0x4F	; 79
    36e8:	f0 e0       	ldi	r31, 0x00	; 0
    36ea:	80 81       	ld	r24, Z
    36ec:	84 60       	ori	r24, 0x04	; 4
    36ee:	8c 93       	st	X, r24
	if(Config_Ptr->mode==Normal_Mode)
    36f0:	e9 81       	ldd	r30, Y+1	; 0x01
    36f2:	fa 81       	ldd	r31, Y+2	; 0x02
    36f4:	85 81       	ldd	r24, Z+5	; 0x05
    36f6:	88 23       	and	r24, r24
    36f8:	e1 f4       	brne	.+56     	; 0x3732 <Timer1_NormalModeConfiguration+0x6c>
	{
		CLEAR_BIT(TCCR1A,WGM10);
    36fa:	af e4       	ldi	r26, 0x4F	; 79
    36fc:	b0 e0       	ldi	r27, 0x00	; 0
    36fe:	ef e4       	ldi	r30, 0x4F	; 79
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	80 81       	ld	r24, Z
    3704:	8e 7f       	andi	r24, 0xFE	; 254
    3706:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    3708:	af e4       	ldi	r26, 0x4F	; 79
    370a:	b0 e0       	ldi	r27, 0x00	; 0
    370c:	ef e4       	ldi	r30, 0x4F	; 79
    370e:	f0 e0       	ldi	r31, 0x00	; 0
    3710:	80 81       	ld	r24, Z
    3712:	8d 7f       	andi	r24, 0xFD	; 253
    3714:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    3716:	ae e4       	ldi	r26, 0x4E	; 78
    3718:	b0 e0       	ldi	r27, 0x00	; 0
    371a:	ee e4       	ldi	r30, 0x4E	; 78
    371c:	f0 e0       	ldi	r31, 0x00	; 0
    371e:	80 81       	ld	r24, Z
    3720:	87 7f       	andi	r24, 0xF7	; 247
    3722:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    3724:	ae e4       	ldi	r26, 0x4E	; 78
    3726:	b0 e0       	ldi	r27, 0x00	; 0
    3728:	ee e4       	ldi	r30, 0x4E	; 78
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	80 81       	ld	r24, Z
    372e:	8f 7e       	andi	r24, 0xEF	; 239
    3730:	8c 93       	st	X, r24

	}
	TCCR1B = ((TCCR1B & TIMER1_PRESCALLER_MASK)|(Config_Ptr->prescaler & 0x07));
    3732:	ae e4       	ldi	r26, 0x4E	; 78
    3734:	b0 e0       	ldi	r27, 0x00	; 0
    3736:	ee e4       	ldi	r30, 0x4E	; 78
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	80 81       	ld	r24, Z
    373c:	98 2f       	mov	r25, r24
    373e:	98 7f       	andi	r25, 0xF8	; 248
    3740:	e9 81       	ldd	r30, Y+1	; 0x01
    3742:	fa 81       	ldd	r31, Y+2	; 0x02
    3744:	84 81       	ldd	r24, Z+4	; 0x04
    3746:	87 70       	andi	r24, 0x07	; 7
    3748:	89 2b       	or	r24, r25
    374a:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TOIE1);
    374c:	a9 e5       	ldi	r26, 0x59	; 89
    374e:	b0 e0       	ldi	r27, 0x00	; 0
    3750:	e9 e5       	ldi	r30, 0x59	; 89
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	80 81       	ld	r24, Z
    3756:	84 60       	ori	r24, 0x04	; 4
    3758:	8c 93       	st	X, r24
	TCNT1  = Config_Ptr->initial_value;
    375a:	ac e4       	ldi	r26, 0x4C	; 76
    375c:	b0 e0       	ldi	r27, 0x00	; 0
    375e:	e9 81       	ldd	r30, Y+1	; 0x01
    3760:	fa 81       	ldd	r31, Y+2	; 0x02
    3762:	80 81       	ld	r24, Z
    3764:	91 81       	ldd	r25, Z+1	; 0x01
    3766:	11 96       	adiw	r26, 0x01	; 1
    3768:	9c 93       	st	X, r25
    376a:	8e 93       	st	-X, r24
}
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	cf 91       	pop	r28
    3772:	df 91       	pop	r29
    3774:	08 95       	ret

00003776 <Timer1_CTCModeConfiguration>:
static void Timer1_CTCModeConfiguration(const Timer1_ConfigType * Config_Ptr)
{
    3776:	df 93       	push	r29
    3778:	cf 93       	push	r28
    377a:	00 d0       	rcall	.+0      	; 0x377c <Timer1_CTCModeConfiguration+0x6>
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
    3780:	9a 83       	std	Y+2, r25	; 0x02
    3782:	89 83       	std	Y+1, r24	; 0x01
	 *  Set  (prescaler)
	 *  TCNT1 =0
	 *  OCR1A = top --> (31250 to generate interrupt each 1 sec at prescaller 256)
	 * Output Compare A Match Interrupt Enable
	 * */
	SET_BIT(TCCR1A,FOC1A);
    3784:	af e4       	ldi	r26, 0x4F	; 79
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	ef e4       	ldi	r30, 0x4F	; 79
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	88 60       	ori	r24, 0x08	; 8
    3790:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    3792:	af e4       	ldi	r26, 0x4F	; 79
    3794:	b0 e0       	ldi	r27, 0x00	; 0
    3796:	ef e4       	ldi	r30, 0x4F	; 79
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	80 81       	ld	r24, Z
    379c:	84 60       	ori	r24, 0x04	; 4
    379e:	8c 93       	st	X, r24
	if(Config_Ptr->mode==CTC_Mode)
    37a0:	e9 81       	ldd	r30, Y+1	; 0x01
    37a2:	fa 81       	ldd	r31, Y+2	; 0x02
    37a4:	85 81       	ldd	r24, Z+5	; 0x05
    37a6:	81 30       	cpi	r24, 0x01	; 1
    37a8:	e1 f4       	brne	.+56     	; 0x37e2 <Timer1_CTCModeConfiguration+0x6c>
	{
		CLEAR_BIT(TCCR1A,WGM10);
    37aa:	af e4       	ldi	r26, 0x4F	; 79
    37ac:	b0 e0       	ldi	r27, 0x00	; 0
    37ae:	ef e4       	ldi	r30, 0x4F	; 79
    37b0:	f0 e0       	ldi	r31, 0x00	; 0
    37b2:	80 81       	ld	r24, Z
    37b4:	8e 7f       	andi	r24, 0xFE	; 254
    37b6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    37b8:	af e4       	ldi	r26, 0x4F	; 79
    37ba:	b0 e0       	ldi	r27, 0x00	; 0
    37bc:	ef e4       	ldi	r30, 0x4F	; 79
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	80 81       	ld	r24, Z
    37c2:	8d 7f       	andi	r24, 0xFD	; 253
    37c4:	8c 93       	st	X, r24
		SET_BIT  (TCCR1B,WGM12);
    37c6:	ae e4       	ldi	r26, 0x4E	; 78
    37c8:	b0 e0       	ldi	r27, 0x00	; 0
    37ca:	ee e4       	ldi	r30, 0x4E	; 78
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	80 81       	ld	r24, Z
    37d0:	88 60       	ori	r24, 0x08	; 8
    37d2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    37d4:	ae e4       	ldi	r26, 0x4E	; 78
    37d6:	b0 e0       	ldi	r27, 0x00	; 0
    37d8:	ee e4       	ldi	r30, 0x4E	; 78
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	80 81       	ld	r24, Z
    37de:	8f 7e       	andi	r24, 0xEF	; 239
    37e0:	8c 93       	st	X, r24
	}
	TCCR1B = ((TCCR1B & TIMER1_PRESCALLER_MASK)|(Config_Ptr->prescaler & 0x07));
    37e2:	ae e4       	ldi	r26, 0x4E	; 78
    37e4:	b0 e0       	ldi	r27, 0x00	; 0
    37e6:	ee e4       	ldi	r30, 0x4E	; 78
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	80 81       	ld	r24, Z
    37ec:	98 2f       	mov	r25, r24
    37ee:	98 7f       	andi	r25, 0xF8	; 248
    37f0:	e9 81       	ldd	r30, Y+1	; 0x01
    37f2:	fa 81       	ldd	r31, Y+2	; 0x02
    37f4:	84 81       	ldd	r24, Z+4	; 0x04
    37f6:	87 70       	andi	r24, 0x07	; 7
    37f8:	89 2b       	or	r24, r25
    37fa:	8c 93       	st	X, r24
	SET_BIT(TIMSK,OCIE1A);
    37fc:	a9 e5       	ldi	r26, 0x59	; 89
    37fe:	b0 e0       	ldi	r27, 0x00	; 0
    3800:	e9 e5       	ldi	r30, 0x59	; 89
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	80 81       	ld	r24, Z
    3806:	80 61       	ori	r24, 0x10	; 16
    3808:	8c 93       	st	X, r24
	TCNT1  = Config_Ptr->initial_value;
    380a:	ac e4       	ldi	r26, 0x4C	; 76
    380c:	b0 e0       	ldi	r27, 0x00	; 0
    380e:	e9 81       	ldd	r30, Y+1	; 0x01
    3810:	fa 81       	ldd	r31, Y+2	; 0x02
    3812:	80 81       	ld	r24, Z
    3814:	91 81       	ldd	r25, Z+1	; 0x01
    3816:	11 96       	adiw	r26, 0x01	; 1
    3818:	9c 93       	st	X, r25
    381a:	8e 93       	st	-X, r24
	OCR1A  = Config_Ptr->compare_value;
    381c:	aa e4       	ldi	r26, 0x4A	; 74
    381e:	b0 e0       	ldi	r27, 0x00	; 0
    3820:	e9 81       	ldd	r30, Y+1	; 0x01
    3822:	fa 81       	ldd	r31, Y+2	; 0x02
    3824:	82 81       	ldd	r24, Z+2	; 0x02
    3826:	93 81       	ldd	r25, Z+3	; 0x03
    3828:	11 96       	adiw	r26, 0x01	; 1
    382a:	9c 93       	st	X, r25
    382c:	8e 93       	st	-X, r24
}
    382e:	0f 90       	pop	r0
    3830:	0f 90       	pop	r0
    3832:	cf 91       	pop	r28
    3834:	df 91       	pop	r29
    3836:	08 95       	ret

00003838 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    3838:	df 93       	push	r29
    383a:	cf 93       	push	r28
    383c:	00 d0       	rcall	.+0      	; 0x383e <TWI_init+0x6>
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    3842:	9a 83       	std	Y+2, r25	; 0x02
    3844:	89 83       	std	Y+1, r24	; 0x01
  /* Bit Rate : is set using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr ->bit_rate;
    3846:	a0 e2       	ldi	r26, 0x20	; 32
    3848:	b0 e0       	ldi	r27, 0x00	; 0
    384a:	e9 81       	ldd	r30, Y+1	; 0x01
    384c:	fa 81       	ldd	r31, Y+2	; 0x02
    384e:	81 81       	ldd	r24, Z+1	; 0x01
    3850:	8c 93       	st	X, r24
	TWSR = 0x00;
    3852:	e1 e2       	ldi	r30, 0x21	; 33
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	10 82       	st	Z, r1
	
	/*set this MC address to specified one when a master wants to communicate with it*/
    TWAR = Config_Ptr ->address;  // my address 
    3858:	a2 e2       	ldi	r26, 0x22	; 34
    385a:	b0 e0       	ldi	r27, 0x00	; 0
    385c:	e9 81       	ldd	r30, Y+1	; 0x01
    385e:	fa 81       	ldd	r31, Y+2	; 0x02
    3860:	80 81       	ld	r24, Z
    3862:	8c 93       	st	X, r24
	
    TWCR = (1 << TWEN); /* enable TWI */
    3864:	e6 e5       	ldi	r30, 0x56	; 86
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	84 e0       	ldi	r24, 0x04	; 4
    386a:	80 83       	st	Z, r24
}
    386c:	0f 90       	pop	r0
    386e:	0f 90       	pop	r0
    3870:	cf 91       	pop	r28
    3872:	df 91       	pop	r29
    3874:	08 95       	ret

00003876 <TWI_start>:

void TWI_start(void)
{
    3876:	df 93       	push	r29
    3878:	cf 93       	push	r28
    387a:	cd b7       	in	r28, 0x3d	; 61
    387c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    387e:	e6 e5       	ldi	r30, 0x56	; 86
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	84 ea       	ldi	r24, 0xA4	; 164
    3884:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3886:	e6 e5       	ldi	r30, 0x56	; 86
    3888:	f0 e0       	ldi	r31, 0x00	; 0
    388a:	80 81       	ld	r24, Z
    388c:	88 23       	and	r24, r24
    388e:	dc f7       	brge	.-10     	; 0x3886 <TWI_start+0x10>
}
    3890:	cf 91       	pop	r28
    3892:	df 91       	pop	r29
    3894:	08 95       	ret

00003896 <TWI_stop>:

void TWI_stop(void)
{
    3896:	df 93       	push	r29
    3898:	cf 93       	push	r28
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    389e:	e6 e5       	ldi	r30, 0x56	; 86
    38a0:	f0 e0       	ldi	r31, 0x00	; 0
    38a2:	84 e9       	ldi	r24, 0x94	; 148
    38a4:	80 83       	st	Z, r24
}
    38a6:	cf 91       	pop	r28
    38a8:	df 91       	pop	r29
    38aa:	08 95       	ret

000038ac <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    38ac:	df 93       	push	r29
    38ae:	cf 93       	push	r28
    38b0:	0f 92       	push	r0
    38b2:	cd b7       	in	r28, 0x3d	; 61
    38b4:	de b7       	in	r29, 0x3e	; 62
    38b6:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    38b8:	e3 e2       	ldi	r30, 0x23	; 35
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    38c0:	e6 e5       	ldi	r30, 0x56	; 86
    38c2:	f0 e0       	ldi	r31, 0x00	; 0
    38c4:	84 e8       	ldi	r24, 0x84	; 132
    38c6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    38c8:	e6 e5       	ldi	r30, 0x56	; 86
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	80 81       	ld	r24, Z
    38ce:	88 23       	and	r24, r24
    38d0:	dc f7       	brge	.-10     	; 0x38c8 <TWI_writeByte+0x1c>
}
    38d2:	0f 90       	pop	r0
    38d4:	cf 91       	pop	r28
    38d6:	df 91       	pop	r29
    38d8:	08 95       	ret

000038da <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    38da:	df 93       	push	r29
    38dc:	cf 93       	push	r28
    38de:	cd b7       	in	r28, 0x3d	; 61
    38e0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    38e2:	e6 e5       	ldi	r30, 0x56	; 86
    38e4:	f0 e0       	ldi	r31, 0x00	; 0
    38e6:	84 ec       	ldi	r24, 0xC4	; 196
    38e8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    38ea:	e6 e5       	ldi	r30, 0x56	; 86
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	88 23       	and	r24, r24
    38f2:	dc f7       	brge	.-10     	; 0x38ea <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    38f4:	e3 e2       	ldi	r30, 0x23	; 35
    38f6:	f0 e0       	ldi	r31, 0x00	; 0
    38f8:	80 81       	ld	r24, Z
}
    38fa:	cf 91       	pop	r28
    38fc:	df 91       	pop	r29
    38fe:	08 95       	ret

00003900 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    3900:	df 93       	push	r29
    3902:	cf 93       	push	r28
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    3908:	e6 e5       	ldi	r30, 0x56	; 86
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	84 e8       	ldi	r24, 0x84	; 132
    390e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3910:	e6 e5       	ldi	r30, 0x56	; 86
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	80 81       	ld	r24, Z
    3916:	88 23       	and	r24, r24
    3918:	dc f7       	brge	.-10     	; 0x3910 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    391a:	e3 e2       	ldi	r30, 0x23	; 35
    391c:	f0 e0       	ldi	r31, 0x00	; 0
    391e:	80 81       	ld	r24, Z
}
    3920:	cf 91       	pop	r28
    3922:	df 91       	pop	r29
    3924:	08 95       	ret

00003926 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    3926:	df 93       	push	r29
    3928:	cf 93       	push	r28
    392a:	0f 92       	push	r0
    392c:	cd b7       	in	r28, 0x3d	; 61
    392e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    3930:	e1 e2       	ldi	r30, 0x21	; 33
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	80 81       	ld	r24, Z
    3936:	88 7f       	andi	r24, 0xF8	; 248
    3938:	89 83       	std	Y+1, r24	; 0x01
    return status;
    393a:	89 81       	ldd	r24, Y+1	; 0x01
}
    393c:	0f 90       	pop	r0
    393e:	cf 91       	pop	r28
    3940:	df 91       	pop	r29
    3942:	08 95       	ret

00003944 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3944:	df 93       	push	r29
    3946:	cf 93       	push	r28
    3948:	00 d0       	rcall	.+0      	; 0x394a <UART_init+0x6>
    394a:	00 d0       	rcall	.+0      	; 0x394c <UART_init+0x8>
    394c:	cd b7       	in	r28, 0x3d	; 61
    394e:	de b7       	in	r29, 0x3e	; 62
    3950:	9c 83       	std	Y+4, r25	; 0x04
    3952:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3954:	1a 82       	std	Y+2, r1	; 0x02
    3956:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3958:	eb e2       	ldi	r30, 0x2B	; 43
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	82 e0       	ldi	r24, 0x02	; 2
    395e:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
		UCSRB =0;
    3960:	ea e2       	ldi	r30, 0x2A	; 42
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	10 82       	st	Z, r1
		SET_BIT(UCSRB,RXEN);
    3966:	aa e2       	ldi	r26, 0x2A	; 42
    3968:	b0 e0       	ldi	r27, 0x00	; 0
    396a:	ea e2       	ldi	r30, 0x2A	; 42
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	80 81       	ld	r24, Z
    3970:	80 61       	ori	r24, 0x10	; 16
    3972:	8c 93       	st	X, r24
		SET_BIT(UCSRB,TXEN);
    3974:	aa e2       	ldi	r26, 0x2A	; 42
    3976:	b0 e0       	ldi	r27, 0x00	; 0
    3978:	ea e2       	ldi	r30, 0x2A	; 42
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	80 81       	ld	r24, Z
    397e:	88 60       	ori	r24, 0x08	; 8
    3980:	8c 93       	st	X, r24
	 * parity bit set from the user
	 * stop bit set from the user
	 * bit data mode  set from the user
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC=0;
    3982:	e0 e4       	ldi	r30, 0x40	; 64
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	10 82       	st	Z, r1
    /* URSEL   = 1 The URSEL must be one when writing the UCSRC*/
	SET_BIT(UCSRC,URSEL);
    3988:	a0 e4       	ldi	r26, 0x40	; 64
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	e0 e4       	ldi	r30, 0x40	; 64
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	80 68       	ori	r24, 0x80	; 128
    3994:	8c 93       	st	X, r24
	/*Select parity bit*/
	UCSRC = (UCSRC & UART_PARITYBIT_MASK) | ( (Config_Ptr->parity) << 4 );
    3996:	a0 e4       	ldi	r26, 0x40	; 64
    3998:	b0 e0       	ldi	r27, 0x00	; 0
    399a:	e0 e4       	ldi	r30, 0x40	; 64
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	80 81       	ld	r24, Z
    39a0:	28 2f       	mov	r18, r24
    39a2:	2f 7c       	andi	r18, 0xCF	; 207
    39a4:	eb 81       	ldd	r30, Y+3	; 0x03
    39a6:	fc 81       	ldd	r31, Y+4	; 0x04
    39a8:	81 81       	ldd	r24, Z+1	; 0x01
    39aa:	88 2f       	mov	r24, r24
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	82 95       	swap	r24
    39b0:	92 95       	swap	r25
    39b2:	90 7f       	andi	r25, 0xF0	; 240
    39b4:	98 27       	eor	r25, r24
    39b6:	80 7f       	andi	r24, 0xF0	; 240
    39b8:	98 27       	eor	r25, r24
    39ba:	82 2b       	or	r24, r18
    39bc:	8c 93       	st	X, r24
	/*Select Stop Bit*/
	UCSRC = (UCSRC & UART_STOPBIT_MASK) | ( (Config_Ptr->stop_bit) << 3 );
    39be:	a0 e4       	ldi	r26, 0x40	; 64
    39c0:	b0 e0       	ldi	r27, 0x00	; 0
    39c2:	e0 e4       	ldi	r30, 0x40	; 64
    39c4:	f0 e0       	ldi	r31, 0x00	; 0
    39c6:	80 81       	ld	r24, Z
    39c8:	28 2f       	mov	r18, r24
    39ca:	27 7f       	andi	r18, 0xF7	; 247
    39cc:	eb 81       	ldd	r30, Y+3	; 0x03
    39ce:	fc 81       	ldd	r31, Y+4	; 0x04
    39d0:	82 81       	ldd	r24, Z+2	; 0x02
    39d2:	88 2f       	mov	r24, r24
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	88 0f       	add	r24, r24
    39d8:	99 1f       	adc	r25, r25
    39da:	88 0f       	add	r24, r24
    39dc:	99 1f       	adc	r25, r25
    39de:	88 0f       	add	r24, r24
    39e0:	99 1f       	adc	r25, r25
    39e2:	82 2b       	or	r24, r18
    39e4:	8c 93       	st	X, r24

	/* Character Size */
	if((Config_Ptr->bit_data) == NINE_BIT)
    39e6:	eb 81       	ldd	r30, Y+3	; 0x03
    39e8:	fc 81       	ldd	r31, Y+4	; 0x04
    39ea:	80 81       	ld	r24, Z
    39ec:	87 30       	cpi	r24, 0x07	; 7
    39ee:	c1 f4       	brne	.+48     	; 0x3a20 <UART_init+0xdc>
	{
		UCSRC = (UCSRC & UART_BitData_MASK) | ( (Config_Ptr->bit_data) << 1 );
    39f0:	a0 e4       	ldi	r26, 0x40	; 64
    39f2:	b0 e0       	ldi	r27, 0x00	; 0
    39f4:	e0 e4       	ldi	r30, 0x40	; 64
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	80 81       	ld	r24, Z
    39fa:	28 2f       	mov	r18, r24
    39fc:	29 7f       	andi	r18, 0xF9	; 249
    39fe:	eb 81       	ldd	r30, Y+3	; 0x03
    3a00:	fc 81       	ldd	r31, Y+4	; 0x04
    3a02:	80 81       	ld	r24, Z
    3a04:	88 2f       	mov	r24, r24
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	88 0f       	add	r24, r24
    3a0a:	99 1f       	adc	r25, r25
    3a0c:	82 2b       	or	r24, r18
    3a0e:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ2);
    3a10:	aa e2       	ldi	r26, 0x2A	; 42
    3a12:	b0 e0       	ldi	r27, 0x00	; 0
    3a14:	ea e2       	ldi	r30, 0x2A	; 42
    3a16:	f0 e0       	ldi	r31, 0x00	; 0
    3a18:	80 81       	ld	r24, Z
    3a1a:	84 60       	ori	r24, 0x04	; 4
    3a1c:	8c 93       	st	X, r24
    3a1e:	17 c0       	rjmp	.+46     	; 0x3a4e <UART_init+0x10a>
	}else
	{

		UCSRC = (UCSRC & UART_BitData_MASK) | ( (Config_Ptr->bit_data) << 1 );
    3a20:	a0 e4       	ldi	r26, 0x40	; 64
    3a22:	b0 e0       	ldi	r27, 0x00	; 0
    3a24:	e0 e4       	ldi	r30, 0x40	; 64
    3a26:	f0 e0       	ldi	r31, 0x00	; 0
    3a28:	80 81       	ld	r24, Z
    3a2a:	28 2f       	mov	r18, r24
    3a2c:	29 7f       	andi	r18, 0xF9	; 249
    3a2e:	eb 81       	ldd	r30, Y+3	; 0x03
    3a30:	fc 81       	ldd	r31, Y+4	; 0x04
    3a32:	80 81       	ld	r24, Z
    3a34:	88 2f       	mov	r24, r24
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	88 0f       	add	r24, r24
    3a3a:	99 1f       	adc	r25, r25
    3a3c:	82 2b       	or	r24, r18
    3a3e:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
    3a40:	aa e2       	ldi	r26, 0x2A	; 42
    3a42:	b0 e0       	ldi	r27, 0x00	; 0
    3a44:	ea e2       	ldi	r30, 0x2A	; 42
    3a46:	f0 e0       	ldi	r31, 0x00	; 0
    3a48:	80 81       	ld	r24, Z
    3a4a:	8b 7f       	andi	r24, 0xFB	; 251
    3a4c:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ( (Config_Ptr->baud_rate) * 8UL))) - 1);
    3a4e:	eb 81       	ldd	r30, Y+3	; 0x03
    3a50:	fc 81       	ldd	r31, Y+4	; 0x04
    3a52:	83 81       	ldd	r24, Z+3	; 0x03
    3a54:	94 81       	ldd	r25, Z+4	; 0x04
    3a56:	a5 81       	ldd	r26, Z+5	; 0x05
    3a58:	b6 81       	ldd	r27, Z+6	; 0x06
    3a5a:	88 0f       	add	r24, r24
    3a5c:	99 1f       	adc	r25, r25
    3a5e:	aa 1f       	adc	r26, r26
    3a60:	bb 1f       	adc	r27, r27
    3a62:	88 0f       	add	r24, r24
    3a64:	99 1f       	adc	r25, r25
    3a66:	aa 1f       	adc	r26, r26
    3a68:	bb 1f       	adc	r27, r27
    3a6a:	88 0f       	add	r24, r24
    3a6c:	99 1f       	adc	r25, r25
    3a6e:	aa 1f       	adc	r26, r26
    3a70:	bb 1f       	adc	r27, r27
    3a72:	9c 01       	movw	r18, r24
    3a74:	ad 01       	movw	r20, r26
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	92 e1       	ldi	r25, 0x12	; 18
    3a7a:	aa e7       	ldi	r26, 0x7A	; 122
    3a7c:	b0 e0       	ldi	r27, 0x00	; 0
    3a7e:	bc 01       	movw	r22, r24
    3a80:	cd 01       	movw	r24, r26
    3a82:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__udivmodsi4>
    3a86:	da 01       	movw	r26, r20
    3a88:	c9 01       	movw	r24, r18
    3a8a:	01 97       	sbiw	r24, 0x01	; 1
    3a8c:	9a 83       	std	Y+2, r25	; 0x02
    3a8e:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3a90:	e0 e4       	ldi	r30, 0x40	; 64
    3a92:	f0 e0       	ldi	r31, 0x00	; 0
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	9a 81       	ldd	r25, Y+2	; 0x02
    3a98:	89 2f       	mov	r24, r25
    3a9a:	99 27       	eor	r25, r25
    3a9c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3a9e:	e9 e2       	ldi	r30, 0x29	; 41
    3aa0:	f0 e0       	ldi	r31, 0x00	; 0
    3aa2:	89 81       	ldd	r24, Y+1	; 0x01
    3aa4:	80 83       	st	Z, r24

}
    3aa6:	0f 90       	pop	r0
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	cf 91       	pop	r28
    3ab0:	df 91       	pop	r29
    3ab2:	08 95       	ret

00003ab4 <UART_init1>:
void UART_init1(uint32 baud_rate)
{
    3ab4:	df 93       	push	r29
    3ab6:	cf 93       	push	r28
    3ab8:	00 d0       	rcall	.+0      	; 0x3aba <UART_init1+0x6>
    3aba:	00 d0       	rcall	.+0      	; 0x3abc <UART_init1+0x8>
    3abc:	00 d0       	rcall	.+0      	; 0x3abe <UART_init1+0xa>
    3abe:	cd b7       	in	r28, 0x3d	; 61
    3ac0:	de b7       	in	r29, 0x3e	; 62
    3ac2:	6b 83       	std	Y+3, r22	; 0x03
    3ac4:	7c 83       	std	Y+4, r23	; 0x04
    3ac6:	8d 83       	std	Y+5, r24	; 0x05
    3ac8:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    3aca:	1a 82       	std	Y+2, r1	; 0x02
    3acc:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
		UCSRA = (1<<U2X);
    3ace:	eb e2       	ldi	r30, 0x2B	; 43
    3ad0:	f0 e0       	ldi	r31, 0x00	; 0
    3ad2:	82 e0       	ldi	r24, 0x02	; 2
    3ad4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
		UCSRB =0;
    3ad6:	ea e2       	ldi	r30, 0x2A	; 42
    3ad8:	f0 e0       	ldi	r31, 0x00	; 0
    3ada:	10 82       	st	Z, r1
		SET_BIT(UCSRB,RXEN);
    3adc:	aa e2       	ldi	r26, 0x2A	; 42
    3ade:	b0 e0       	ldi	r27, 0x00	; 0
    3ae0:	ea e2       	ldi	r30, 0x2A	; 42
    3ae2:	f0 e0       	ldi	r31, 0x00	; 0
    3ae4:	80 81       	ld	r24, Z
    3ae6:	80 61       	ori	r24, 0x10	; 16
    3ae8:	8c 93       	st	X, r24
		SET_BIT(UCSRB,TXEN);
    3aea:	aa e2       	ldi	r26, 0x2A	; 42
    3aec:	b0 e0       	ldi	r27, 0x00	; 0
    3aee:	ea e2       	ldi	r30, 0x2A	; 42
    3af0:	f0 e0       	ldi	r31, 0x00	; 0
    3af2:	80 81       	ld	r24, Z
    3af4:	88 60       	ori	r24, 0x08	; 8
    3af6:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
		UCSRC=0;
    3af8:	e0 e4       	ldi	r30, 0x40	; 64
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	10 82       	st	Z, r1
		SET_BIT(UCSRC,URSEL);
    3afe:	a0 e4       	ldi	r26, 0x40	; 64
    3b00:	b0 e0       	ldi	r27, 0x00	; 0
    3b02:	e0 e4       	ldi	r30, 0x40	; 64
    3b04:	f0 e0       	ldi	r31, 0x00	; 0
    3b06:	80 81       	ld	r24, Z
    3b08:	80 68       	ori	r24, 0x80	; 128
    3b0a:	8c 93       	st	X, r24
		/* Character Size --> 8*/
		SET_BIT(UCSRC,UCSZ0);
    3b0c:	a0 e4       	ldi	r26, 0x40	; 64
    3b0e:	b0 e0       	ldi	r27, 0x00	; 0
    3b10:	e0 e4       	ldi	r30, 0x40	; 64
    3b12:	f0 e0       	ldi	r31, 0x00	; 0
    3b14:	80 81       	ld	r24, Z
    3b16:	82 60       	ori	r24, 0x02	; 2
    3b18:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    3b1a:	a0 e4       	ldi	r26, 0x40	; 64
    3b1c:	b0 e0       	ldi	r27, 0x00	; 0
    3b1e:	e0 e4       	ldi	r30, 0x40	; 64
    3b20:	f0 e0       	ldi	r31, 0x00	; 0
    3b22:	80 81       	ld	r24, Z
    3b24:	84 60       	ori	r24, 0x04	; 4
    3b26:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    3b28:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b2c:	ad 81       	ldd	r26, Y+5	; 0x05
    3b2e:	be 81       	ldd	r27, Y+6	; 0x06
    3b30:	88 0f       	add	r24, r24
    3b32:	99 1f       	adc	r25, r25
    3b34:	aa 1f       	adc	r26, r26
    3b36:	bb 1f       	adc	r27, r27
    3b38:	88 0f       	add	r24, r24
    3b3a:	99 1f       	adc	r25, r25
    3b3c:	aa 1f       	adc	r26, r26
    3b3e:	bb 1f       	adc	r27, r27
    3b40:	88 0f       	add	r24, r24
    3b42:	99 1f       	adc	r25, r25
    3b44:	aa 1f       	adc	r26, r26
    3b46:	bb 1f       	adc	r27, r27
    3b48:	9c 01       	movw	r18, r24
    3b4a:	ad 01       	movw	r20, r26
    3b4c:	80 e0       	ldi	r24, 0x00	; 0
    3b4e:	92 e1       	ldi	r25, 0x12	; 18
    3b50:	aa e7       	ldi	r26, 0x7A	; 122
    3b52:	b0 e0       	ldi	r27, 0x00	; 0
    3b54:	bc 01       	movw	r22, r24
    3b56:	cd 01       	movw	r24, r26
    3b58:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__udivmodsi4>
    3b5c:	da 01       	movw	r26, r20
    3b5e:	c9 01       	movw	r24, r18
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	9a 83       	std	Y+2, r25	; 0x02
    3b64:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3b66:	e0 e4       	ldi	r30, 0x40	; 64
    3b68:	f0 e0       	ldi	r31, 0x00	; 0
    3b6a:	89 81       	ldd	r24, Y+1	; 0x01
    3b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6e:	89 2f       	mov	r24, r25
    3b70:	99 27       	eor	r25, r25
    3b72:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3b74:	e9 e2       	ldi	r30, 0x29	; 41
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
    3b7a:	80 83       	st	Z, r24

}
    3b7c:	26 96       	adiw	r28, 0x06	; 6
    3b7e:	0f b6       	in	r0, 0x3f	; 63
    3b80:	f8 94       	cli
    3b82:	de bf       	out	0x3e, r29	; 62
    3b84:	0f be       	out	0x3f, r0	; 63
    3b86:	cd bf       	out	0x3d, r28	; 61
    3b88:	cf 91       	pop	r28
    3b8a:	df 91       	pop	r29
    3b8c:	08 95       	ret

00003b8e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 copy_dataByte)
{
    3b8e:	df 93       	push	r29
    3b90:	cf 93       	push	r28
    3b92:	0f 92       	push	r0
    3b94:	cd b7       	in	r28, 0x3d	; 61
    3b96:	de b7       	in	r29, 0x3e	; 62
    3b98:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
    3b9a:	eb e2       	ldi	r30, 0x2B	; 43
    3b9c:	f0 e0       	ldi	r31, 0x00	; 0
    3b9e:	80 81       	ld	r24, Z
    3ba0:	88 2f       	mov	r24, r24
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	80 72       	andi	r24, 0x20	; 32
    3ba6:	90 70       	andi	r25, 0x00	; 0
    3ba8:	00 97       	sbiw	r24, 0x00	; 0
    3baa:	b9 f3       	breq	.-18     	; 0x3b9a <UART_sendByte+0xc>
	{}
	/* Put data into buffer, sends the data */
	UDR = copy_dataByte;
    3bac:	ec e2       	ldi	r30, 0x2C	; 44
    3bae:	f0 e0       	ldi	r31, 0x00	; 0
    3bb0:	89 81       	ldd	r24, Y+1	; 0x01
    3bb2:	80 83       	st	Z, r24
}
    3bb4:	0f 90       	pop	r0
    3bb6:	cf 91       	pop	r28
    3bb8:	df 91       	pop	r29
    3bba:	08 95       	ret

00003bbc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3bbc:	df 93       	push	r29
    3bbe:	cf 93       	push	r28
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
    3bc4:	eb e2       	ldi	r30, 0x2B	; 43
    3bc6:	f0 e0       	ldi	r31, 0x00	; 0
    3bc8:	80 81       	ld	r24, Z
    3bca:	88 23       	and	r24, r24
    3bcc:	dc f7       	brge	.-10     	; 0x3bc4 <UART_recieveByte+0x8>
	{}
	/* Get and return received data from buffer */
	return UDR;
    3bce:	ec e2       	ldi	r30, 0x2C	; 44
    3bd0:	f0 e0       	ldi	r31, 0x00	; 0
    3bd2:	80 81       	ld	r24, Z
}
    3bd4:	cf 91       	pop	r28
    3bd6:	df 91       	pop	r29
    3bd8:	08 95       	ret

00003bda <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *StrData)
{
    3bda:	df 93       	push	r29
    3bdc:	cf 93       	push	r28
    3bde:	00 d0       	rcall	.+0      	; 0x3be0 <UART_sendString+0x6>
    3be0:	0f 92       	push	r0
    3be2:	cd b7       	in	r28, 0x3d	; 61
    3be4:	de b7       	in	r29, 0x3e	; 62
    3be6:	9b 83       	std	Y+3, r25	; 0x03
    3be8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    3bea:	19 82       	std	Y+1, r1	; 0x01
    3bec:	0e c0       	rjmp	.+28     	; 0x3c0a <UART_sendString+0x30>
	/* Send the whole string */
	while(StrData[i] != '\0')
	{
		UART_sendByte(StrData[i]);
    3bee:	89 81       	ldd	r24, Y+1	; 0x01
    3bf0:	28 2f       	mov	r18, r24
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	e2 0f       	add	r30, r18
    3bfc:	f3 1f       	adc	r31, r19
    3bfe:	80 81       	ld	r24, Z
    3c00:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <UART_sendByte>
		i++;
    3c04:	89 81       	ldd	r24, Y+1	; 0x01
    3c06:	8f 5f       	subi	r24, 0xFF	; 255
    3c08:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *StrData)
{
	uint8 i =0;
	/* Send the whole string */
	while(StrData[i] != '\0')
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	28 2f       	mov	r18, r24
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	8a 81       	ldd	r24, Y+2	; 0x02
    3c12:	9b 81       	ldd	r25, Y+3	; 0x03
    3c14:	fc 01       	movw	r30, r24
    3c16:	e2 0f       	add	r30, r18
    3c18:	f3 1f       	adc	r31, r19
    3c1a:	80 81       	ld	r24, Z
    3c1c:	88 23       	and	r24, r24
    3c1e:	39 f7       	brne	.-50     	; 0x3bee <UART_sendString+0x14>
	{
		UART_sendByte(StrData[i]);
		i++;
	}
}
    3c20:	0f 90       	pop	r0
    3c22:	0f 90       	pop	r0
    3c24:	0f 90       	pop	r0
    3c26:	cf 91       	pop	r28
    3c28:	df 91       	pop	r29
    3c2a:	08 95       	ret

00003c2c <UART_recieveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_recieveString(uint8 *StrData)
{
    3c2c:	0f 93       	push	r16
    3c2e:	1f 93       	push	r17
    3c30:	df 93       	push	r29
    3c32:	cf 93       	push	r28
    3c34:	00 d0       	rcall	.+0      	; 0x3c36 <UART_recieveString+0xa>
    3c36:	0f 92       	push	r0
    3c38:	cd b7       	in	r28, 0x3d	; 61
    3c3a:	de b7       	in	r29, 0x3e	; 62
    3c3c:	9b 83       	std	Y+3, r25	; 0x03
    3c3e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    3c40:	19 82       	std	Y+1, r1	; 0x01
	StrData[i]= UART_recieveByte();
    3c42:	89 81       	ldd	r24, Y+1	; 0x01
    3c44:	28 2f       	mov	r18, r24
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	8a 81       	ldd	r24, Y+2	; 0x02
    3c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c4c:	8c 01       	movw	r16, r24
    3c4e:	02 0f       	add	r16, r18
    3c50:	13 1f       	adc	r17, r19
    3c52:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <UART_recieveByte>
    3c56:	f8 01       	movw	r30, r16
    3c58:	80 83       	st	Z, r24
	if(StrData[i] != '#')
    3c5a:	89 81       	ldd	r24, Y+1	; 0x01
    3c5c:	28 2f       	mov	r18, r24
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	8a 81       	ldd	r24, Y+2	; 0x02
    3c62:	9b 81       	ldd	r25, Y+3	; 0x03
    3c64:	fc 01       	movw	r30, r24
    3c66:	e2 0f       	add	r30, r18
    3c68:	f3 1f       	adc	r31, r19
    3c6a:	80 81       	ld	r24, Z
    3c6c:	83 32       	cpi	r24, 0x23	; 35
    3c6e:	79 f0       	breq	.+30     	; 0x3c8e <UART_recieveString+0x62>
	{
		i++;
    3c70:	89 81       	ldd	r24, Y+1	; 0x01
    3c72:	8f 5f       	subi	r24, 0xFF	; 255
    3c74:	89 83       	std	Y+1, r24	; 0x01
		StrData[i]= UART_recieveByte();
    3c76:	89 81       	ldd	r24, Y+1	; 0x01
    3c78:	28 2f       	mov	r18, r24
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c80:	8c 01       	movw	r16, r24
    3c82:	02 0f       	add	r16, r18
    3c84:	13 1f       	adc	r17, r19
    3c86:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <UART_recieveByte>
    3c8a:	f8 01       	movw	r30, r16
    3c8c:	80 83       	st	Z, r24
	}
	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	StrData[i] = '\0';
    3c8e:	89 81       	ldd	r24, Y+1	; 0x01
    3c90:	28 2f       	mov	r18, r24
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	8a 81       	ldd	r24, Y+2	; 0x02
    3c96:	9b 81       	ldd	r25, Y+3	; 0x03
    3c98:	fc 01       	movw	r30, r24
    3c9a:	e2 0f       	add	r30, r18
    3c9c:	f3 1f       	adc	r31, r19
    3c9e:	10 82       	st	Z, r1
}
    3ca0:	0f 90       	pop	r0
    3ca2:	0f 90       	pop	r0
    3ca4:	0f 90       	pop	r0
    3ca6:	cf 91       	pop	r28
    3ca8:	df 91       	pop	r29
    3caa:	1f 91       	pop	r17
    3cac:	0f 91       	pop	r16
    3cae:	08 95       	ret

00003cb0 <__udivmodsi4>:
    3cb0:	a1 e2       	ldi	r26, 0x21	; 33
    3cb2:	1a 2e       	mov	r1, r26
    3cb4:	aa 1b       	sub	r26, r26
    3cb6:	bb 1b       	sub	r27, r27
    3cb8:	fd 01       	movw	r30, r26
    3cba:	0d c0       	rjmp	.+26     	; 0x3cd6 <__udivmodsi4_ep>

00003cbc <__udivmodsi4_loop>:
    3cbc:	aa 1f       	adc	r26, r26
    3cbe:	bb 1f       	adc	r27, r27
    3cc0:	ee 1f       	adc	r30, r30
    3cc2:	ff 1f       	adc	r31, r31
    3cc4:	a2 17       	cp	r26, r18
    3cc6:	b3 07       	cpc	r27, r19
    3cc8:	e4 07       	cpc	r30, r20
    3cca:	f5 07       	cpc	r31, r21
    3ccc:	20 f0       	brcs	.+8      	; 0x3cd6 <__udivmodsi4_ep>
    3cce:	a2 1b       	sub	r26, r18
    3cd0:	b3 0b       	sbc	r27, r19
    3cd2:	e4 0b       	sbc	r30, r20
    3cd4:	f5 0b       	sbc	r31, r21

00003cd6 <__udivmodsi4_ep>:
    3cd6:	66 1f       	adc	r22, r22
    3cd8:	77 1f       	adc	r23, r23
    3cda:	88 1f       	adc	r24, r24
    3cdc:	99 1f       	adc	r25, r25
    3cde:	1a 94       	dec	r1
    3ce0:	69 f7       	brne	.-38     	; 0x3cbc <__udivmodsi4_loop>
    3ce2:	60 95       	com	r22
    3ce4:	70 95       	com	r23
    3ce6:	80 95       	com	r24
    3ce8:	90 95       	com	r25
    3cea:	9b 01       	movw	r18, r22
    3cec:	ac 01       	movw	r20, r24
    3cee:	bd 01       	movw	r22, r26
    3cf0:	cf 01       	movw	r24, r30
    3cf2:	08 95       	ret

00003cf4 <__prologue_saves__>:
    3cf4:	2f 92       	push	r2
    3cf6:	3f 92       	push	r3
    3cf8:	4f 92       	push	r4
    3cfa:	5f 92       	push	r5
    3cfc:	6f 92       	push	r6
    3cfe:	7f 92       	push	r7
    3d00:	8f 92       	push	r8
    3d02:	9f 92       	push	r9
    3d04:	af 92       	push	r10
    3d06:	bf 92       	push	r11
    3d08:	cf 92       	push	r12
    3d0a:	df 92       	push	r13
    3d0c:	ef 92       	push	r14
    3d0e:	ff 92       	push	r15
    3d10:	0f 93       	push	r16
    3d12:	1f 93       	push	r17
    3d14:	cf 93       	push	r28
    3d16:	df 93       	push	r29
    3d18:	cd b7       	in	r28, 0x3d	; 61
    3d1a:	de b7       	in	r29, 0x3e	; 62
    3d1c:	ca 1b       	sub	r28, r26
    3d1e:	db 0b       	sbc	r29, r27
    3d20:	0f b6       	in	r0, 0x3f	; 63
    3d22:	f8 94       	cli
    3d24:	de bf       	out	0x3e, r29	; 62
    3d26:	0f be       	out	0x3f, r0	; 63
    3d28:	cd bf       	out	0x3d, r28	; 61
    3d2a:	09 94       	ijmp

00003d2c <__epilogue_restores__>:
    3d2c:	2a 88       	ldd	r2, Y+18	; 0x12
    3d2e:	39 88       	ldd	r3, Y+17	; 0x11
    3d30:	48 88       	ldd	r4, Y+16	; 0x10
    3d32:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d34:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d36:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d38:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d3e:	b9 84       	ldd	r11, Y+9	; 0x09
    3d40:	c8 84       	ldd	r12, Y+8	; 0x08
    3d42:	df 80       	ldd	r13, Y+7	; 0x07
    3d44:	ee 80       	ldd	r14, Y+6	; 0x06
    3d46:	fd 80       	ldd	r15, Y+5	; 0x05
    3d48:	0c 81       	ldd	r16, Y+4	; 0x04
    3d4a:	1b 81       	ldd	r17, Y+3	; 0x03
    3d4c:	aa 81       	ldd	r26, Y+2	; 0x02
    3d4e:	b9 81       	ldd	r27, Y+1	; 0x01
    3d50:	ce 0f       	add	r28, r30
    3d52:	d1 1d       	adc	r29, r1
    3d54:	0f b6       	in	r0, 0x3f	; 63
    3d56:	f8 94       	cli
    3d58:	de bf       	out	0x3e, r29	; 62
    3d5a:	0f be       	out	0x3f, r0	; 63
    3d5c:	cd bf       	out	0x3d, r28	; 61
    3d5e:	ed 01       	movw	r28, r26
    3d60:	08 95       	ret

00003d62 <itoa>:
    3d62:	fb 01       	movw	r30, r22
    3d64:	9f 01       	movw	r18, r30
    3d66:	e8 94       	clt
    3d68:	42 30       	cpi	r20, 0x02	; 2
    3d6a:	c4 f0       	brlt	.+48     	; 0x3d9c <itoa+0x3a>
    3d6c:	45 32       	cpi	r20, 0x25	; 37
    3d6e:	b4 f4       	brge	.+44     	; 0x3d9c <itoa+0x3a>
    3d70:	4a 30       	cpi	r20, 0x0A	; 10
    3d72:	29 f4       	brne	.+10     	; 0x3d7e <itoa+0x1c>
    3d74:	97 fb       	bst	r25, 7
    3d76:	1e f4       	brtc	.+6      	; 0x3d7e <itoa+0x1c>
    3d78:	90 95       	com	r25
    3d7a:	81 95       	neg	r24
    3d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d7e:	64 2f       	mov	r22, r20
    3d80:	77 27       	eor	r23, r23
    3d82:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__udivmodhi4>
    3d86:	80 5d       	subi	r24, 0xD0	; 208
    3d88:	8a 33       	cpi	r24, 0x3A	; 58
    3d8a:	0c f0       	brlt	.+2      	; 0x3d8e <itoa+0x2c>
    3d8c:	89 5d       	subi	r24, 0xD9	; 217
    3d8e:	81 93       	st	Z+, r24
    3d90:	cb 01       	movw	r24, r22
    3d92:	00 97       	sbiw	r24, 0x00	; 0
    3d94:	a1 f7       	brne	.-24     	; 0x3d7e <itoa+0x1c>
    3d96:	16 f4       	brtc	.+4      	; 0x3d9c <itoa+0x3a>
    3d98:	5d e2       	ldi	r21, 0x2D	; 45
    3d9a:	51 93       	st	Z+, r21
    3d9c:	10 82       	st	Z, r1
    3d9e:	c9 01       	movw	r24, r18
    3da0:	0c 94 d2 1e 	jmp	0x3da4	; 0x3da4 <strrev>

00003da4 <strrev>:
    3da4:	dc 01       	movw	r26, r24
    3da6:	fc 01       	movw	r30, r24
    3da8:	67 2f       	mov	r22, r23
    3daa:	71 91       	ld	r23, Z+
    3dac:	77 23       	and	r23, r23
    3dae:	e1 f7       	brne	.-8      	; 0x3da8 <strrev+0x4>
    3db0:	32 97       	sbiw	r30, 0x02	; 2
    3db2:	04 c0       	rjmp	.+8      	; 0x3dbc <strrev+0x18>
    3db4:	7c 91       	ld	r23, X
    3db6:	6d 93       	st	X+, r22
    3db8:	70 83       	st	Z, r23
    3dba:	62 91       	ld	r22, -Z
    3dbc:	ae 17       	cp	r26, r30
    3dbe:	bf 07       	cpc	r27, r31
    3dc0:	c8 f3       	brcs	.-14     	; 0x3db4 <strrev+0x10>
    3dc2:	08 95       	ret

00003dc4 <__udivmodhi4>:
    3dc4:	aa 1b       	sub	r26, r26
    3dc6:	bb 1b       	sub	r27, r27
    3dc8:	51 e1       	ldi	r21, 0x11	; 17
    3dca:	07 c0       	rjmp	.+14     	; 0x3dda <__udivmodhi4_ep>

00003dcc <__udivmodhi4_loop>:
    3dcc:	aa 1f       	adc	r26, r26
    3dce:	bb 1f       	adc	r27, r27
    3dd0:	a6 17       	cp	r26, r22
    3dd2:	b7 07       	cpc	r27, r23
    3dd4:	10 f0       	brcs	.+4      	; 0x3dda <__udivmodhi4_ep>
    3dd6:	a6 1b       	sub	r26, r22
    3dd8:	b7 0b       	sbc	r27, r23

00003dda <__udivmodhi4_ep>:
    3dda:	88 1f       	adc	r24, r24
    3ddc:	99 1f       	adc	r25, r25
    3dde:	5a 95       	dec	r21
    3de0:	a9 f7       	brne	.-22     	; 0x3dcc <__udivmodhi4_loop>
    3de2:	80 95       	com	r24
    3de4:	90 95       	com	r25
    3de6:	bc 01       	movw	r22, r24
    3de8:	cd 01       	movw	r24, r26
    3dea:	08 95       	ret

00003dec <_exit>:
    3dec:	f8 94       	cli

00003dee <__stop_program>:
    3dee:	ff cf       	rjmp	.-2      	; 0x3dee <__stop_program>
