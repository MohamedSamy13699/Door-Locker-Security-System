
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000576c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  0000576c  00005800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800196  00800196  00005936  2**0
                  ALLOC
  3 .stab         00004a04  00000000  00000000  00005938  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013ac  00000000  00000000  0000a33c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b998  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d5e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e4cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f27c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f669  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fe37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 07 28 	jmp	0x500e	; 0x500e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 da 27 	jmp	0x4fb4	; 0x4fb4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 39       	cpi	r26, 0x9D	; 157
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 b4 2b 	jmp	0x5768	; 0x5768 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 38 2b 	jmp	0x5670	; 0x5670 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 54 2b 	jmp	0x56a8	; 0x56a8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 44 2b 	jmp	0x5688	; 0x5688 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 60 2b 	jmp	0x56c0	; 0x56c0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 44 2b 	jmp	0x5688	; 0x5688 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 60 2b 	jmp	0x56c0	; 0x56c0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 38 2b 	jmp	0x5670	; 0x5670 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 54 2b 	jmp	0x56a8	; 0x56a8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 44 2b 	jmp	0x5688	; 0x5688 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 60 2b 	jmp	0x56c0	; 0x56c0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 44 2b 	jmp	0x5688	; 0x5688 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 60 2b 	jmp	0x56c0	; 0x56c0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 44 2b 	jmp	0x5688	; 0x5688 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 60 2b 	jmp	0x56c0	; 0x56c0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 64 2b 	jmp	0x56c8	; 0x56c8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

/*******************************************************************************
 *                             Application                                     *
 *******************************************************************************/
int main()
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c5 5e       	subi	r28, 0xE5	; 229
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61

/*******************************************************************************
 *                               LOCAL variables                               *
 *******************************************************************************/
	uint8 Local_CheckPassFlag=0xff;
     b60:	fe 01       	movw	r30, r28
     b62:	eb 51       	subi	r30, 0x1B	; 27
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	80 83       	st	Z, r24
	uint8 Local_Operation = 0;
     b6a:	fe 01       	movw	r30, r28
     b6c:	ec 51       	subi	r30, 0x1C	; 28
     b6e:	ff 4f       	sbci	r31, 0xFF	; 255
     b70:	10 82       	st	Z, r1
	uint8 local_flag = 0;
     b72:	fe 01       	movw	r30, r28
     b74:	ed 51       	subi	r30, 0x1D	; 29
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	10 82       	st	Z, r1
	uint8 Step1_Flag = 1;
     b7a:	fe 01       	movw	r30, r28
     b7c:	ee 51       	subi	r30, 0x1E	; 30
     b7e:	ff 4f       	sbci	r31, 0xFF	; 255
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	80 83       	st	Z, r24
	uint8 Step2_Flag = 1;
     b84:	fe 01       	movw	r30, r28
     b86:	ef 51       	subi	r30, 0x1F	; 31
     b88:	ff 4f       	sbci	r31, 0xFF	; 255
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	80 83       	st	Z, r24

	/* Enable the Global Interrupt */
	Global_interruptEnable();
     b8e:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <Global_interruptEnable>
	/*Call initialization function of LCD driver*/
	LCD_init();
     b92:	0e 94 af 22 	call	0x455e	; 0x455e <LCD_init>
	/*Call initialization function of UART driver*/
	UART_init(&uart);
     b96:	83 e8       	ldi	r24, 0x83	; 131
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 60 29 	call	0x52c0	; 0x52c0 <UART_init>
	/*Call initialization function of TIMER1 driver*/
	Timer1_init(&Timer1_configCTCMode);
     b9e:	8a e8       	ldi	r24, 0x8A	; 138
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	0e 94 34 28 	call	0x5068	; 0x5068 <Timer1_init>
	/*CallBack Function  of Timer1  of CTC Mode*/
	Timer1_setCallBack(CTC_Mode,&A_DLSS_VoidGenerateSecond);
     ba6:	25 e5       	ldi	r18, 0x55	; 85
     ba8:	3a e1       	ldi	r19, 0x1A	; 26
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	b9 01       	movw	r22, r18
     bae:	0e 94 79 28 	call	0x50f2	; 0x50f2 <Timer1_setCallBack>
	/*CallBack Function  of Timer1  of Normal Mode*/
	Timer1_setCallBack(Normal_Mode,&A_DLSS_VoidGenerateMinute);
     bb2:	22 ea       	ldi	r18, 0xA2	; 162
     bb4:	3d e1       	ldi	r19, 0x1D	; 29
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	b9 01       	movw	r22, r18
     bba:	0e 94 79 28 	call	0x50f2	; 0x50f2 <Timer1_setCallBack>
	LCD_clearScreen();
     bbe:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
	LCD_displayString("   Welcome to ");
     bc2:	80 e6       	ldi	r24, 0x60	; 96
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
     bca:	fe 01       	movw	r30, r28
     bcc:	e3 52       	subi	r30, 0x23	; 35
     bce:	ff 4f       	sbci	r31, 0xFF	; 255
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	aa ef       	ldi	r26, 0xFA	; 250
     bd6:	b3 e4       	ldi	r27, 0x43	; 67
     bd8:	80 83       	st	Z, r24
     bda:	91 83       	std	Z+1, r25	; 0x01
     bdc:	a2 83       	std	Z+2, r26	; 0x02
     bde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     be0:	8e 01       	movw	r16, r28
     be2:	07 52       	subi	r16, 0x27	; 39
     be4:	1f 4f       	sbci	r17, 0xFF	; 255
     be6:	fe 01       	movw	r30, r28
     be8:	e3 52       	subi	r30, 0x23	; 35
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	60 81       	ld	r22, Z
     bee:	71 81       	ldd	r23, Z+1	; 0x01
     bf0:	82 81       	ldd	r24, Z+2	; 0x02
     bf2:	93 81       	ldd	r25, Z+3	; 0x03
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	4a ef       	ldi	r20, 0xFA	; 250
     bfa:	54 e4       	ldi	r21, 0x44	; 68
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	f8 01       	movw	r30, r16
     c06:	80 83       	st	Z, r24
     c08:	91 83       	std	Z+1, r25	; 0x01
     c0a:	a2 83       	std	Z+2, r26	; 0x02
     c0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c0e:	fe 01       	movw	r30, r28
     c10:	e7 52       	subi	r30, 0x27	; 39
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	60 81       	ld	r22, Z
     c16:	71 81       	ldd	r23, Z+1	; 0x01
     c18:	82 81       	ldd	r24, Z+2	; 0x02
     c1a:	93 81       	ldd	r25, Z+3	; 0x03
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	40 e8       	ldi	r20, 0x80	; 128
     c22:	5f e3       	ldi	r21, 0x3F	; 63
     c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c28:	88 23       	and	r24, r24
     c2a:	44 f4       	brge	.+16     	; 0xc3c <main+0xf6>
		__ticks = 1;
     c2c:	fe 01       	movw	r30, r28
     c2e:	e9 52       	subi	r30, 0x29	; 41
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	91 83       	std	Z+1, r25	; 0x01
     c38:	80 83       	st	Z, r24
     c3a:	64 c0       	rjmp	.+200    	; 0xd04 <main+0x1be>
	else if (__tmp > 65535)
     c3c:	fe 01       	movw	r30, r28
     c3e:	e7 52       	subi	r30, 0x27	; 39
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	60 81       	ld	r22, Z
     c44:	71 81       	ldd	r23, Z+1	; 0x01
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	3f ef       	ldi	r19, 0xFF	; 255
     c4e:	4f e7       	ldi	r20, 0x7F	; 127
     c50:	57 e4       	ldi	r21, 0x47	; 71
     c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c56:	18 16       	cp	r1, r24
     c58:	0c f0       	brlt	.+2      	; 0xc5c <main+0x116>
     c5a:	43 c0       	rjmp	.+134    	; 0xce2 <main+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c5c:	fe 01       	movw	r30, r28
     c5e:	e3 52       	subi	r30, 0x23	; 35
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	60 81       	ld	r22, Z
     c64:	71 81       	ldd	r23, Z+1	; 0x01
     c66:	82 81       	ldd	r24, Z+2	; 0x02
     c68:	93 81       	ldd	r25, Z+3	; 0x03
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e2       	ldi	r20, 0x20	; 32
     c70:	51 e4       	ldi	r21, 0x41	; 65
     c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	8e 01       	movw	r16, r28
     c7c:	09 52       	subi	r16, 0x29	; 41
     c7e:	1f 4f       	sbci	r17, 0xFF	; 255
     c80:	bc 01       	movw	r22, r24
     c82:	cd 01       	movw	r24, r26
     c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	f8 01       	movw	r30, r16
     c8e:	91 83       	std	Z+1, r25	; 0x01
     c90:	80 83       	st	Z, r24
     c92:	1f c0       	rjmp	.+62     	; 0xcd2 <main+0x18c>
     c94:	fe 01       	movw	r30, r28
     c96:	eb 52       	subi	r30, 0x2B	; 43
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	88 ec       	ldi	r24, 0xC8	; 200
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	91 83       	std	Z+1, r25	; 0x01
     ca0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ca2:	fe 01       	movw	r30, r28
     ca4:	eb 52       	subi	r30, 0x2B	; 43
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	80 81       	ld	r24, Z
     caa:	91 81       	ldd	r25, Z+1	; 0x01
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <main+0x166>
     cb0:	fe 01       	movw	r30, r28
     cb2:	eb 52       	subi	r30, 0x2B	; 43
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cba:	de 01       	movw	r26, r28
     cbc:	a9 52       	subi	r26, 0x29	; 41
     cbe:	bf 4f       	sbci	r27, 0xFF	; 255
     cc0:	fe 01       	movw	r30, r28
     cc2:	e9 52       	subi	r30, 0x29	; 41
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	80 81       	ld	r24, Z
     cc8:	91 81       	ldd	r25, Z+1	; 0x01
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	11 96       	adiw	r26, 0x01	; 1
     cce:	9c 93       	st	X, r25
     cd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd2:	fe 01       	movw	r30, r28
     cd4:	e9 52       	subi	r30, 0x29	; 41
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	80 81       	ld	r24, Z
     cda:	91 81       	ldd	r25, Z+1	; 0x01
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	d1 f6       	brne	.-76     	; 0xc94 <main+0x14e>
     ce0:	27 c0       	rjmp	.+78     	; 0xd30 <main+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce2:	8e 01       	movw	r16, r28
     ce4:	09 52       	subi	r16, 0x29	; 41
     ce6:	1f 4f       	sbci	r17, 0xFF	; 255
     ce8:	fe 01       	movw	r30, r28
     cea:	e7 52       	subi	r30, 0x27	; 39
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	60 81       	ld	r22, Z
     cf0:	71 81       	ldd	r23, Z+1	; 0x01
     cf2:	82 81       	ldd	r24, Z+2	; 0x02
     cf4:	93 81       	ldd	r25, Z+3	; 0x03
     cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	f8 01       	movw	r30, r16
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	80 83       	st	Z, r24
     d04:	de 01       	movw	r26, r28
     d06:	ad 52       	subi	r26, 0x2D	; 45
     d08:	bf 4f       	sbci	r27, 0xFF	; 255
     d0a:	fe 01       	movw	r30, r28
     d0c:	e9 52       	subi	r30, 0x29	; 41
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	80 81       	ld	r24, Z
     d12:	91 81       	ldd	r25, Z+1	; 0x01
     d14:	8d 93       	st	X+, r24
     d16:	9c 93       	st	X, r25
     d18:	fe 01       	movw	r30, r28
     d1a:	ed 52       	subi	r30, 0x2D	; 45
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	80 81       	ld	r24, Z
     d20:	91 81       	ldd	r25, Z+1	; 0x01
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <main+0x1dc>
     d26:	fe 01       	movw	r30, r28
     d28:	ed 52       	subi	r30, 0x2D	; 45
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	80 83       	st	Z, r24
	_delay_ms(500);
	LCD_clearScreen();
     d30:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
	LCD_displayString("Door Locker");
     d34:	8f e6       	ldi	r24, 0x6F	; 111
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
	LCD_moveCursor(1,0);
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <LCD_moveCursor>
	LCD_displayString("Security System");
     d44:	8b e7       	ldi	r24, 0x7B	; 123
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
     d4c:	fe 01       	movw	r30, r28
     d4e:	e1 53       	subi	r30, 0x31	; 49
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	aa e7       	ldi	r26, 0x7A	; 122
     d58:	b4 e4       	ldi	r27, 0x44	; 68
     d5a:	80 83       	st	Z, r24
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	a2 83       	std	Z+2, r26	; 0x02
     d60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d62:	8e 01       	movw	r16, r28
     d64:	05 53       	subi	r16, 0x35	; 53
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	fe 01       	movw	r30, r28
     d6a:	e1 53       	subi	r30, 0x31	; 49
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	60 81       	ld	r22, Z
     d70:	71 81       	ldd	r23, Z+1	; 0x01
     d72:	82 81       	ldd	r24, Z+2	; 0x02
     d74:	93 81       	ldd	r25, Z+3	; 0x03
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	4a ef       	ldi	r20, 0xFA	; 250
     d7c:	54 e4       	ldi	r21, 0x44	; 68
     d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	f8 01       	movw	r30, r16
     d88:	80 83       	st	Z, r24
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	a2 83       	std	Z+2, r26	; 0x02
     d8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d90:	fe 01       	movw	r30, r28
     d92:	e5 53       	subi	r30, 0x35	; 53
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	60 81       	ld	r22, Z
     d98:	71 81       	ldd	r23, Z+1	; 0x01
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e8       	ldi	r20, 0x80	; 128
     da4:	5f e3       	ldi	r21, 0x3F	; 63
     da6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     daa:	88 23       	and	r24, r24
     dac:	44 f4       	brge	.+16     	; 0xdbe <main+0x278>
		__ticks = 1;
     dae:	fe 01       	movw	r30, r28
     db0:	e7 53       	subi	r30, 0x37	; 55
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	91 83       	std	Z+1, r25	; 0x01
     dba:	80 83       	st	Z, r24
     dbc:	64 c0       	rjmp	.+200    	; 0xe86 <main+0x340>
	else if (__tmp > 65535)
     dbe:	fe 01       	movw	r30, r28
     dc0:	e5 53       	subi	r30, 0x35	; 53
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	60 81       	ld	r22, Z
     dc6:	71 81       	ldd	r23, Z+1	; 0x01
     dc8:	82 81       	ldd	r24, Z+2	; 0x02
     dca:	93 81       	ldd	r25, Z+3	; 0x03
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	3f ef       	ldi	r19, 0xFF	; 255
     dd0:	4f e7       	ldi	r20, 0x7F	; 127
     dd2:	57 e4       	ldi	r21, 0x47	; 71
     dd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dd8:	18 16       	cp	r1, r24
     dda:	0c f0       	brlt	.+2      	; 0xdde <main+0x298>
     ddc:	43 c0       	rjmp	.+134    	; 0xe64 <main+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dde:	fe 01       	movw	r30, r28
     de0:	e1 53       	subi	r30, 0x31	; 49
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	60 81       	ld	r22, Z
     de6:	71 81       	ldd	r23, Z+1	; 0x01
     de8:	82 81       	ldd	r24, Z+2	; 0x02
     dea:	93 81       	ldd	r25, Z+3	; 0x03
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e2       	ldi	r20, 0x20	; 32
     df2:	51 e4       	ldi	r21, 0x41	; 65
     df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	8e 01       	movw	r16, r28
     dfe:	07 53       	subi	r16, 0x37	; 55
     e00:	1f 4f       	sbci	r17, 0xFF	; 255
     e02:	bc 01       	movw	r22, r24
     e04:	cd 01       	movw	r24, r26
     e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	f8 01       	movw	r30, r16
     e10:	91 83       	std	Z+1, r25	; 0x01
     e12:	80 83       	st	Z, r24
     e14:	1f c0       	rjmp	.+62     	; 0xe54 <main+0x30e>
     e16:	fe 01       	movw	r30, r28
     e18:	e9 53       	subi	r30, 0x39	; 57
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	88 ec       	ldi	r24, 0xC8	; 200
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	91 83       	std	Z+1, r25	; 0x01
     e22:	80 83       	st	Z, r24
     e24:	fe 01       	movw	r30, r28
     e26:	e9 53       	subi	r30, 0x39	; 57
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <main+0x2e8>
     e32:	fe 01       	movw	r30, r28
     e34:	e9 53       	subi	r30, 0x39	; 57
     e36:	ff 4f       	sbci	r31, 0xFF	; 255
     e38:	91 83       	std	Z+1, r25	; 0x01
     e3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3c:	de 01       	movw	r26, r28
     e3e:	a7 53       	subi	r26, 0x37	; 55
     e40:	bf 4f       	sbci	r27, 0xFF	; 255
     e42:	fe 01       	movw	r30, r28
     e44:	e7 53       	subi	r30, 0x37	; 55
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	11 96       	adiw	r26, 0x01	; 1
     e50:	9c 93       	st	X, r25
     e52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e54:	fe 01       	movw	r30, r28
     e56:	e7 53       	subi	r30, 0x37	; 55
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	80 81       	ld	r24, Z
     e5c:	91 81       	ldd	r25, Z+1	; 0x01
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	d1 f6       	brne	.-76     	; 0xe16 <main+0x2d0>
     e62:	d9 c3       	rjmp	.+1970   	; 0x1616 <main+0xad0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e64:	8e 01       	movw	r16, r28
     e66:	07 53       	subi	r16, 0x37	; 55
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
     e6a:	fe 01       	movw	r30, r28
     e6c:	e5 53       	subi	r30, 0x35	; 53
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	60 81       	ld	r22, Z
     e72:	71 81       	ldd	r23, Z+1	; 0x01
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	93 81       	ldd	r25, Z+3	; 0x03
     e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	f8 01       	movw	r30, r16
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	80 83       	st	Z, r24
     e86:	de 01       	movw	r26, r28
     e88:	ab 53       	subi	r26, 0x3B	; 59
     e8a:	bf 4f       	sbci	r27, 0xFF	; 255
     e8c:	fe 01       	movw	r30, r28
     e8e:	e7 53       	subi	r30, 0x37	; 55
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	11 96       	adiw	r26, 0x01	; 1
     e98:	9c 93       	st	X, r25
     e9a:	8e 93       	st	-X, r24
     e9c:	fe 01       	movw	r30, r28
     e9e:	eb 53       	subi	r30, 0x3B	; 59
     ea0:	ff 4f       	sbci	r31, 0xFF	; 255
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <main+0x360>
     eaa:	fe 01       	movw	r30, r28
     eac:	eb 53       	subi	r30, 0x3B	; 59
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	80 83       	st	Z, r24
     eb4:	b0 c3       	rjmp	.+1888   	; 0x1616 <main+0xad0>
/*********************************************************************************************************/

		while(Step1_Flag)
		{
			/*Call A_DLSS_VoidTakePassword_1 to take the pass for first time */
			A_DLSS_VoidTakePassword_1();
     eb6:	0e 94 f7 10 	call	0x21ee	; 0x21ee <A_DLSS_VoidTakePassword_1>
			/*Call A_DLSS_VoidTakePassword_1 to take the pass for second time */
			A_DLSS_VoidTakePassword_2();
     eba:	0e 94 86 12 	call	0x250c	; 0x250c <A_DLSS_VoidTakePassword_2>
			/* Receive the check password flag  */
			Local_CheckPassFlag = UART_recieveByte();
     ebe:	0e 94 9c 2a 	call	0x5538	; 0x5538 <UART_recieveByte>
     ec2:	fe 01       	movw	r30, r28
     ec4:	eb 51       	subi	r30, 0x1B	; 27
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	80 83       	st	Z, r24
     eca:	fe 01       	movw	r30, r28
     ecc:	ef 53       	subi	r30, 0x3F	; 63
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	a8 e4       	ldi	r26, 0x48	; 72
     ed6:	b2 e4       	ldi	r27, 0x42	; 66
     ed8:	80 83       	st	Z, r24
     eda:	91 83       	std	Z+1, r25	; 0x01
     edc:	a2 83       	std	Z+2, r26	; 0x02
     ede:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee0:	8e 01       	movw	r16, r28
     ee2:	03 54       	subi	r16, 0x43	; 67
     ee4:	1f 4f       	sbci	r17, 0xFF	; 255
     ee6:	fe 01       	movw	r30, r28
     ee8:	ef 53       	subi	r30, 0x3F	; 63
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	60 81       	ld	r22, Z
     eee:	71 81       	ldd	r23, Z+1	; 0x01
     ef0:	82 81       	ldd	r24, Z+2	; 0x02
     ef2:	93 81       	ldd	r25, Z+3	; 0x03
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	4a ef       	ldi	r20, 0xFA	; 250
     efa:	54 e4       	ldi	r21, 0x44	; 68
     efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	f8 01       	movw	r30, r16
     f06:	80 83       	st	Z, r24
     f08:	91 83       	std	Z+1, r25	; 0x01
     f0a:	a2 83       	std	Z+2, r26	; 0x02
     f0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f0e:	fe 01       	movw	r30, r28
     f10:	e3 54       	subi	r30, 0x43	; 67
     f12:	ff 4f       	sbci	r31, 0xFF	; 255
     f14:	60 81       	ld	r22, Z
     f16:	71 81       	ldd	r23, Z+1	; 0x01
     f18:	82 81       	ldd	r24, Z+2	; 0x02
     f1a:	93 81       	ldd	r25, Z+3	; 0x03
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e8       	ldi	r20, 0x80	; 128
     f22:	5f e3       	ldi	r21, 0x3F	; 63
     f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f28:	88 23       	and	r24, r24
     f2a:	44 f4       	brge	.+16     	; 0xf3c <main+0x3f6>
		__ticks = 1;
     f2c:	fe 01       	movw	r30, r28
     f2e:	e5 54       	subi	r30, 0x45	; 69
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	80 83       	st	Z, r24
     f3a:	64 c0       	rjmp	.+200    	; 0x1004 <main+0x4be>
	else if (__tmp > 65535)
     f3c:	fe 01       	movw	r30, r28
     f3e:	e3 54       	subi	r30, 0x43	; 67
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	60 81       	ld	r22, Z
     f44:	71 81       	ldd	r23, Z+1	; 0x01
     f46:	82 81       	ldd	r24, Z+2	; 0x02
     f48:	93 81       	ldd	r25, Z+3	; 0x03
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	3f ef       	ldi	r19, 0xFF	; 255
     f4e:	4f e7       	ldi	r20, 0x7F	; 127
     f50:	57 e4       	ldi	r21, 0x47	; 71
     f52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f56:	18 16       	cp	r1, r24
     f58:	0c f0       	brlt	.+2      	; 0xf5c <main+0x416>
     f5a:	43 c0       	rjmp	.+134    	; 0xfe2 <main+0x49c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5c:	fe 01       	movw	r30, r28
     f5e:	ef 53       	subi	r30, 0x3F	; 63
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	60 81       	ld	r22, Z
     f64:	71 81       	ldd	r23, Z+1	; 0x01
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	93 81       	ldd	r25, Z+3	; 0x03
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e2       	ldi	r20, 0x20	; 32
     f70:	51 e4       	ldi	r21, 0x41	; 65
     f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	8e 01       	movw	r16, r28
     f7c:	05 54       	subi	r16, 0x45	; 69
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	bc 01       	movw	r22, r24
     f82:	cd 01       	movw	r24, r26
     f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	f8 01       	movw	r30, r16
     f8e:	91 83       	std	Z+1, r25	; 0x01
     f90:	80 83       	st	Z, r24
     f92:	1f c0       	rjmp	.+62     	; 0xfd2 <main+0x48c>
     f94:	fe 01       	movw	r30, r28
     f96:	e7 54       	subi	r30, 0x47	; 71
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	88 ec       	ldi	r24, 0xC8	; 200
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	91 83       	std	Z+1, r25	; 0x01
     fa0:	80 83       	st	Z, r24
     fa2:	fe 01       	movw	r30, r28
     fa4:	e7 54       	subi	r30, 0x47	; 71
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	80 81       	ld	r24, Z
     faa:	91 81       	ldd	r25, Z+1	; 0x01
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <main+0x466>
     fb0:	fe 01       	movw	r30, r28
     fb2:	e7 54       	subi	r30, 0x47	; 71
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	91 83       	std	Z+1, r25	; 0x01
     fb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fba:	de 01       	movw	r26, r28
     fbc:	a5 54       	subi	r26, 0x45	; 69
     fbe:	bf 4f       	sbci	r27, 0xFF	; 255
     fc0:	fe 01       	movw	r30, r28
     fc2:	e5 54       	subi	r30, 0x45	; 69
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	11 96       	adiw	r26, 0x01	; 1
     fce:	9c 93       	st	X, r25
     fd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd2:	fe 01       	movw	r30, r28
     fd4:	e5 54       	subi	r30, 0x45	; 69
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	80 81       	ld	r24, Z
     fda:	91 81       	ldd	r25, Z+1	; 0x01
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	d1 f6       	brne	.-76     	; 0xf94 <main+0x44e>
     fe0:	28 c0       	rjmp	.+80     	; 0x1032 <main+0x4ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe2:	8e 01       	movw	r16, r28
     fe4:	05 54       	subi	r16, 0x45	; 69
     fe6:	1f 4f       	sbci	r17, 0xFF	; 255
     fe8:	fe 01       	movw	r30, r28
     fea:	e3 54       	subi	r30, 0x43	; 67
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	60 81       	ld	r22, Z
     ff0:	71 81       	ldd	r23, Z+1	; 0x01
     ff2:	82 81       	ldd	r24, Z+2	; 0x02
     ff4:	93 81       	ldd	r25, Z+3	; 0x03
     ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	f8 01       	movw	r30, r16
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	80 83       	st	Z, r24
    1004:	de 01       	movw	r26, r28
    1006:	a9 54       	subi	r26, 0x49	; 73
    1008:	bf 4f       	sbci	r27, 0xFF	; 255
    100a:	fe 01       	movw	r30, r28
    100c:	e5 54       	subi	r30, 0x45	; 69
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 81       	ld	r24, Z
    1012:	91 81       	ldd	r25, Z+1	; 0x01
    1014:	11 96       	adiw	r26, 0x01	; 1
    1016:	9c 93       	st	X, r25
    1018:	8e 93       	st	-X, r24
    101a:	fe 01       	movw	r30, r28
    101c:	e9 54       	subi	r30, 0x49	; 73
    101e:	ff 4f       	sbci	r31, 0xFF	; 255
    1020:	80 81       	ld	r24, Z
    1022:	91 81       	ldd	r25, Z+1	; 0x01
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <main+0x4de>
    1028:	fe 01       	movw	r30, r28
    102a:	e9 54       	subi	r30, 0x49	; 73
    102c:	ff 4f       	sbci	r31, 0xFF	; 255
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	80 83       	st	Z, r24
			_delay_ms(50);
			/* if the two passwords matched */
			if(Local_CheckPassFlag == PASS_MATCHED)
    1032:	fe 01       	movw	r30, r28
    1034:	eb 51       	subi	r30, 0x1B	; 27
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	80 81       	ld	r24, Z
    103a:	80 39       	cpi	r24, 0x90	; 144
    103c:	09 f0       	breq	.+2      	; 0x1040 <main+0x4fa>
    103e:	77 c1       	rjmp	.+750    	; 0x132e <main+0x7e8>
			{
				LCD_clearScreen();
    1040:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
    1044:	fe 01       	movw	r30, r28
    1046:	ed 54       	subi	r30, 0x4D	; 77
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a0 ea       	ldi	r26, 0xA0	; 160
    1050:	b1 e4       	ldi	r27, 0x41	; 65
    1052:	80 83       	st	Z, r24
    1054:	91 83       	std	Z+1, r25	; 0x01
    1056:	a2 83       	std	Z+2, r26	; 0x02
    1058:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105a:	8e 01       	movw	r16, r28
    105c:	01 55       	subi	r16, 0x51	; 81
    105e:	1f 4f       	sbci	r17, 0xFF	; 255
    1060:	fe 01       	movw	r30, r28
    1062:	ed 54       	subi	r30, 0x4D	; 77
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	60 81       	ld	r22, Z
    1068:	71 81       	ldd	r23, Z+1	; 0x01
    106a:	82 81       	ldd	r24, Z+2	; 0x02
    106c:	93 81       	ldd	r25, Z+3	; 0x03
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	4a ef       	ldi	r20, 0xFA	; 250
    1074:	54 e4       	ldi	r21, 0x44	; 68
    1076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	f8 01       	movw	r30, r16
    1080:	80 83       	st	Z, r24
    1082:	91 83       	std	Z+1, r25	; 0x01
    1084:	a2 83       	std	Z+2, r26	; 0x02
    1086:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1088:	fe 01       	movw	r30, r28
    108a:	e1 55       	subi	r30, 0x51	; 81
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	60 81       	ld	r22, Z
    1090:	71 81       	ldd	r23, Z+1	; 0x01
    1092:	82 81       	ldd	r24, Z+2	; 0x02
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e8       	ldi	r20, 0x80	; 128
    109c:	5f e3       	ldi	r21, 0x3F	; 63
    109e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10a2:	88 23       	and	r24, r24
    10a4:	44 f4       	brge	.+16     	; 0x10b6 <main+0x570>
		__ticks = 1;
    10a6:	fe 01       	movw	r30, r28
    10a8:	e3 55       	subi	r30, 0x53	; 83
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	91 83       	std	Z+1, r25	; 0x01
    10b2:	80 83       	st	Z, r24
    10b4:	64 c0       	rjmp	.+200    	; 0x117e <main+0x638>
	else if (__tmp > 65535)
    10b6:	fe 01       	movw	r30, r28
    10b8:	e1 55       	subi	r30, 0x51	; 81
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	60 81       	ld	r22, Z
    10be:	71 81       	ldd	r23, Z+1	; 0x01
    10c0:	82 81       	ldd	r24, Z+2	; 0x02
    10c2:	93 81       	ldd	r25, Z+3	; 0x03
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	3f ef       	ldi	r19, 0xFF	; 255
    10c8:	4f e7       	ldi	r20, 0x7F	; 127
    10ca:	57 e4       	ldi	r21, 0x47	; 71
    10cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10d0:	18 16       	cp	r1, r24
    10d2:	0c f0       	brlt	.+2      	; 0x10d6 <main+0x590>
    10d4:	43 c0       	rjmp	.+134    	; 0x115c <main+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d6:	fe 01       	movw	r30, r28
    10d8:	ed 54       	subi	r30, 0x4D	; 77
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	60 81       	ld	r22, Z
    10de:	71 81       	ldd	r23, Z+1	; 0x01
    10e0:	82 81       	ldd	r24, Z+2	; 0x02
    10e2:	93 81       	ldd	r25, Z+3	; 0x03
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e2       	ldi	r20, 0x20	; 32
    10ea:	51 e4       	ldi	r21, 0x41	; 65
    10ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	8e 01       	movw	r16, r28
    10f6:	03 55       	subi	r16, 0x53	; 83
    10f8:	1f 4f       	sbci	r17, 0xFF	; 255
    10fa:	bc 01       	movw	r22, r24
    10fc:	cd 01       	movw	r24, r26
    10fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	f8 01       	movw	r30, r16
    1108:	91 83       	std	Z+1, r25	; 0x01
    110a:	80 83       	st	Z, r24
    110c:	1f c0       	rjmp	.+62     	; 0x114c <main+0x606>
    110e:	fe 01       	movw	r30, r28
    1110:	e5 55       	subi	r30, 0x55	; 85
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	88 ec       	ldi	r24, 0xC8	; 200
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	80 83       	st	Z, r24
    111c:	fe 01       	movw	r30, r28
    111e:	e5 55       	subi	r30, 0x55	; 85
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	80 81       	ld	r24, Z
    1124:	91 81       	ldd	r25, Z+1	; 0x01
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <main+0x5e0>
    112a:	fe 01       	movw	r30, r28
    112c:	e5 55       	subi	r30, 0x55	; 85
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	91 83       	std	Z+1, r25	; 0x01
    1132:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1134:	de 01       	movw	r26, r28
    1136:	a3 55       	subi	r26, 0x53	; 83
    1138:	bf 4f       	sbci	r27, 0xFF	; 255
    113a:	fe 01       	movw	r30, r28
    113c:	e3 55       	subi	r30, 0x53	; 83
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	80 81       	ld	r24, Z
    1142:	91 81       	ldd	r25, Z+1	; 0x01
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	11 96       	adiw	r26, 0x01	; 1
    1148:	9c 93       	st	X, r25
    114a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    114c:	fe 01       	movw	r30, r28
    114e:	e3 55       	subi	r30, 0x53	; 83
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	80 81       	ld	r24, Z
    1154:	91 81       	ldd	r25, Z+1	; 0x01
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	d1 f6       	brne	.-76     	; 0x110e <main+0x5c8>
    115a:	27 c0       	rjmp	.+78     	; 0x11aa <main+0x664>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115c:	8e 01       	movw	r16, r28
    115e:	03 55       	subi	r16, 0x53	; 83
    1160:	1f 4f       	sbci	r17, 0xFF	; 255
    1162:	fe 01       	movw	r30, r28
    1164:	e1 55       	subi	r30, 0x51	; 81
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	60 81       	ld	r22, Z
    116a:	71 81       	ldd	r23, Z+1	; 0x01
    116c:	82 81       	ldd	r24, Z+2	; 0x02
    116e:	93 81       	ldd	r25, Z+3	; 0x03
    1170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	f8 01       	movw	r30, r16
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	80 83       	st	Z, r24
    117e:	de 01       	movw	r26, r28
    1180:	a7 55       	subi	r26, 0x57	; 87
    1182:	bf 4f       	sbci	r27, 0xFF	; 255
    1184:	fe 01       	movw	r30, r28
    1186:	e3 55       	subi	r30, 0x53	; 83
    1188:	ff 4f       	sbci	r31, 0xFF	; 255
    118a:	80 81       	ld	r24, Z
    118c:	91 81       	ldd	r25, Z+1	; 0x01
    118e:	8d 93       	st	X+, r24
    1190:	9c 93       	st	X, r25
    1192:	fe 01       	movw	r30, r28
    1194:	e7 55       	subi	r30, 0x57	; 87
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	80 81       	ld	r24, Z
    119a:	91 81       	ldd	r25, Z+1	; 0x01
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <main+0x656>
    11a0:	fe 01       	movw	r30, r28
    11a2:	e7 55       	subi	r30, 0x57	; 87
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	91 83       	std	Z+1, r25	; 0x01
    11a8:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_displayString("Correct Pass");
    11aa:	8b e8       	ldi	r24, 0x8B	; 139
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
    11b2:	fe 01       	movw	r30, r28
    11b4:	eb 55       	subi	r30, 0x5B	; 91
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	aa ef       	ldi	r26, 0xFA	; 250
    11be:	b3 e4       	ldi	r27, 0x43	; 67
    11c0:	80 83       	st	Z, r24
    11c2:	91 83       	std	Z+1, r25	; 0x01
    11c4:	a2 83       	std	Z+2, r26	; 0x02
    11c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c8:	8e 01       	movw	r16, r28
    11ca:	0f 55       	subi	r16, 0x5F	; 95
    11cc:	1f 4f       	sbci	r17, 0xFF	; 255
    11ce:	fe 01       	movw	r30, r28
    11d0:	eb 55       	subi	r30, 0x5B	; 91
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	4a ef       	ldi	r20, 0xFA	; 250
    11e2:	54 e4       	ldi	r21, 0x44	; 68
    11e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	f8 01       	movw	r30, r16
    11ee:	80 83       	st	Z, r24
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	a2 83       	std	Z+2, r26	; 0x02
    11f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11f6:	fe 01       	movw	r30, r28
    11f8:	ef 55       	subi	r30, 0x5F	; 95
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	60 81       	ld	r22, Z
    11fe:	71 81       	ldd	r23, Z+1	; 0x01
    1200:	82 81       	ldd	r24, Z+2	; 0x02
    1202:	93 81       	ldd	r25, Z+3	; 0x03
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e8       	ldi	r20, 0x80	; 128
    120a:	5f e3       	ldi	r21, 0x3F	; 63
    120c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1210:	88 23       	and	r24, r24
    1212:	44 f4       	brge	.+16     	; 0x1224 <main+0x6de>
		__ticks = 1;
    1214:	fe 01       	movw	r30, r28
    1216:	e1 56       	subi	r30, 0x61	; 97
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24
    1222:	64 c0       	rjmp	.+200    	; 0x12ec <main+0x7a6>
	else if (__tmp > 65535)
    1224:	fe 01       	movw	r30, r28
    1226:	ef 55       	subi	r30, 0x5F	; 95
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	60 81       	ld	r22, Z
    122c:	71 81       	ldd	r23, Z+1	; 0x01
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	3f ef       	ldi	r19, 0xFF	; 255
    1236:	4f e7       	ldi	r20, 0x7F	; 127
    1238:	57 e4       	ldi	r21, 0x47	; 71
    123a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    123e:	18 16       	cp	r1, r24
    1240:	0c f0       	brlt	.+2      	; 0x1244 <main+0x6fe>
    1242:	43 c0       	rjmp	.+134    	; 0x12ca <main+0x784>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1244:	fe 01       	movw	r30, r28
    1246:	eb 55       	subi	r30, 0x5B	; 91
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	60 81       	ld	r22, Z
    124c:	71 81       	ldd	r23, Z+1	; 0x01
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	93 81       	ldd	r25, Z+3	; 0x03
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e2       	ldi	r20, 0x20	; 32
    1258:	51 e4       	ldi	r21, 0x41	; 65
    125a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	8e 01       	movw	r16, r28
    1264:	01 56       	subi	r16, 0x61	; 97
    1266:	1f 4f       	sbci	r17, 0xFF	; 255
    1268:	bc 01       	movw	r22, r24
    126a:	cd 01       	movw	r24, r26
    126c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	f8 01       	movw	r30, r16
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	80 83       	st	Z, r24
    127a:	1f c0       	rjmp	.+62     	; 0x12ba <main+0x774>
    127c:	fe 01       	movw	r30, r28
    127e:	e3 56       	subi	r30, 0x63	; 99
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	88 ec       	ldi	r24, 0xC8	; 200
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	91 83       	std	Z+1, r25	; 0x01
    1288:	80 83       	st	Z, r24
    128a:	fe 01       	movw	r30, r28
    128c:	e3 56       	subi	r30, 0x63	; 99
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <main+0x74e>
    1298:	fe 01       	movw	r30, r28
    129a:	e3 56       	subi	r30, 0x63	; 99
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a2:	de 01       	movw	r26, r28
    12a4:	a1 56       	subi	r26, 0x61	; 97
    12a6:	bf 4f       	sbci	r27, 0xFF	; 255
    12a8:	fe 01       	movw	r30, r28
    12aa:	e1 56       	subi	r30, 0x61	; 97
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	80 81       	ld	r24, Z
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	11 96       	adiw	r26, 0x01	; 1
    12b6:	9c 93       	st	X, r25
    12b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ba:	fe 01       	movw	r30, r28
    12bc:	e1 56       	subi	r30, 0x61	; 97
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	80 81       	ld	r24, Z
    12c2:	91 81       	ldd	r25, Z+1	; 0x01
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	d1 f6       	brne	.-76     	; 0x127c <main+0x736>
    12c8:	28 c0       	rjmp	.+80     	; 0x131a <main+0x7d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ca:	8e 01       	movw	r16, r28
    12cc:	01 56       	subi	r16, 0x61	; 97
    12ce:	1f 4f       	sbci	r17, 0xFF	; 255
    12d0:	fe 01       	movw	r30, r28
    12d2:	ef 55       	subi	r30, 0x5F	; 95
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	60 81       	ld	r22, Z
    12d8:	71 81       	ldd	r23, Z+1	; 0x01
    12da:	82 81       	ldd	r24, Z+2	; 0x02
    12dc:	93 81       	ldd	r25, Z+3	; 0x03
    12de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	f8 01       	movw	r30, r16
    12e8:	91 83       	std	Z+1, r25	; 0x01
    12ea:	80 83       	st	Z, r24
    12ec:	de 01       	movw	r26, r28
    12ee:	a5 56       	subi	r26, 0x65	; 101
    12f0:	bf 4f       	sbci	r27, 0xFF	; 255
    12f2:	fe 01       	movw	r30, r28
    12f4:	e1 56       	subi	r30, 0x61	; 97
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	80 81       	ld	r24, Z
    12fa:	91 81       	ldd	r25, Z+1	; 0x01
    12fc:	11 96       	adiw	r26, 0x01	; 1
    12fe:	9c 93       	st	X, r25
    1300:	8e 93       	st	-X, r24
    1302:	fe 01       	movw	r30, r28
    1304:	e5 56       	subi	r30, 0x65	; 101
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <main+0x7c6>
    1310:	fe 01       	movw	r30, r28
    1312:	e5 56       	subi	r30, 0x65	; 101
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	80 83       	st	Z, r24
				_delay_ms(500);
				Step1_Flag =0; /* Go out from this while loop for first step */
    131a:	fe 01       	movw	r30, r28
    131c:	ee 51       	subi	r30, 0x1E	; 30
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	10 82       	st	Z, r1
				Step2_Flag =2; /* Active the Second State Loop*/
    1322:	fe 01       	movw	r30, r28
    1324:	ef 51       	subi	r30, 0x1F	; 31
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	80 83       	st	Z, r24
    132c:	74 c1       	rjmp	.+744    	; 0x1616 <main+0xad0>

			}
			/* if the two passwords not matched */
			else if (Local_CheckPassFlag == PASS_NOT_MATCHED)
    132e:	fe 01       	movw	r30, r28
    1330:	eb 51       	subi	r30, 0x1B	; 27
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	80 81       	ld	r24, Z
    1336:	80 31       	cpi	r24, 0x10	; 16
    1338:	09 f0       	breq	.+2      	; 0x133c <main+0x7f6>
    133a:	6d c1       	rjmp	.+730    	; 0x1616 <main+0xad0>
			{
				/* Display
				 * Stay on this loop until the two password matched
				 */
				LCD_clearScreen();
    133c:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
    1340:	fe 01       	movw	r30, r28
    1342:	e9 56       	subi	r30, 0x69	; 105
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a0 ea       	ldi	r26, 0xA0	; 160
    134c:	b1 e4       	ldi	r27, 0x41	; 65
    134e:	80 83       	st	Z, r24
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	a2 83       	std	Z+2, r26	; 0x02
    1354:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1356:	8e 01       	movw	r16, r28
    1358:	0d 56       	subi	r16, 0x6D	; 109
    135a:	1f 4f       	sbci	r17, 0xFF	; 255
    135c:	fe 01       	movw	r30, r28
    135e:	e9 56       	subi	r30, 0x69	; 105
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	60 81       	ld	r22, Z
    1364:	71 81       	ldd	r23, Z+1	; 0x01
    1366:	82 81       	ldd	r24, Z+2	; 0x02
    1368:	93 81       	ldd	r25, Z+3	; 0x03
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	4a ef       	ldi	r20, 0xFA	; 250
    1370:	54 e4       	ldi	r21, 0x44	; 68
    1372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	f8 01       	movw	r30, r16
    137c:	80 83       	st	Z, r24
    137e:	91 83       	std	Z+1, r25	; 0x01
    1380:	a2 83       	std	Z+2, r26	; 0x02
    1382:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1384:	fe 01       	movw	r30, r28
    1386:	ed 56       	subi	r30, 0x6D	; 109
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	60 81       	ld	r22, Z
    138c:	71 81       	ldd	r23, Z+1	; 0x01
    138e:	82 81       	ldd	r24, Z+2	; 0x02
    1390:	93 81       	ldd	r25, Z+3	; 0x03
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e8       	ldi	r20, 0x80	; 128
    1398:	5f e3       	ldi	r21, 0x3F	; 63
    139a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    139e:	88 23       	and	r24, r24
    13a0:	44 f4       	brge	.+16     	; 0x13b2 <main+0x86c>
		__ticks = 1;
    13a2:	fe 01       	movw	r30, r28
    13a4:	ef 56       	subi	r30, 0x6F	; 111
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	91 83       	std	Z+1, r25	; 0x01
    13ae:	80 83       	st	Z, r24
    13b0:	64 c0       	rjmp	.+200    	; 0x147a <main+0x934>
	else if (__tmp > 65535)
    13b2:	fe 01       	movw	r30, r28
    13b4:	ed 56       	subi	r30, 0x6D	; 109
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	60 81       	ld	r22, Z
    13ba:	71 81       	ldd	r23, Z+1	; 0x01
    13bc:	82 81       	ldd	r24, Z+2	; 0x02
    13be:	93 81       	ldd	r25, Z+3	; 0x03
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	3f ef       	ldi	r19, 0xFF	; 255
    13c4:	4f e7       	ldi	r20, 0x7F	; 127
    13c6:	57 e4       	ldi	r21, 0x47	; 71
    13c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13cc:	18 16       	cp	r1, r24
    13ce:	0c f0       	brlt	.+2      	; 0x13d2 <main+0x88c>
    13d0:	43 c0       	rjmp	.+134    	; 0x1458 <main+0x912>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d2:	fe 01       	movw	r30, r28
    13d4:	e9 56       	subi	r30, 0x69	; 105
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	60 81       	ld	r22, Z
    13da:	71 81       	ldd	r23, Z+1	; 0x01
    13dc:	82 81       	ldd	r24, Z+2	; 0x02
    13de:	93 81       	ldd	r25, Z+3	; 0x03
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e2       	ldi	r20, 0x20	; 32
    13e6:	51 e4       	ldi	r21, 0x41	; 65
    13e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	8e 01       	movw	r16, r28
    13f2:	0f 56       	subi	r16, 0x6F	; 111
    13f4:	1f 4f       	sbci	r17, 0xFF	; 255
    13f6:	bc 01       	movw	r22, r24
    13f8:	cd 01       	movw	r24, r26
    13fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	f8 01       	movw	r30, r16
    1404:	91 83       	std	Z+1, r25	; 0x01
    1406:	80 83       	st	Z, r24
    1408:	1f c0       	rjmp	.+62     	; 0x1448 <main+0x902>
    140a:	fe 01       	movw	r30, r28
    140c:	e1 57       	subi	r30, 0x71	; 113
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	88 ec       	ldi	r24, 0xC8	; 200
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	91 83       	std	Z+1, r25	; 0x01
    1416:	80 83       	st	Z, r24
    1418:	fe 01       	movw	r30, r28
    141a:	e1 57       	subi	r30, 0x71	; 113
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	80 81       	ld	r24, Z
    1420:	91 81       	ldd	r25, Z+1	; 0x01
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	f1 f7       	brne	.-4      	; 0x1422 <main+0x8dc>
    1426:	fe 01       	movw	r30, r28
    1428:	e1 57       	subi	r30, 0x71	; 113
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	91 83       	std	Z+1, r25	; 0x01
    142e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1430:	de 01       	movw	r26, r28
    1432:	af 56       	subi	r26, 0x6F	; 111
    1434:	bf 4f       	sbci	r27, 0xFF	; 255
    1436:	fe 01       	movw	r30, r28
    1438:	ef 56       	subi	r30, 0x6F	; 111
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	80 81       	ld	r24, Z
    143e:	91 81       	ldd	r25, Z+1	; 0x01
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	11 96       	adiw	r26, 0x01	; 1
    1444:	9c 93       	st	X, r25
    1446:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1448:	fe 01       	movw	r30, r28
    144a:	ef 56       	subi	r30, 0x6F	; 111
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	80 81       	ld	r24, Z
    1450:	91 81       	ldd	r25, Z+1	; 0x01
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	d1 f6       	brne	.-76     	; 0x140a <main+0x8c4>
    1456:	27 c0       	rjmp	.+78     	; 0x14a6 <main+0x960>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1458:	8e 01       	movw	r16, r28
    145a:	0f 56       	subi	r16, 0x6F	; 111
    145c:	1f 4f       	sbci	r17, 0xFF	; 255
    145e:	fe 01       	movw	r30, r28
    1460:	ed 56       	subi	r30, 0x6D	; 109
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	60 81       	ld	r22, Z
    1466:	71 81       	ldd	r23, Z+1	; 0x01
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	f8 01       	movw	r30, r16
    1476:	91 83       	std	Z+1, r25	; 0x01
    1478:	80 83       	st	Z, r24
    147a:	de 01       	movw	r26, r28
    147c:	a3 57       	subi	r26, 0x73	; 115
    147e:	bf 4f       	sbci	r27, 0xFF	; 255
    1480:	fe 01       	movw	r30, r28
    1482:	ef 56       	subi	r30, 0x6F	; 111
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	80 81       	ld	r24, Z
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	8d 93       	st	X+, r24
    148c:	9c 93       	st	X, r25
    148e:	fe 01       	movw	r30, r28
    1490:	e3 57       	subi	r30, 0x73	; 115
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	80 81       	ld	r24, Z
    1496:	91 81       	ldd	r25, Z+1	; 0x01
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <main+0x952>
    149c:	fe 01       	movw	r30, r28
    149e:	e3 57       	subi	r30, 0x73	; 115
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	91 83       	std	Z+1, r25	; 0x01
    14a4:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_displayString("Not Matched");
    14a6:	88 e9       	ldi	r24, 0x98	; 152
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
    14ae:	fe 01       	movw	r30, r28
    14b0:	e7 57       	subi	r30, 0x77	; 119
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	aa ef       	ldi	r26, 0xFA	; 250
    14ba:	b3 e4       	ldi	r27, 0x43	; 67
    14bc:	80 83       	st	Z, r24
    14be:	91 83       	std	Z+1, r25	; 0x01
    14c0:	a2 83       	std	Z+2, r26	; 0x02
    14c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c4:	8e 01       	movw	r16, r28
    14c6:	0b 57       	subi	r16, 0x7B	; 123
    14c8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ca:	fe 01       	movw	r30, r28
    14cc:	e7 57       	subi	r30, 0x77	; 119
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	60 81       	ld	r22, Z
    14d2:	71 81       	ldd	r23, Z+1	; 0x01
    14d4:	82 81       	ldd	r24, Z+2	; 0x02
    14d6:	93 81       	ldd	r25, Z+3	; 0x03
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	4a ef       	ldi	r20, 0xFA	; 250
    14de:	54 e4       	ldi	r21, 0x44	; 68
    14e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	f8 01       	movw	r30, r16
    14ea:	80 83       	st	Z, r24
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	a2 83       	std	Z+2, r26	; 0x02
    14f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14f2:	fe 01       	movw	r30, r28
    14f4:	eb 57       	subi	r30, 0x7B	; 123
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	60 81       	ld	r22, Z
    14fa:	71 81       	ldd	r23, Z+1	; 0x01
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	93 81       	ldd	r25, Z+3	; 0x03
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e8       	ldi	r20, 0x80	; 128
    1506:	5f e3       	ldi	r21, 0x3F	; 63
    1508:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    150c:	88 23       	and	r24, r24
    150e:	44 f4       	brge	.+16     	; 0x1520 <main+0x9da>
		__ticks = 1;
    1510:	fe 01       	movw	r30, r28
    1512:	ed 57       	subi	r30, 0x7D	; 125
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	91 83       	std	Z+1, r25	; 0x01
    151c:	80 83       	st	Z, r24
    151e:	64 c0       	rjmp	.+200    	; 0x15e8 <main+0xaa2>
	else if (__tmp > 65535)
    1520:	fe 01       	movw	r30, r28
    1522:	eb 57       	subi	r30, 0x7B	; 123
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	60 81       	ld	r22, Z
    1528:	71 81       	ldd	r23, Z+1	; 0x01
    152a:	82 81       	ldd	r24, Z+2	; 0x02
    152c:	93 81       	ldd	r25, Z+3	; 0x03
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	3f ef       	ldi	r19, 0xFF	; 255
    1532:	4f e7       	ldi	r20, 0x7F	; 127
    1534:	57 e4       	ldi	r21, 0x47	; 71
    1536:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    153a:	18 16       	cp	r1, r24
    153c:	0c f0       	brlt	.+2      	; 0x1540 <main+0x9fa>
    153e:	43 c0       	rjmp	.+134    	; 0x15c6 <main+0xa80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1540:	fe 01       	movw	r30, r28
    1542:	e7 57       	subi	r30, 0x77	; 119
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	60 81       	ld	r22, Z
    1548:	71 81       	ldd	r23, Z+1	; 0x01
    154a:	82 81       	ldd	r24, Z+2	; 0x02
    154c:	93 81       	ldd	r25, Z+3	; 0x03
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e2       	ldi	r20, 0x20	; 32
    1554:	51 e4       	ldi	r21, 0x41	; 65
    1556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	8e 01       	movw	r16, r28
    1560:	0d 57       	subi	r16, 0x7D	; 125
    1562:	1f 4f       	sbci	r17, 0xFF	; 255
    1564:	bc 01       	movw	r22, r24
    1566:	cd 01       	movw	r24, r26
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	f8 01       	movw	r30, r16
    1572:	91 83       	std	Z+1, r25	; 0x01
    1574:	80 83       	st	Z, r24
    1576:	1f c0       	rjmp	.+62     	; 0x15b6 <main+0xa70>
    1578:	fe 01       	movw	r30, r28
    157a:	ef 57       	subi	r30, 0x7F	; 127
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	88 ec       	ldi	r24, 0xC8	; 200
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	91 83       	std	Z+1, r25	; 0x01
    1584:	80 83       	st	Z, r24
    1586:	fe 01       	movw	r30, r28
    1588:	ef 57       	subi	r30, 0x7F	; 127
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	80 81       	ld	r24, Z
    158e:	91 81       	ldd	r25, Z+1	; 0x01
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	f1 f7       	brne	.-4      	; 0x1590 <main+0xa4a>
    1594:	fe 01       	movw	r30, r28
    1596:	ef 57       	subi	r30, 0x7F	; 127
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	91 83       	std	Z+1, r25	; 0x01
    159c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159e:	de 01       	movw	r26, r28
    15a0:	ad 57       	subi	r26, 0x7D	; 125
    15a2:	bf 4f       	sbci	r27, 0xFF	; 255
    15a4:	fe 01       	movw	r30, r28
    15a6:	ed 57       	subi	r30, 0x7D	; 125
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	80 81       	ld	r24, Z
    15ac:	91 81       	ldd	r25, Z+1	; 0x01
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	11 96       	adiw	r26, 0x01	; 1
    15b2:	9c 93       	st	X, r25
    15b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b6:	fe 01       	movw	r30, r28
    15b8:	ed 57       	subi	r30, 0x7D	; 125
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	80 81       	ld	r24, Z
    15be:	91 81       	ldd	r25, Z+1	; 0x01
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	d1 f6       	brne	.-76     	; 0x1578 <main+0xa32>
    15c4:	28 c0       	rjmp	.+80     	; 0x1616 <main+0xad0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c6:	8e 01       	movw	r16, r28
    15c8:	0d 57       	subi	r16, 0x7D	; 125
    15ca:	1f 4f       	sbci	r17, 0xFF	; 255
    15cc:	fe 01       	movw	r30, r28
    15ce:	eb 57       	subi	r30, 0x7B	; 123
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	60 81       	ld	r22, Z
    15d4:	71 81       	ldd	r23, Z+1	; 0x01
    15d6:	82 81       	ldd	r24, Z+2	; 0x02
    15d8:	93 81       	ldd	r25, Z+3	; 0x03
    15da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	f8 01       	movw	r30, r16
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24
    15e8:	de 01       	movw	r26, r28
    15ea:	a1 58       	subi	r26, 0x81	; 129
    15ec:	bf 4f       	sbci	r27, 0xFF	; 255
    15ee:	fe 01       	movw	r30, r28
    15f0:	ed 57       	subi	r30, 0x7D	; 125
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 81       	ld	r24, Z
    15f6:	91 81       	ldd	r25, Z+1	; 0x01
    15f8:	11 96       	adiw	r26, 0x01	; 1
    15fa:	9c 93       	st	X, r25
    15fc:	8e 93       	st	-X, r24
    15fe:	fe 01       	movw	r30, r28
    1600:	e1 58       	subi	r30, 0x81	; 129
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 81       	ld	r24, Z
    1606:	91 81       	ldd	r25, Z+1	; 0x01
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <main+0xac2>
    160c:	fe 01       	movw	r30, r28
    160e:	e1 58       	subi	r30, 0x81	; 129
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
	{
/*********************************************************************************************************/
/*************************************** STEP 1***********************************************************/
/*********************************************************************************************************/

		while(Step1_Flag)
    1616:	fe 01       	movw	r30, r28
    1618:	ee 51       	subi	r30, 0x1E	; 30
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	80 81       	ld	r24, Z
    161e:	88 23       	and	r24, r24
    1620:	09 f0       	breq	.+2      	; 0x1624 <main+0xade>
    1622:	49 cc       	rjmp	.-1902   	; 0xeb6 <main+0x370>
    1624:	e3 c4       	rjmp	.+2502   	; 0x1fec <main+0x14a6>
		 */
			while(Step2_Flag == 2 && g_NumberOfEnterpass < MAX_TRIES_ENTER_PASS)
			{

				/* take the operation for open door or change pass*/
				Local_Operation = A_DLSS_u8Step2TakeOperation();
    1626:	0e 94 19 14 	call	0x2832	; 0x2832 <A_DLSS_u8Step2TakeOperation>
    162a:	fe 01       	movw	r30, r28
    162c:	ec 51       	subi	r30, 0x1C	; 28
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	80 83       	st	Z, r24
/*********************************************************************************************************/
/*************************************** STEP 3***********************************************************/
/*********************************************************************************************************/

				/*if  the operation is open door */
				if(Local_Operation == OPEN_DOOR)
    1632:	fe 01       	movw	r30, r28
    1634:	ec 51       	subi	r30, 0x1C	; 28
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	80 81       	ld	r24, Z
    163a:	8b 32       	cpi	r24, 0x2B	; 43
    163c:	09 f0       	breq	.+2      	; 0x1640 <main+0xafa>
    163e:	18 c3       	rjmp	.+1584   	; 0x1c70 <main+0x112a>
				{
					/* initial value of receive flag from Control ECU */
					local_flag =0;
    1640:	fe 01       	movw	r30, r28
    1642:	ed 51       	subi	r30, 0x1D	; 29
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	10 82       	st	Z, r1
					/* Send open door command to control ECU*/
					UART_sendByte(OPEN_DOOR);
    1648:	8b e2       	ldi	r24, 0x2B	; 43
    164a:	0e 94 85 2a 	call	0x550a	; 0x550a <UART_sendByte>
    164e:	fe 01       	movw	r30, r28
    1650:	e5 58       	subi	r30, 0x85	; 133
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	a0 ea       	ldi	r26, 0xA0	; 160
    165a:	b1 e4       	ldi	r27, 0x41	; 65
    165c:	80 83       	st	Z, r24
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	a2 83       	std	Z+2, r26	; 0x02
    1662:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1664:	8e 01       	movw	r16, r28
    1666:	09 58       	subi	r16, 0x89	; 137
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	fe 01       	movw	r30, r28
    166c:	e5 58       	subi	r30, 0x85	; 133
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	60 81       	ld	r22, Z
    1672:	71 81       	ldd	r23, Z+1	; 0x01
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	4a ef       	ldi	r20, 0xFA	; 250
    167e:	54 e4       	ldi	r21, 0x44	; 68
    1680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	f8 01       	movw	r30, r16
    168a:	80 83       	st	Z, r24
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	a2 83       	std	Z+2, r26	; 0x02
    1690:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1692:	fe 01       	movw	r30, r28
    1694:	e9 58       	subi	r30, 0x89	; 137
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	60 81       	ld	r22, Z
    169a:	71 81       	ldd	r23, Z+1	; 0x01
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e8       	ldi	r20, 0x80	; 128
    16a6:	5f e3       	ldi	r21, 0x3F	; 63
    16a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	44 f4       	brge	.+16     	; 0x16c0 <main+0xb7a>
		__ticks = 1;
    16b0:	fe 01       	movw	r30, r28
    16b2:	eb 58       	subi	r30, 0x8B	; 139
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	80 83       	st	Z, r24
    16be:	64 c0       	rjmp	.+200    	; 0x1788 <main+0xc42>
	else if (__tmp > 65535)
    16c0:	fe 01       	movw	r30, r28
    16c2:	e9 58       	subi	r30, 0x89	; 137
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	60 81       	ld	r22, Z
    16c8:	71 81       	ldd	r23, Z+1	; 0x01
    16ca:	82 81       	ldd	r24, Z+2	; 0x02
    16cc:	93 81       	ldd	r25, Z+3	; 0x03
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	3f ef       	ldi	r19, 0xFF	; 255
    16d2:	4f e7       	ldi	r20, 0x7F	; 127
    16d4:	57 e4       	ldi	r21, 0x47	; 71
    16d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16da:	18 16       	cp	r1, r24
    16dc:	0c f0       	brlt	.+2      	; 0x16e0 <main+0xb9a>
    16de:	43 c0       	rjmp	.+134    	; 0x1766 <main+0xc20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e0:	fe 01       	movw	r30, r28
    16e2:	e5 58       	subi	r30, 0x85	; 133
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	60 81       	ld	r22, Z
    16e8:	71 81       	ldd	r23, Z+1	; 0x01
    16ea:	82 81       	ldd	r24, Z+2	; 0x02
    16ec:	93 81       	ldd	r25, Z+3	; 0x03
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e2       	ldi	r20, 0x20	; 32
    16f4:	51 e4       	ldi	r21, 0x41	; 65
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	8e 01       	movw	r16, r28
    1700:	0b 58       	subi	r16, 0x8B	; 139
    1702:	1f 4f       	sbci	r17, 0xFF	; 255
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	f8 01       	movw	r30, r16
    1712:	91 83       	std	Z+1, r25	; 0x01
    1714:	80 83       	st	Z, r24
    1716:	1f c0       	rjmp	.+62     	; 0x1756 <main+0xc10>
    1718:	fe 01       	movw	r30, r28
    171a:	ed 58       	subi	r30, 0x8D	; 141
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	88 ec       	ldi	r24, 0xC8	; 200
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	80 83       	st	Z, r24
    1726:	fe 01       	movw	r30, r28
    1728:	ed 58       	subi	r30, 0x8D	; 141
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	80 81       	ld	r24, Z
    172e:	91 81       	ldd	r25, Z+1	; 0x01
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	f1 f7       	brne	.-4      	; 0x1730 <main+0xbea>
    1734:	fe 01       	movw	r30, r28
    1736:	ed 58       	subi	r30, 0x8D	; 141
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	91 83       	std	Z+1, r25	; 0x01
    173c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173e:	de 01       	movw	r26, r28
    1740:	ab 58       	subi	r26, 0x8B	; 139
    1742:	bf 4f       	sbci	r27, 0xFF	; 255
    1744:	fe 01       	movw	r30, r28
    1746:	eb 58       	subi	r30, 0x8B	; 139
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	80 81       	ld	r24, Z
    174c:	91 81       	ldd	r25, Z+1	; 0x01
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	11 96       	adiw	r26, 0x01	; 1
    1752:	9c 93       	st	X, r25
    1754:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1756:	fe 01       	movw	r30, r28
    1758:	eb 58       	subi	r30, 0x8B	; 139
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	d1 f6       	brne	.-76     	; 0x1718 <main+0xbd2>
    1764:	27 c0       	rjmp	.+78     	; 0x17b4 <main+0xc6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1766:	8e 01       	movw	r16, r28
    1768:	0b 58       	subi	r16, 0x8B	; 139
    176a:	1f 4f       	sbci	r17, 0xFF	; 255
    176c:	fe 01       	movw	r30, r28
    176e:	e9 58       	subi	r30, 0x89	; 137
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	f8 01       	movw	r30, r16
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	80 83       	st	Z, r24
    1788:	de 01       	movw	r26, r28
    178a:	af 58       	subi	r26, 0x8F	; 143
    178c:	bf 4f       	sbci	r27, 0xFF	; 255
    178e:	fe 01       	movw	r30, r28
    1790:	eb 58       	subi	r30, 0x8B	; 139
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	8d 93       	st	X+, r24
    179a:	9c 93       	st	X, r25
    179c:	fe 01       	movw	r30, r28
    179e:	ef 58       	subi	r30, 0x8F	; 143
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	80 81       	ld	r24, Z
    17a4:	91 81       	ldd	r25, Z+1	; 0x01
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <main+0xc60>
    17aa:	fe 01       	movw	r30, r28
    17ac:	ef 58       	subi	r30, 0x8F	; 143
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	91 83       	std	Z+1, r25	; 0x01
    17b2:	80 83       	st	Z, r24
					_delay_ms(20);
					/* Send the same password */
					A_DLSS_VoidStep3EnterPass();
    17b4:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <A_DLSS_VoidStep3EnterPass>
					/* receive byte of Control ECU to check the pass*/
					local_flag = UART_recieveByte();
    17b8:	0e 94 9c 2a 	call	0x5538	; 0x5538 <UART_recieveByte>
    17bc:	fe 01       	movw	r30, r28
    17be:	ed 51       	subi	r30, 0x1D	; 29
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	80 83       	st	Z, r24
					if(local_flag == PASS_MATCHED)
    17c4:	fe 01       	movw	r30, r28
    17c6:	ed 51       	subi	r30, 0x1D	; 29
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	80 81       	ld	r24, Z
    17cc:	80 39       	cpi	r24, 0x90	; 144
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <main+0xc8c>
    17d0:	bd c0       	rjmp	.+378    	; 0x194c <main+0xe06>
					{
						/* clear the number of entered password Wrong */
						g_NumberOfEnterpass=0;
    17d2:	10 92 97 01 	sts	0x0197, r1
						LCD_clearScreen();
    17d6:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
    17da:	fe 01       	movw	r30, r28
    17dc:	e3 59       	subi	r30, 0x93	; 147
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a0 ea       	ldi	r26, 0xA0	; 160
    17e6:	b1 e4       	ldi	r27, 0x41	; 65
    17e8:	80 83       	st	Z, r24
    17ea:	91 83       	std	Z+1, r25	; 0x01
    17ec:	a2 83       	std	Z+2, r26	; 0x02
    17ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f0:	8e 01       	movw	r16, r28
    17f2:	07 59       	subi	r16, 0x97	; 151
    17f4:	1f 4f       	sbci	r17, 0xFF	; 255
    17f6:	fe 01       	movw	r30, r28
    17f8:	e3 59       	subi	r30, 0x93	; 147
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	4a ef       	ldi	r20, 0xFA	; 250
    180a:	54 e4       	ldi	r21, 0x44	; 68
    180c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	f8 01       	movw	r30, r16
    1816:	80 83       	st	Z, r24
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	a2 83       	std	Z+2, r26	; 0x02
    181c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    181e:	fe 01       	movw	r30, r28
    1820:	e7 59       	subi	r30, 0x97	; 151
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	60 81       	ld	r22, Z
    1826:	71 81       	ldd	r23, Z+1	; 0x01
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	93 81       	ldd	r25, Z+3	; 0x03
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e8       	ldi	r20, 0x80	; 128
    1832:	5f e3       	ldi	r21, 0x3F	; 63
    1834:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1838:	88 23       	and	r24, r24
    183a:	44 f4       	brge	.+16     	; 0x184c <main+0xd06>
		__ticks = 1;
    183c:	fe 01       	movw	r30, r28
    183e:	e9 59       	subi	r30, 0x99	; 153
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	91 83       	std	Z+1, r25	; 0x01
    1848:	80 83       	st	Z, r24
    184a:	64 c0       	rjmp	.+200    	; 0x1914 <main+0xdce>
	else if (__tmp > 65535)
    184c:	fe 01       	movw	r30, r28
    184e:	e7 59       	subi	r30, 0x97	; 151
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	60 81       	ld	r22, Z
    1854:	71 81       	ldd	r23, Z+1	; 0x01
    1856:	82 81       	ldd	r24, Z+2	; 0x02
    1858:	93 81       	ldd	r25, Z+3	; 0x03
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	3f ef       	ldi	r19, 0xFF	; 255
    185e:	4f e7       	ldi	r20, 0x7F	; 127
    1860:	57 e4       	ldi	r21, 0x47	; 71
    1862:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1866:	18 16       	cp	r1, r24
    1868:	0c f0       	brlt	.+2      	; 0x186c <main+0xd26>
    186a:	43 c0       	rjmp	.+134    	; 0x18f2 <main+0xdac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186c:	fe 01       	movw	r30, r28
    186e:	e3 59       	subi	r30, 0x93	; 147
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	60 81       	ld	r22, Z
    1874:	71 81       	ldd	r23, Z+1	; 0x01
    1876:	82 81       	ldd	r24, Z+2	; 0x02
    1878:	93 81       	ldd	r25, Z+3	; 0x03
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e2       	ldi	r20, 0x20	; 32
    1880:	51 e4       	ldi	r21, 0x41	; 65
    1882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	8e 01       	movw	r16, r28
    188c:	09 59       	subi	r16, 0x99	; 153
    188e:	1f 4f       	sbci	r17, 0xFF	; 255
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	f8 01       	movw	r30, r16
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	80 83       	st	Z, r24
    18a2:	1f c0       	rjmp	.+62     	; 0x18e2 <main+0xd9c>
    18a4:	fe 01       	movw	r30, r28
    18a6:	eb 59       	subi	r30, 0x9B	; 155
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	88 ec       	ldi	r24, 0xC8	; 200
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	80 83       	st	Z, r24
    18b2:	fe 01       	movw	r30, r28
    18b4:	eb 59       	subi	r30, 0x9B	; 155
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	80 81       	ld	r24, Z
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <main+0xd76>
    18c0:	fe 01       	movw	r30, r28
    18c2:	eb 59       	subi	r30, 0x9B	; 155
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ca:	de 01       	movw	r26, r28
    18cc:	a9 59       	subi	r26, 0x99	; 153
    18ce:	bf 4f       	sbci	r27, 0xFF	; 255
    18d0:	fe 01       	movw	r30, r28
    18d2:	e9 59       	subi	r30, 0x99	; 153
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	80 81       	ld	r24, Z
    18d8:	91 81       	ldd	r25, Z+1	; 0x01
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	11 96       	adiw	r26, 0x01	; 1
    18de:	9c 93       	st	X, r25
    18e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e2:	fe 01       	movw	r30, r28
    18e4:	e9 59       	subi	r30, 0x99	; 153
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	d1 f6       	brne	.-76     	; 0x18a4 <main+0xd5e>
    18f0:	27 c0       	rjmp	.+78     	; 0x1940 <main+0xdfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f2:	8e 01       	movw	r16, r28
    18f4:	09 59       	subi	r16, 0x99	; 153
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	fe 01       	movw	r30, r28
    18fa:	e7 59       	subi	r30, 0x97	; 151
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	f8 01       	movw	r30, r16
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	80 83       	st	Z, r24
    1914:	de 01       	movw	r26, r28
    1916:	ad 59       	subi	r26, 0x9D	; 157
    1918:	bf 4f       	sbci	r27, 0xFF	; 255
    191a:	fe 01       	movw	r30, r28
    191c:	e9 59       	subi	r30, 0x99	; 153
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	80 81       	ld	r24, Z
    1922:	91 81       	ldd	r25, Z+1	; 0x01
    1924:	8d 93       	st	X+, r24
    1926:	9c 93       	st	X, r25
    1928:	fe 01       	movw	r30, r28
    192a:	ed 59       	subi	r30, 0x9D	; 157
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	80 81       	ld	r24, Z
    1930:	91 81       	ldd	r25, Z+1	; 0x01
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <main+0xdec>
    1936:	fe 01       	movw	r30, r28
    1938:	ed 59       	subi	r30, 0x9D	; 157
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	91 83       	std	Z+1, r25	; 0x01
    193e:	80 83       	st	Z, r24
						_delay_ms(20);
						/* Motor State */
						UART_sendByte(TURN_MOTOR_ON);
    1940:	80 e6       	ldi	r24, 0x60	; 96
    1942:	0e 94 85 2a 	call	0x550a	; 0x550a <UART_sendByte>
						/* Display the state of the door*/
						A_DLSS_VoidStep_3_MotorState();
    1946:	0e 94 14 1a 	call	0x3428	; 0x3428 <A_DLSS_VoidStep_3_MotorState>
    194a:	50 c3       	rjmp	.+1696   	; 0x1fec <main+0x14a6>

					}else if(local_flag == PASS_NOT_MATCHED)
    194c:	fe 01       	movw	r30, r28
    194e:	ed 51       	subi	r30, 0x1D	; 29
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	80 81       	ld	r24, Z
    1954:	80 31       	cpi	r24, 0x10	; 16
    1956:	09 f0       	breq	.+2      	; 0x195a <main+0xe14>
    1958:	49 c3       	rjmp	.+1682   	; 0x1fec <main+0x14a6>
					{
						/* Increment the number of entered password Wrong */
						g_NumberOfEnterpass++;
    195a:	80 91 97 01 	lds	r24, 0x0197
    195e:	8f 5f       	subi	r24, 0xFF	; 255
    1960:	80 93 97 01 	sts	0x0197, r24
						/* Send PASS_NOT_MATCHED
						 * and display it on LCD
						 * and repeat this step if the number of tries less the the max */
						UART_sendByte(PASS_NOT_MATCHED);
    1964:	80 e1       	ldi	r24, 0x10	; 16
    1966:	0e 94 85 2a 	call	0x550a	; 0x550a <UART_sendByte>
						LCD_clearScreen();
    196a:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
						LCD_displayString("Wrong Pass");
    196e:	84 ea       	ldi	r24, 0xA4	; 164
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
    1976:	fe 01       	movw	r30, r28
    1978:	e1 5a       	subi	r30, 0xA1	; 161
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a8 e4       	ldi	r26, 0x48	; 72
    1982:	b2 e4       	ldi	r27, 0x42	; 66
    1984:	80 83       	st	Z, r24
    1986:	91 83       	std	Z+1, r25	; 0x01
    1988:	a2 83       	std	Z+2, r26	; 0x02
    198a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198c:	8e 01       	movw	r16, r28
    198e:	05 5a       	subi	r16, 0xA5	; 165
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	fe 01       	movw	r30, r28
    1994:	e1 5a       	subi	r30, 0xA1	; 161
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	60 81       	ld	r22, Z
    199a:	71 81       	ldd	r23, Z+1	; 0x01
    199c:	82 81       	ldd	r24, Z+2	; 0x02
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	4a ef       	ldi	r20, 0xFA	; 250
    19a6:	54 e4       	ldi	r21, 0x44	; 68
    19a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	f8 01       	movw	r30, r16
    19b2:	80 83       	st	Z, r24
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	a2 83       	std	Z+2, r26	; 0x02
    19b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ba:	fe 01       	movw	r30, r28
    19bc:	e5 5a       	subi	r30, 0xA5	; 165
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	93 81       	ldd	r25, Z+3	; 0x03
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	5f e3       	ldi	r21, 0x3F	; 63
    19d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d4:	88 23       	and	r24, r24
    19d6:	44 f4       	brge	.+16     	; 0x19e8 <main+0xea2>
		__ticks = 1;
    19d8:	fe 01       	movw	r30, r28
    19da:	e7 5a       	subi	r30, 0xA7	; 167
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	91 83       	std	Z+1, r25	; 0x01
    19e4:	80 83       	st	Z, r24
    19e6:	64 c0       	rjmp	.+200    	; 0x1ab0 <main+0xf6a>
	else if (__tmp > 65535)
    19e8:	fe 01       	movw	r30, r28
    19ea:	e5 5a       	subi	r30, 0xA5	; 165
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	60 81       	ld	r22, Z
    19f0:	71 81       	ldd	r23, Z+1	; 0x01
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	3f ef       	ldi	r19, 0xFF	; 255
    19fa:	4f e7       	ldi	r20, 0x7F	; 127
    19fc:	57 e4       	ldi	r21, 0x47	; 71
    19fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a02:	18 16       	cp	r1, r24
    1a04:	0c f0       	brlt	.+2      	; 0x1a08 <main+0xec2>
    1a06:	43 c0       	rjmp	.+134    	; 0x1a8e <main+0xf48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e1 5a       	subi	r30, 0xA1	; 161
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e2       	ldi	r20, 0x20	; 32
    1a1c:	51 e4       	ldi	r21, 0x41	; 65
    1a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	8e 01       	movw	r16, r28
    1a28:	07 5a       	subi	r16, 0xA7	; 167
    1a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	f8 01       	movw	r30, r16
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24
    1a3e:	1f c0       	rjmp	.+62     	; 0x1a7e <main+0xf38>
    1a40:	fe 01       	movw	r30, r28
    1a42:	e9 5a       	subi	r30, 0xA9	; 169
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	88 ec       	ldi	r24, 0xC8	; 200
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e9 5a       	subi	r30, 0xA9	; 169
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 81       	ld	r24, Z
    1a56:	91 81       	ldd	r25, Z+1	; 0x01
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <main+0xf12>
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e9 5a       	subi	r30, 0xA9	; 169
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a66:	de 01       	movw	r26, r28
    1a68:	a7 5a       	subi	r26, 0xA7	; 167
    1a6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e7 5a       	subi	r30, 0xA7	; 167
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	91 81       	ldd	r25, Z+1	; 0x01
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	11 96       	adiw	r26, 0x01	; 1
    1a7a:	9c 93       	st	X, r25
    1a7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7e:	fe 01       	movw	r30, r28
    1a80:	e7 5a       	subi	r30, 0xA7	; 167
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	80 81       	ld	r24, Z
    1a86:	91 81       	ldd	r25, Z+1	; 0x01
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	d1 f6       	brne	.-76     	; 0x1a40 <main+0xefa>
    1a8c:	27 c0       	rjmp	.+78     	; 0x1adc <main+0xf96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8e:	8e 01       	movw	r16, r28
    1a90:	07 5a       	subi	r16, 0xA7	; 167
    1a92:	1f 4f       	sbci	r17, 0xFF	; 255
    1a94:	fe 01       	movw	r30, r28
    1a96:	e5 5a       	subi	r30, 0xA5	; 165
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	60 81       	ld	r22, Z
    1a9c:	71 81       	ldd	r23, Z+1	; 0x01
    1a9e:	82 81       	ldd	r24, Z+2	; 0x02
    1aa0:	93 81       	ldd	r25, Z+3	; 0x03
    1aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	f8 01       	movw	r30, r16
    1aac:	91 83       	std	Z+1, r25	; 0x01
    1aae:	80 83       	st	Z, r24
    1ab0:	de 01       	movw	r26, r28
    1ab2:	ab 5a       	subi	r26, 0xAB	; 171
    1ab4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e7 5a       	subi	r30, 0xA7	; 167
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	8d 93       	st	X+, r24
    1ac2:	9c 93       	st	X, r25
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	eb 5a       	subi	r30, 0xAB	; 171
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	80 81       	ld	r24, Z
    1acc:	91 81       	ldd	r25, Z+1	; 0x01
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <main+0xf88>
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	eb 5a       	subi	r30, 0xAB	; 171
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	91 83       	std	Z+1, r25	; 0x01
    1ada:	80 83       	st	Z, r24
						_delay_ms(50);
						LCD_displayStringRowColumn(1,0,"Have    tries");
    1adc:	2f ea       	ldi	r18, 0xAF	; 175
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	a9 01       	movw	r20, r18
    1ae6:	0e 94 94 27 	call	0x4f28	; 0x4f28 <LCD_displayStringRowColumn>
						LCD_moveCursor(1,6);
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	66 e0       	ldi	r22, 0x06	; 6
    1aee:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <LCD_moveCursor>
						LCD_intgerToString(MAX_TRIES_ENTER_PASS - g_NumberOfEnterpass);
    1af2:	80 91 97 01 	lds	r24, 0x0197
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	82 1b       	sub	r24, r18
    1b00:	93 0b       	sbc	r25, r19
    1b02:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <LCD_intgerToString>
    1b06:	fe 01       	movw	r30, r28
    1b08:	ef 5a       	subi	r30, 0xAF	; 175
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	aa ef       	ldi	r26, 0xFA	; 250
    1b12:	b3 e4       	ldi	r27, 0x43	; 67
    1b14:	80 83       	st	Z, r24
    1b16:	91 83       	std	Z+1, r25	; 0x01
    1b18:	a2 83       	std	Z+2, r26	; 0x02
    1b1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1c:	8e 01       	movw	r16, r28
    1b1e:	03 5b       	subi	r16, 0xB3	; 179
    1b20:	1f 4f       	sbci	r17, 0xFF	; 255
    1b22:	fe 01       	movw	r30, r28
    1b24:	ef 5a       	subi	r30, 0xAF	; 175
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	60 81       	ld	r22, Z
    1b2a:	71 81       	ldd	r23, Z+1	; 0x01
    1b2c:	82 81       	ldd	r24, Z+2	; 0x02
    1b2e:	93 81       	ldd	r25, Z+3	; 0x03
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	4a ef       	ldi	r20, 0xFA	; 250
    1b36:	54 e4       	ldi	r21, 0x44	; 68
    1b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	f8 01       	movw	r30, r16
    1b42:	80 83       	st	Z, r24
    1b44:	91 83       	std	Z+1, r25	; 0x01
    1b46:	a2 83       	std	Z+2, r26	; 0x02
    1b48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e3 5b       	subi	r30, 0xB3	; 179
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	60 81       	ld	r22, Z
    1b52:	71 81       	ldd	r23, Z+1	; 0x01
    1b54:	82 81       	ldd	r24, Z+2	; 0x02
    1b56:	93 81       	ldd	r25, Z+3	; 0x03
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e8       	ldi	r20, 0x80	; 128
    1b5e:	5f e3       	ldi	r21, 0x3F	; 63
    1b60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b64:	88 23       	and	r24, r24
    1b66:	44 f4       	brge	.+16     	; 0x1b78 <main+0x1032>
		__ticks = 1;
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e5 5b       	subi	r30, 0xB5	; 181
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	91 83       	std	Z+1, r25	; 0x01
    1b74:	80 83       	st	Z, r24
    1b76:	64 c0       	rjmp	.+200    	; 0x1c40 <main+0x10fa>
	else if (__tmp > 65535)
    1b78:	fe 01       	movw	r30, r28
    1b7a:	e3 5b       	subi	r30, 0xB3	; 179
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	60 81       	ld	r22, Z
    1b80:	71 81       	ldd	r23, Z+1	; 0x01
    1b82:	82 81       	ldd	r24, Z+2	; 0x02
    1b84:	93 81       	ldd	r25, Z+3	; 0x03
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	3f ef       	ldi	r19, 0xFF	; 255
    1b8a:	4f e7       	ldi	r20, 0x7F	; 127
    1b8c:	57 e4       	ldi	r21, 0x47	; 71
    1b8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b92:	18 16       	cp	r1, r24
    1b94:	0c f0       	brlt	.+2      	; 0x1b98 <main+0x1052>
    1b96:	43 c0       	rjmp	.+134    	; 0x1c1e <main+0x10d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b98:	fe 01       	movw	r30, r28
    1b9a:	ef 5a       	subi	r30, 0xAF	; 175
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	60 81       	ld	r22, Z
    1ba0:	71 81       	ldd	r23, Z+1	; 0x01
    1ba2:	82 81       	ldd	r24, Z+2	; 0x02
    1ba4:	93 81       	ldd	r25, Z+3	; 0x03
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e2       	ldi	r20, 0x20	; 32
    1bac:	51 e4       	ldi	r21, 0x41	; 65
    1bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	8e 01       	movw	r16, r28
    1bb8:	05 5b       	subi	r16, 0xB5	; 181
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	bc 01       	movw	r22, r24
    1bbe:	cd 01       	movw	r24, r26
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	f8 01       	movw	r30, r16
    1bca:	91 83       	std	Z+1, r25	; 0x01
    1bcc:	80 83       	st	Z, r24
    1bce:	1f c0       	rjmp	.+62     	; 0x1c0e <main+0x10c8>
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	e7 5b       	subi	r30, 0xB7	; 183
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	88 ec       	ldi	r24, 0xC8	; 200
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	80 83       	st	Z, r24
    1bde:	fe 01       	movw	r30, r28
    1be0:	e7 5b       	subi	r30, 0xB7	; 183
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	80 81       	ld	r24, Z
    1be6:	91 81       	ldd	r25, Z+1	; 0x01
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <main+0x10a2>
    1bec:	fe 01       	movw	r30, r28
    1bee:	e7 5b       	subi	r30, 0xB7	; 183
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	91 83       	std	Z+1, r25	; 0x01
    1bf4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf6:	de 01       	movw	r26, r28
    1bf8:	a5 5b       	subi	r26, 0xB5	; 181
    1bfa:	bf 4f       	sbci	r27, 0xFF	; 255
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e5 5b       	subi	r30, 0xB5	; 181
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	80 81       	ld	r24, Z
    1c04:	91 81       	ldd	r25, Z+1	; 0x01
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	11 96       	adiw	r26, 0x01	; 1
    1c0a:	9c 93       	st	X, r25
    1c0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0e:	fe 01       	movw	r30, r28
    1c10:	e5 5b       	subi	r30, 0xB5	; 181
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	80 81       	ld	r24, Z
    1c16:	91 81       	ldd	r25, Z+1	; 0x01
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	d1 f6       	brne	.-76     	; 0x1bd0 <main+0x108a>
    1c1c:	e7 c1       	rjmp	.+974    	; 0x1fec <main+0x14a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1e:	8e 01       	movw	r16, r28
    1c20:	05 5b       	subi	r16, 0xB5	; 181
    1c22:	1f 4f       	sbci	r17, 0xFF	; 255
    1c24:	fe 01       	movw	r30, r28
    1c26:	e3 5b       	subi	r30, 0xB3	; 179
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	60 81       	ld	r22, Z
    1c2c:	71 81       	ldd	r23, Z+1	; 0x01
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	91 83       	std	Z+1, r25	; 0x01
    1c3e:	80 83       	st	Z, r24
    1c40:	de 01       	movw	r26, r28
    1c42:	a9 5b       	subi	r26, 0xB9	; 185
    1c44:	bf 4f       	sbci	r27, 0xFF	; 255
    1c46:	fe 01       	movw	r30, r28
    1c48:	e5 5b       	subi	r30, 0xB5	; 181
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	80 81       	ld	r24, Z
    1c4e:	91 81       	ldd	r25, Z+1	; 0x01
    1c50:	11 96       	adiw	r26, 0x01	; 1
    1c52:	9c 93       	st	X, r25
    1c54:	8e 93       	st	-X, r24
    1c56:	fe 01       	movw	r30, r28
    1c58:	e9 5b       	subi	r30, 0xB9	; 185
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	80 81       	ld	r24, Z
    1c5e:	91 81       	ldd	r25, Z+1	; 0x01
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <main+0x111a>
    1c64:	fe 01       	movw	r30, r28
    1c66:	e9 5b       	subi	r30, 0xB9	; 185
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	80 83       	st	Z, r24
    1c6e:	be c1       	rjmp	.+892    	; 0x1fec <main+0x14a6>

/*********************************************************************************************************/
/*************************************** STEP 4***********************************************************/
/*********************************************************************************************************/

				}else if(Local_Operation == CHANGE_PASS)
    1c70:	fe 01       	movw	r30, r28
    1c72:	ec 51       	subi	r30, 0x1C	; 28
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	80 81       	ld	r24, Z
    1c78:	8d 32       	cpi	r24, 0x2D	; 45
    1c7a:	09 f0       	breq	.+2      	; 0x1c7e <main+0x1138>
    1c7c:	b7 c1       	rjmp	.+878    	; 0x1fec <main+0x14a6>
				{
					/* initial value of receive flag from Control ECU */
					local_flag =0;
    1c7e:	fe 01       	movw	r30, r28
    1c80:	ed 51       	subi	r30, 0x1D	; 29
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	10 82       	st	Z, r1
					/* Send change password command to control ECU*/
					UART_sendByte(CHANGE_PASS);
    1c86:	8d e2       	ldi	r24, 0x2D	; 45
    1c88:	0e 94 85 2a 	call	0x550a	; 0x550a <UART_sendByte>
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	ed 5b       	subi	r30, 0xBD	; 189
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a0 ea       	ldi	r26, 0xA0	; 160
    1c98:	b1 e4       	ldi	r27, 0x41	; 65
    1c9a:	80 83       	st	Z, r24
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	a2 83       	std	Z+2, r26	; 0x02
    1ca0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	8e 01       	movw	r16, r28
    1ca4:	01 5c       	subi	r16, 0xC1	; 193
    1ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca8:	fe 01       	movw	r30, r28
    1caa:	ed 5b       	subi	r30, 0xBD	; 189
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a ef       	ldi	r20, 0xFA	; 250
    1cbc:	54 e4       	ldi	r21, 0x44	; 68
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	80 83       	st	Z, r24
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	a2 83       	std	Z+2, r26	; 0x02
    1cce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	ff 96       	adiw	r30, 0x3f	; 63
    1cd4:	60 81       	ld	r22, Z
    1cd6:	71 81       	ldd	r23, Z+1	; 0x01
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e8       	ldi	r20, 0x80	; 128
    1ce2:	5f e3       	ldi	r21, 0x3F	; 63
    1ce4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce8:	88 23       	and	r24, r24
    1cea:	2c f4       	brge	.+10     	; 0x1cf6 <main+0x11b0>
		__ticks = 1;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9e af       	std	Y+62, r25	; 0x3e
    1cf2:	8d af       	std	Y+61, r24	; 0x3d
    1cf4:	46 c0       	rjmp	.+140    	; 0x1d82 <main+0x123c>
	else if (__tmp > 65535)
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	ff 96       	adiw	r30, 0x3f	; 63
    1cfa:	60 81       	ld	r22, Z
    1cfc:	71 81       	ldd	r23, Z+1	; 0x01
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	93 81       	ldd	r25, Z+3	; 0x03
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	3f ef       	ldi	r19, 0xFF	; 255
    1d06:	4f e7       	ldi	r20, 0x7F	; 127
    1d08:	57 e4       	ldi	r21, 0x47	; 71
    1d0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d0e:	18 16       	cp	r1, r24
    1d10:	64 f5       	brge	.+88     	; 0x1d6a <main+0x1224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d12:	fe 01       	movw	r30, r28
    1d14:	ed 5b       	subi	r30, 0xBD	; 189
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	60 81       	ld	r22, Z
    1d1a:	71 81       	ldd	r23, Z+1	; 0x01
    1d1c:	82 81       	ldd	r24, Z+2	; 0x02
    1d1e:	93 81       	ldd	r25, Z+3	; 0x03
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e2       	ldi	r20, 0x20	; 32
    1d26:	51 e4       	ldi	r21, 0x41	; 65
    1d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	bc 01       	movw	r22, r24
    1d32:	cd 01       	movw	r24, r26
    1d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	9e af       	std	Y+62, r25	; 0x3e
    1d3e:	8d af       	std	Y+61, r24	; 0x3d
    1d40:	0f c0       	rjmp	.+30     	; 0x1d60 <main+0x121a>
    1d42:	88 ec       	ldi	r24, 0xC8	; 200
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9c af       	std	Y+60, r25	; 0x3c
    1d48:	8b af       	std	Y+59, r24	; 0x3b
    1d4a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d4c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <main+0x1208>
    1d52:	9c af       	std	Y+60, r25	; 0x3c
    1d54:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	9e af       	std	Y+62, r25	; 0x3e
    1d5e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d60:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d62:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	69 f7       	brne	.-38     	; 0x1d42 <main+0x11fc>
    1d68:	16 c0       	rjmp	.+44     	; 0x1d96 <main+0x1250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	ff 96       	adiw	r30, 0x3f	; 63
    1d6e:	60 81       	ld	r22, Z
    1d70:	71 81       	ldd	r23, Z+1	; 0x01
    1d72:	82 81       	ldd	r24, Z+2	; 0x02
    1d74:	93 81       	ldd	r25, Z+3	; 0x03
    1d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	9e af       	std	Y+62, r25	; 0x3e
    1d80:	8d af       	std	Y+61, r24	; 0x3d
    1d82:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d84:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d86:	9a af       	std	Y+58, r25	; 0x3a
    1d88:	89 af       	std	Y+57, r24	; 0x39
    1d8a:	89 ad       	ldd	r24, Y+57	; 0x39
    1d8c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <main+0x1248>
    1d92:	9a af       	std	Y+58, r25	; 0x3a
    1d94:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(20);
					/* Send the same password */
					A_DLSS_VoidStep4ChangePass();
    1d96:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <A_DLSS_VoidStep4ChangePass>
					/* receive byte of Control ECU to check the pass*/
					local_flag = UART_recieveByte();
    1d9a:	0e 94 9c 2a 	call	0x5538	; 0x5538 <UART_recieveByte>
    1d9e:	fe 01       	movw	r30, r28
    1da0:	ed 51       	subi	r30, 0x1D	; 29
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	80 83       	st	Z, r24
					if(local_flag == PASS_MATCHED)
    1da6:	fe 01       	movw	r30, r28
    1da8:	ed 51       	subi	r30, 0x1D	; 29
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	80 81       	ld	r24, Z
    1dae:	80 39       	cpi	r24, 0x90	; 144
    1db0:	79 f4       	brne	.+30     	; 0x1dd0 <main+0x128a>
					{
						/* go to step 1*/
						UART_sendByte(REPEAT_STEP_1);
    1db2:	80 e3       	ldi	r24, 0x30	; 48
    1db4:	0e 94 85 2a 	call	0x550a	; 0x550a <UART_sendByte>
						g_NumberOfEnterpass=0;
    1db8:	10 92 97 01 	sts	0x0197, r1
						Step2_Flag =0;/*  Go out from this loop */
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	ef 51       	subi	r30, 0x1F	; 31
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	10 82       	st	Z, r1
						Step1_Flag=1;/* Active step 1 loop to enter the two passwords again*/
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	ee 51       	subi	r30, 0x1E	; 30
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	80 83       	st	Z, r24
    1dce:	0e c1       	rjmp	.+540    	; 0x1fec <main+0x14a6>


					}else if(local_flag == PASS_NOT_MATCHED)
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	ed 51       	subi	r30, 0x1D	; 29
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 81       	ld	r24, Z
    1dd8:	80 31       	cpi	r24, 0x10	; 16
    1dda:	09 f0       	breq	.+2      	; 0x1dde <main+0x1298>
    1ddc:	07 c1       	rjmp	.+526    	; 0x1fec <main+0x14a6>
					{
						/* Increment the number of entered password Wrong */
						g_NumberOfEnterpass++;
    1dde:	80 91 97 01 	lds	r24, 0x0197
    1de2:	8f 5f       	subi	r24, 0xFF	; 255
    1de4:	80 93 97 01 	sts	0x0197, r24
						/* Send PASS_NOT_MATCHED command
						 * and display it on LCD
						 * and repeat this step if the number of tries less the the max
						 * */
						UART_sendByte(PASS_NOT_MATCHED);
    1de8:	80 e1       	ldi	r24, 0x10	; 16
    1dea:	0e 94 85 2a 	call	0x550a	; 0x550a <UART_sendByte>
						LCD_clearScreen();
    1dee:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
						LCD_displayString("Wrong Pass");
    1df2:	84 ea       	ldi	r24, 0xA4	; 164
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	a8 e4       	ldi	r26, 0x48	; 72
    1e00:	b2 e4       	ldi	r27, 0x42	; 66
    1e02:	8d ab       	std	Y+53, r24	; 0x35
    1e04:	9e ab       	std	Y+54, r25	; 0x36
    1e06:	af ab       	std	Y+55, r26	; 0x37
    1e08:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e0c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e0e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e10:	98 ad       	ldd	r25, Y+56	; 0x38
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	4a ef       	ldi	r20, 0xFA	; 250
    1e18:	54 e4       	ldi	r21, 0x44	; 68
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	89 ab       	std	Y+49, r24	; 0x31
    1e24:	9a ab       	std	Y+50, r25	; 0x32
    1e26:	ab ab       	std	Y+51, r26	; 0x33
    1e28:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e30:	9c a9       	ldd	r25, Y+52	; 0x34
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e8       	ldi	r20, 0x80	; 128
    1e38:	5f e3       	ldi	r21, 0x3F	; 63
    1e3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e3e:	88 23       	and	r24, r24
    1e40:	2c f4       	brge	.+10     	; 0x1e4c <main+0x1306>
		__ticks = 1;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	98 ab       	std	Y+48, r25	; 0x30
    1e48:	8f a7       	std	Y+47, r24	; 0x2f
    1e4a:	3f c0       	rjmp	.+126    	; 0x1eca <main+0x1384>
	else if (__tmp > 65535)
    1e4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e50:	8b a9       	ldd	r24, Y+51	; 0x33
    1e52:	9c a9       	ldd	r25, Y+52	; 0x34
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	3f ef       	ldi	r19, 0xFF	; 255
    1e58:	4f e7       	ldi	r20, 0x7F	; 127
    1e5a:	57 e4       	ldi	r21, 0x47	; 71
    1e5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e60:	18 16       	cp	r1, r24
    1e62:	4c f5       	brge	.+82     	; 0x1eb6 <main+0x1370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e64:	6d a9       	ldd	r22, Y+53	; 0x35
    1e66:	7e a9       	ldd	r23, Y+54	; 0x36
    1e68:	8f a9       	ldd	r24, Y+55	; 0x37
    1e6a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e2       	ldi	r20, 0x20	; 32
    1e72:	51 e4       	ldi	r21, 0x41	; 65
    1e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	cd 01       	movw	r24, r26
    1e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	98 ab       	std	Y+48, r25	; 0x30
    1e8a:	8f a7       	std	Y+47, r24	; 0x2f
    1e8c:	0f c0       	rjmp	.+30     	; 0x1eac <main+0x1366>
    1e8e:	88 ec       	ldi	r24, 0xC8	; 200
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	9e a7       	std	Y+46, r25	; 0x2e
    1e94:	8d a7       	std	Y+45, r24	; 0x2d
    1e96:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e98:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <main+0x1354>
    1e9e:	9e a7       	std	Y+46, r25	; 0x2e
    1ea0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	98 ab       	std	Y+48, r25	; 0x30
    1eaa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eae:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	69 f7       	brne	.-38     	; 0x1e8e <main+0x1348>
    1eb4:	14 c0       	rjmp	.+40     	; 0x1ede <main+0x1398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb6:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eba:	8b a9       	ldd	r24, Y+51	; 0x33
    1ebc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	98 ab       	std	Y+48, r25	; 0x30
    1ec8:	8f a7       	std	Y+47, r24	; 0x2f
    1eca:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ecc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ece:	9c a7       	std	Y+44, r25	; 0x2c
    1ed0:	8b a7       	std	Y+43, r24	; 0x2b
    1ed2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ed4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <main+0x1390>
    1eda:	9c a7       	std	Y+44, r25	; 0x2c
    1edc:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(50);
						LCD_displayStringRowColumn(1,0,"Have    tries");
    1ede:	2f ea       	ldi	r18, 0xAF	; 175
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	a9 01       	movw	r20, r18
    1ee8:	0e 94 94 27 	call	0x4f28	; 0x4f28 <LCD_displayStringRowColumn>
						LCD_moveCursor(1,6);
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	66 e0       	ldi	r22, 0x06	; 6
    1ef0:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <LCD_moveCursor>
						LCD_intgerToString(MAX_TRIES_ENTER_PASS - g_NumberOfEnterpass);
    1ef4:	80 91 97 01 	lds	r24, 0x0197
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	83 e0       	ldi	r24, 0x03	; 3
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	82 1b       	sub	r24, r18
    1f02:	93 0b       	sbc	r25, r19
    1f04:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <LCD_intgerToString>
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	aa ef       	ldi	r26, 0xFA	; 250
    1f0e:	b3 e4       	ldi	r27, 0x43	; 67
    1f10:	8f a3       	std	Y+39, r24	; 0x27
    1f12:	98 a7       	std	Y+40, r25	; 0x28
    1f14:	a9 a7       	std	Y+41, r26	; 0x29
    1f16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f18:	6f a1       	ldd	r22, Y+39	; 0x27
    1f1a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f1c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	4a ef       	ldi	r20, 0xFA	; 250
    1f26:	54 e4       	ldi	r21, 0x44	; 68
    1f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	8b a3       	std	Y+35, r24	; 0x23
    1f32:	9c a3       	std	Y+36, r25	; 0x24
    1f34:	ad a3       	std	Y+37, r26	; 0x25
    1f36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f38:	6b a1       	ldd	r22, Y+35	; 0x23
    1f3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e8       	ldi	r20, 0x80	; 128
    1f46:	5f e3       	ldi	r21, 0x3F	; 63
    1f48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f4c:	88 23       	and	r24, r24
    1f4e:	2c f4       	brge	.+10     	; 0x1f5a <main+0x1414>
		__ticks = 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9a a3       	std	Y+34, r25	; 0x22
    1f56:	89 a3       	std	Y+33, r24	; 0x21
    1f58:	3f c0       	rjmp	.+126    	; 0x1fd8 <main+0x1492>
	else if (__tmp > 65535)
    1f5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f60:	9e a1       	ldd	r25, Y+38	; 0x26
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	3f ef       	ldi	r19, 0xFF	; 255
    1f66:	4f e7       	ldi	r20, 0x7F	; 127
    1f68:	57 e4       	ldi	r21, 0x47	; 71
    1f6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f6e:	18 16       	cp	r1, r24
    1f70:	4c f5       	brge	.+82     	; 0x1fc4 <main+0x147e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f72:	6f a1       	ldd	r22, Y+39	; 0x27
    1f74:	78 a5       	ldd	r23, Y+40	; 0x28
    1f76:	89 a5       	ldd	r24, Y+41	; 0x29
    1f78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e2       	ldi	r20, 0x20	; 32
    1f80:	51 e4       	ldi	r21, 0x41	; 65
    1f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9a a3       	std	Y+34, r25	; 0x22
    1f98:	89 a3       	std	Y+33, r24	; 0x21
    1f9a:	0f c0       	rjmp	.+30     	; 0x1fba <main+0x1474>
    1f9c:	88 ec       	ldi	r24, 0xC8	; 200
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	98 a3       	std	Y+32, r25	; 0x20
    1fa2:	8f 8f       	std	Y+31, r24	; 0x1f
    1fa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fa6:	98 a1       	ldd	r25, Y+32	; 0x20
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <main+0x1462>
    1fac:	98 a3       	std	Y+32, r25	; 0x20
    1fae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	9a a3       	std	Y+34, r25	; 0x22
    1fb8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fba:	89 a1       	ldd	r24, Y+33	; 0x21
    1fbc:	9a a1       	ldd	r25, Y+34	; 0x22
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	69 f7       	brne	.-38     	; 0x1f9c <main+0x1456>
    1fc2:	14 c0       	rjmp	.+40     	; 0x1fec <main+0x14a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fca:	9e a1       	ldd	r25, Y+38	; 0x26
    1fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	9a a3       	std	Y+34, r25	; 0x22
    1fd6:	89 a3       	std	Y+33, r24	; 0x21
    1fd8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fda:	9a a1       	ldd	r25, Y+34	; 0x22
    1fdc:	9e 8f       	std	Y+30, r25	; 0x1e
    1fde:	8d 8f       	std	Y+29, r24	; 0x1d
    1fe0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fe2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <main+0x149e>
    1fe8:	9e 8f       	std	Y+30, r25	; 0x1e
    1fea:	8d 8f       	std	Y+29, r24	; 0x1d
/*********************************************************************************************************/

		/* this loop will be active only if the two password are matched at first step
		 * and the user enter the pass less than MAX_TRIES_ENTER_PASS
		 */
			while(Step2_Flag == 2 && g_NumberOfEnterpass < MAX_TRIES_ENTER_PASS)
    1fec:	fe 01       	movw	r30, r28
    1fee:	ef 51       	subi	r30, 0x1F	; 31
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	80 81       	ld	r24, Z
    1ff4:	82 30       	cpi	r24, 0x02	; 2
    1ff6:	29 f4       	brne	.+10     	; 0x2002 <main+0x14bc>
    1ff8:	80 91 97 01 	lds	r24, 0x0197
    1ffc:	83 30       	cpi	r24, 0x03	; 3
    1ffe:	08 f4       	brcc	.+2      	; 0x2002 <main+0x14bc>
    2000:	12 cb       	rjmp	.-2524   	; 0x1626 <main+0xae0>
/*********************************************************************************************************/



			}
			if(g_NumberOfEnterpass == MAX_TRIES_ENTER_PASS)
    2002:	80 91 97 01 	lds	r24, 0x0197
    2006:	83 30       	cpi	r24, 0x03	; 3
    2008:	09 f0       	breq	.+2      	; 0x200c <main+0x14c6>
    200a:	05 cb       	rjmp	.-2550   	; 0x1616 <main+0xad0>

/*********************************************************************************************************/
/*************************************** STEP 5***********************************************************/
/*********************************************************************************************************/
				/* Send block system command to control ECU*/
				UART_sendByte(BLOCK_SYSTEM);
    200c:	80 e7       	ldi	r24, 0x70	; 112
    200e:	0e 94 85 2a 	call	0x550a	; 0x550a <UART_sendByte>
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a0 ea       	ldi	r26, 0xA0	; 160
    2018:	b1 e4       	ldi	r27, 0x41	; 65
    201a:	89 8f       	std	Y+25, r24	; 0x19
    201c:	9a 8f       	std	Y+26, r25	; 0x1a
    201e:	ab 8f       	std	Y+27, r26	; 0x1b
    2020:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2022:	69 8d       	ldd	r22, Y+25	; 0x19
    2024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	4a ef       	ldi	r20, 0xFA	; 250
    2030:	54 e4       	ldi	r21, 0x44	; 68
    2032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	8d 8b       	std	Y+21, r24	; 0x15
    203c:	9e 8b       	std	Y+22, r25	; 0x16
    203e:	af 8b       	std	Y+23, r26	; 0x17
    2040:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2042:	6d 89       	ldd	r22, Y+21	; 0x15
    2044:	7e 89       	ldd	r23, Y+22	; 0x16
    2046:	8f 89       	ldd	r24, Y+23	; 0x17
    2048:	98 8d       	ldd	r25, Y+24	; 0x18
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	5f e3       	ldi	r21, 0x3F	; 63
    2052:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2056:	88 23       	and	r24, r24
    2058:	2c f4       	brge	.+10     	; 0x2064 <main+0x151e>
		__ticks = 1;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9c 8b       	std	Y+20, r25	; 0x14
    2060:	8b 8b       	std	Y+19, r24	; 0x13
    2062:	3f c0       	rjmp	.+126    	; 0x20e2 <main+0x159c>
	else if (__tmp > 65535)
    2064:	6d 89       	ldd	r22, Y+21	; 0x15
    2066:	7e 89       	ldd	r23, Y+22	; 0x16
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	3f ef       	ldi	r19, 0xFF	; 255
    2070:	4f e7       	ldi	r20, 0x7F	; 127
    2072:	57 e4       	ldi	r21, 0x47	; 71
    2074:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2078:	18 16       	cp	r1, r24
    207a:	4c f5       	brge	.+82     	; 0x20ce <main+0x1588>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207c:	69 8d       	ldd	r22, Y+25	; 0x19
    207e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e2       	ldi	r20, 0x20	; 32
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	bc 01       	movw	r22, r24
    2096:	cd 01       	movw	r24, r26
    2098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9c 8b       	std	Y+20, r25	; 0x14
    20a2:	8b 8b       	std	Y+19, r24	; 0x13
    20a4:	0f c0       	rjmp	.+30     	; 0x20c4 <main+0x157e>
    20a6:	88 ec       	ldi	r24, 0xC8	; 200
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9a 8b       	std	Y+18, r25	; 0x12
    20ac:	89 8b       	std	Y+17, r24	; 0x11
    20ae:	89 89       	ldd	r24, Y+17	; 0x11
    20b0:	9a 89       	ldd	r25, Y+18	; 0x12
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <main+0x156c>
    20b6:	9a 8b       	std	Y+18, r25	; 0x12
    20b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ba:	8b 89       	ldd	r24, Y+19	; 0x13
    20bc:	9c 89       	ldd	r25, Y+20	; 0x14
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	9c 8b       	std	Y+20, r25	; 0x14
    20c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c4:	8b 89       	ldd	r24, Y+19	; 0x13
    20c6:	9c 89       	ldd	r25, Y+20	; 0x14
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	69 f7       	brne	.-38     	; 0x20a6 <main+0x1560>
    20cc:	14 c0       	rjmp	.+40     	; 0x20f6 <main+0x15b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ce:	6d 89       	ldd	r22, Y+21	; 0x15
    20d0:	7e 89       	ldd	r23, Y+22	; 0x16
    20d2:	8f 89       	ldd	r24, Y+23	; 0x17
    20d4:	98 8d       	ldd	r25, Y+24	; 0x18
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9c 8b       	std	Y+20, r25	; 0x14
    20e0:	8b 8b       	std	Y+19, r24	; 0x13
    20e2:	8b 89       	ldd	r24, Y+19	; 0x13
    20e4:	9c 89       	ldd	r25, Y+20	; 0x14
    20e6:	98 8b       	std	Y+16, r25	; 0x10
    20e8:	8f 87       	std	Y+15, r24	; 0x0f
    20ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ec:	98 89       	ldd	r25, Y+16	; 0x10
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <main+0x15a8>
    20f2:	98 8b       	std	Y+16, r25	; 0x10
    20f4:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(20);
				A_DLSS_VoidStep5ErrorMassage();
    20f6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <A_DLSS_VoidStep5ErrorMassage>
				/* the system will still here until the interrupt clear the g_NumberOfEnterpass*/
				while(g_NumberOfEnterpass == MAX_TRIES_ENTER_PASS);
    20fa:	80 91 97 01 	lds	r24, 0x0197
    20fe:	83 30       	cpi	r24, 0x03	; 3
    2100:	e1 f3       	breq	.-8      	; 0x20fa <main+0x15b4>
				/* Send Unblock system command to control ECU after 1 minute*/
				UART_sendByte(UNBLOCK_SYSTEM);
    2102:	80 e8       	ldi	r24, 0x80	; 128
    2104:	0e 94 85 2a 	call	0x550a	; 0x550a <UART_sendByte>
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	a0 ea       	ldi	r26, 0xA0	; 160
    210e:	b1 e4       	ldi	r27, 0x41	; 65
    2110:	8b 87       	std	Y+11, r24	; 0x0b
    2112:	9c 87       	std	Y+12, r25	; 0x0c
    2114:	ad 87       	std	Y+13, r26	; 0x0d
    2116:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2118:	6b 85       	ldd	r22, Y+11	; 0x0b
    211a:	7c 85       	ldd	r23, Y+12	; 0x0c
    211c:	8d 85       	ldd	r24, Y+13	; 0x0d
    211e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	4a ef       	ldi	r20, 0xFA	; 250
    2126:	54 e4       	ldi	r21, 0x44	; 68
    2128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	8f 83       	std	Y+7, r24	; 0x07
    2132:	98 87       	std	Y+8, r25	; 0x08
    2134:	a9 87       	std	Y+9, r26	; 0x09
    2136:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2138:	6f 81       	ldd	r22, Y+7	; 0x07
    213a:	78 85       	ldd	r23, Y+8	; 0x08
    213c:	89 85       	ldd	r24, Y+9	; 0x09
    213e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e8       	ldi	r20, 0x80	; 128
    2146:	5f e3       	ldi	r21, 0x3F	; 63
    2148:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    214c:	88 23       	and	r24, r24
    214e:	2c f4       	brge	.+10     	; 0x215a <main+0x1614>
		__ticks = 1;
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	9e 83       	std	Y+6, r25	; 0x06
    2156:	8d 83       	std	Y+5, r24	; 0x05
    2158:	3f c0       	rjmp	.+126    	; 0x21d8 <main+0x1692>
	else if (__tmp > 65535)
    215a:	6f 81       	ldd	r22, Y+7	; 0x07
    215c:	78 85       	ldd	r23, Y+8	; 0x08
    215e:	89 85       	ldd	r24, Y+9	; 0x09
    2160:	9a 85       	ldd	r25, Y+10	; 0x0a
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	3f ef       	ldi	r19, 0xFF	; 255
    2166:	4f e7       	ldi	r20, 0x7F	; 127
    2168:	57 e4       	ldi	r21, 0x47	; 71
    216a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    216e:	18 16       	cp	r1, r24
    2170:	4c f5       	brge	.+82     	; 0x21c4 <main+0x167e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2172:	6b 85       	ldd	r22, Y+11	; 0x0b
    2174:	7c 85       	ldd	r23, Y+12	; 0x0c
    2176:	8d 85       	ldd	r24, Y+13	; 0x0d
    2178:	9e 85       	ldd	r25, Y+14	; 0x0e
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e2       	ldi	r20, 0x20	; 32
    2180:	51 e4       	ldi	r21, 0x41	; 65
    2182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	9e 83       	std	Y+6, r25	; 0x06
    2198:	8d 83       	std	Y+5, r24	; 0x05
    219a:	0f c0       	rjmp	.+30     	; 0x21ba <main+0x1674>
    219c:	88 ec       	ldi	r24, 0xC8	; 200
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	9c 83       	std	Y+4, r25	; 0x04
    21a2:	8b 83       	std	Y+3, r24	; 0x03
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <main+0x1662>
    21ac:	9c 83       	std	Y+4, r25	; 0x04
    21ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b0:	8d 81       	ldd	r24, Y+5	; 0x05
    21b2:	9e 81       	ldd	r25, Y+6	; 0x06
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	9e 83       	std	Y+6, r25	; 0x06
    21b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	69 f7       	brne	.-38     	; 0x219c <main+0x1656>
    21c2:	29 ca       	rjmp	.-2990   	; 0x1616 <main+0xad0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c4:	6f 81       	ldd	r22, Y+7	; 0x07
    21c6:	78 85       	ldd	r23, Y+8	; 0x08
    21c8:	89 85       	ldd	r24, Y+9	; 0x09
    21ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    21cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	9e 83       	std	Y+6, r25	; 0x06
    21d6:	8d 83       	std	Y+5, r24	; 0x05
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	9e 81       	ldd	r25, Y+6	; 0x06
    21dc:	9a 83       	std	Y+2, r25	; 0x02
    21de:	89 83       	std	Y+1, r24	; 0x01
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	9a 81       	ldd	r25, Y+2	; 0x02
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <main+0x169e>
    21e8:	9a 83       	std	Y+2, r25	; 0x02
    21ea:	89 83       	std	Y+1, r24	; 0x01
    21ec:	14 ca       	rjmp	.-3032   	; 0x1616 <main+0xad0>

000021ee <A_DLSS_VoidTakePassword_1>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void A_DLSS_VoidTakePassword_1(void)
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	ac 97       	sbiw	r28, 0x2c	; 44
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8KeyValue= KEY_NOT_PRESSED;
    2202:	8f ef       	ldi	r24, 0xFF	; 255
    2204:	8c a7       	std	Y+44, r24	; 0x2c
	uint8 Copy_u8_counter =0;
    2206:	1b a6       	std	Y+43, r1	; 0x2b
	LCD_clearScreen();
    2208:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	a0 ea       	ldi	r26, 0xA0	; 160
    2212:	b1 e4       	ldi	r27, 0x41	; 65
    2214:	8f a3       	std	Y+39, r24	; 0x27
    2216:	98 a7       	std	Y+40, r25	; 0x28
    2218:	a9 a7       	std	Y+41, r26	; 0x29
    221a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221c:	6f a1       	ldd	r22, Y+39	; 0x27
    221e:	78 a5       	ldd	r23, Y+40	; 0x28
    2220:	89 a5       	ldd	r24, Y+41	; 0x29
    2222:	9a a5       	ldd	r25, Y+42	; 0x2a
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	4a ef       	ldi	r20, 0xFA	; 250
    222a:	54 e4       	ldi	r21, 0x44	; 68
    222c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	8b a3       	std	Y+35, r24	; 0x23
    2236:	9c a3       	std	Y+36, r25	; 0x24
    2238:	ad a3       	std	Y+37, r26	; 0x25
    223a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    223c:	6b a1       	ldd	r22, Y+35	; 0x23
    223e:	7c a1       	ldd	r23, Y+36	; 0x24
    2240:	8d a1       	ldd	r24, Y+37	; 0x25
    2242:	9e a1       	ldd	r25, Y+38	; 0x26
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e8       	ldi	r20, 0x80	; 128
    224a:	5f e3       	ldi	r21, 0x3F	; 63
    224c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2250:	88 23       	and	r24, r24
    2252:	2c f4       	brge	.+10     	; 0x225e <A_DLSS_VoidTakePassword_1+0x70>
		__ticks = 1;
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	9a a3       	std	Y+34, r25	; 0x22
    225a:	89 a3       	std	Y+33, r24	; 0x21
    225c:	3f c0       	rjmp	.+126    	; 0x22dc <A_DLSS_VoidTakePassword_1+0xee>
	else if (__tmp > 65535)
    225e:	6b a1       	ldd	r22, Y+35	; 0x23
    2260:	7c a1       	ldd	r23, Y+36	; 0x24
    2262:	8d a1       	ldd	r24, Y+37	; 0x25
    2264:	9e a1       	ldd	r25, Y+38	; 0x26
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	3f ef       	ldi	r19, 0xFF	; 255
    226a:	4f e7       	ldi	r20, 0x7F	; 127
    226c:	57 e4       	ldi	r21, 0x47	; 71
    226e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2272:	18 16       	cp	r1, r24
    2274:	4c f5       	brge	.+82     	; 0x22c8 <A_DLSS_VoidTakePassword_1+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2276:	6f a1       	ldd	r22, Y+39	; 0x27
    2278:	78 a5       	ldd	r23, Y+40	; 0x28
    227a:	89 a5       	ldd	r24, Y+41	; 0x29
    227c:	9a a5       	ldd	r25, Y+42	; 0x2a
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	40 e2       	ldi	r20, 0x20	; 32
    2284:	51 e4       	ldi	r21, 0x41	; 65
    2286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	9a a3       	std	Y+34, r25	; 0x22
    229c:	89 a3       	std	Y+33, r24	; 0x21
    229e:	0f c0       	rjmp	.+30     	; 0x22be <A_DLSS_VoidTakePassword_1+0xd0>
    22a0:	88 ec       	ldi	r24, 0xC8	; 200
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	98 a3       	std	Y+32, r25	; 0x20
    22a6:	8f 8f       	std	Y+31, r24	; 0x1f
    22a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22aa:	98 a1       	ldd	r25, Y+32	; 0x20
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <A_DLSS_VoidTakePassword_1+0xbe>
    22b0:	98 a3       	std	Y+32, r25	; 0x20
    22b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b4:	89 a1       	ldd	r24, Y+33	; 0x21
    22b6:	9a a1       	ldd	r25, Y+34	; 0x22
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	9a a3       	std	Y+34, r25	; 0x22
    22bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22be:	89 a1       	ldd	r24, Y+33	; 0x21
    22c0:	9a a1       	ldd	r25, Y+34	; 0x22
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	69 f7       	brne	.-38     	; 0x22a0 <A_DLSS_VoidTakePassword_1+0xb2>
    22c6:	14 c0       	rjmp	.+40     	; 0x22f0 <A_DLSS_VoidTakePassword_1+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c8:	6b a1       	ldd	r22, Y+35	; 0x23
    22ca:	7c a1       	ldd	r23, Y+36	; 0x24
    22cc:	8d a1       	ldd	r24, Y+37	; 0x25
    22ce:	9e a1       	ldd	r25, Y+38	; 0x26
    22d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	9a a3       	std	Y+34, r25	; 0x22
    22da:	89 a3       	std	Y+33, r24	; 0x21
    22dc:	89 a1       	ldd	r24, Y+33	; 0x21
    22de:	9a a1       	ldd	r25, Y+34	; 0x22
    22e0:	9e 8f       	std	Y+30, r25	; 0x1e
    22e2:	8d 8f       	std	Y+29, r24	; 0x1d
    22e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <A_DLSS_VoidTakePassword_1+0xfa>
    22ec:	9e 8f       	std	Y+30, r25	; 0x1e
    22ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	LCD_displayString("PLZ Enter Pass: ");
    22f0:	8d eb       	ldi	r24, 0xBD	; 189
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	a0 e2       	ldi	r26, 0x20	; 32
    22fe:	b1 e4       	ldi	r27, 0x41	; 65
    2300:	89 8f       	std	Y+25, r24	; 0x19
    2302:	9a 8f       	std	Y+26, r25	; 0x1a
    2304:	ab 8f       	std	Y+27, r26	; 0x1b
    2306:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2308:	69 8d       	ldd	r22, Y+25	; 0x19
    230a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    230c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    230e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	4a ef       	ldi	r20, 0xFA	; 250
    2316:	54 e4       	ldi	r21, 0x44	; 68
    2318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8d 8b       	std	Y+21, r24	; 0x15
    2322:	9e 8b       	std	Y+22, r25	; 0x16
    2324:	af 8b       	std	Y+23, r26	; 0x17
    2326:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2328:	6d 89       	ldd	r22, Y+21	; 0x15
    232a:	7e 89       	ldd	r23, Y+22	; 0x16
    232c:	8f 89       	ldd	r24, Y+23	; 0x17
    232e:	98 8d       	ldd	r25, Y+24	; 0x18
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e8       	ldi	r20, 0x80	; 128
    2336:	5f e3       	ldi	r21, 0x3F	; 63
    2338:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233c:	88 23       	and	r24, r24
    233e:	2c f4       	brge	.+10     	; 0x234a <A_DLSS_VoidTakePassword_1+0x15c>
		__ticks = 1;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	9c 8b       	std	Y+20, r25	; 0x14
    2346:	8b 8b       	std	Y+19, r24	; 0x13
    2348:	3f c0       	rjmp	.+126    	; 0x23c8 <A_DLSS_VoidTakePassword_1+0x1da>
	else if (__tmp > 65535)
    234a:	6d 89       	ldd	r22, Y+21	; 0x15
    234c:	7e 89       	ldd	r23, Y+22	; 0x16
    234e:	8f 89       	ldd	r24, Y+23	; 0x17
    2350:	98 8d       	ldd	r25, Y+24	; 0x18
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	3f ef       	ldi	r19, 0xFF	; 255
    2356:	4f e7       	ldi	r20, 0x7F	; 127
    2358:	57 e4       	ldi	r21, 0x47	; 71
    235a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    235e:	18 16       	cp	r1, r24
    2360:	4c f5       	brge	.+82     	; 0x23b4 <A_DLSS_VoidTakePassword_1+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2362:	69 8d       	ldd	r22, Y+25	; 0x19
    2364:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2366:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2368:	9c 8d       	ldd	r25, Y+28	; 0x1c
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e2       	ldi	r20, 0x20	; 32
    2370:	51 e4       	ldi	r21, 0x41	; 65
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	bc 01       	movw	r22, r24
    237c:	cd 01       	movw	r24, r26
    237e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9c 8b       	std	Y+20, r25	; 0x14
    2388:	8b 8b       	std	Y+19, r24	; 0x13
    238a:	0f c0       	rjmp	.+30     	; 0x23aa <A_DLSS_VoidTakePassword_1+0x1bc>
    238c:	88 ec       	ldi	r24, 0xC8	; 200
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	9a 8b       	std	Y+18, r25	; 0x12
    2392:	89 8b       	std	Y+17, r24	; 0x11
    2394:	89 89       	ldd	r24, Y+17	; 0x11
    2396:	9a 89       	ldd	r25, Y+18	; 0x12
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <A_DLSS_VoidTakePassword_1+0x1aa>
    239c:	9a 8b       	std	Y+18, r25	; 0x12
    239e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a0:	8b 89       	ldd	r24, Y+19	; 0x13
    23a2:	9c 89       	ldd	r25, Y+20	; 0x14
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23aa:	8b 89       	ldd	r24, Y+19	; 0x13
    23ac:	9c 89       	ldd	r25, Y+20	; 0x14
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	69 f7       	brne	.-38     	; 0x238c <A_DLSS_VoidTakePassword_1+0x19e>
    23b2:	14 c0       	rjmp	.+40     	; 0x23dc <A_DLSS_VoidTakePassword_1+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b4:	6d 89       	ldd	r22, Y+21	; 0x15
    23b6:	7e 89       	ldd	r23, Y+22	; 0x16
    23b8:	8f 89       	ldd	r24, Y+23	; 0x17
    23ba:	98 8d       	ldd	r25, Y+24	; 0x18
    23bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	9c 8b       	std	Y+20, r25	; 0x14
    23c6:	8b 8b       	std	Y+19, r24	; 0x13
    23c8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ca:	9c 89       	ldd	r25, Y+20	; 0x14
    23cc:	98 8b       	std	Y+16, r25	; 0x10
    23ce:	8f 87       	std	Y+15, r24	; 0x0f
    23d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d2:	98 89       	ldd	r25, Y+16	; 0x10
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <A_DLSS_VoidTakePassword_1+0x1e6>
    23d8:	98 8b       	std	Y+16, r25	; 0x10
    23da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_moveCursor(1,4);
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	64 e0       	ldi	r22, 0x04	; 4
    23e0:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <LCD_moveCursor>
    23e4:	82 c0       	rjmp	.+260    	; 0x24ea <A_DLSS_VoidTakePassword_1+0x2fc>

	while(Copy_u8_counter < PASS_SIZE)
	{

		Local_u8KeyValue = KEYPAD_getPressedKey();
    23e6:	0e 94 12 21 	call	0x4224	; 0x4224 <KEYPAD_getPressedKey>
    23ea:	8c a7       	std	Y+44, r24	; 0x2c
		if((Local_u8KeyValue >= 0) && (Local_u8KeyValue <= 9))
    23ec:	8c a5       	ldd	r24, Y+44	; 0x2c
    23ee:	8a 30       	cpi	r24, 0x0A	; 10
    23f0:	08 f0       	brcs	.+2      	; 0x23f4 <A_DLSS_VoidTakePassword_1+0x206>
    23f2:	7b c0       	rjmp	.+246    	; 0x24ea <A_DLSS_VoidTakePassword_1+0x2fc>
		{
			UART_sendByte(Local_u8KeyValue);
    23f4:	8c a5       	ldd	r24, Y+44	; 0x2c
    23f6:	0e 94 85 2a 	call	0x550a	; 0x550a <UART_sendByte>
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	a8 e4       	ldi	r26, 0x48	; 72
    2400:	b2 e4       	ldi	r27, 0x42	; 66
    2402:	8b 87       	std	Y+11, r24	; 0x0b
    2404:	9c 87       	std	Y+12, r25	; 0x0c
    2406:	ad 87       	std	Y+13, r26	; 0x0d
    2408:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240a:	6b 85       	ldd	r22, Y+11	; 0x0b
    240c:	7c 85       	ldd	r23, Y+12	; 0x0c
    240e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2410:	9e 85       	ldd	r25, Y+14	; 0x0e
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	4a ef       	ldi	r20, 0xFA	; 250
    2418:	54 e4       	ldi	r21, 0x44	; 68
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	8f 83       	std	Y+7, r24	; 0x07
    2424:	98 87       	std	Y+8, r25	; 0x08
    2426:	a9 87       	std	Y+9, r26	; 0x09
    2428:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    242a:	6f 81       	ldd	r22, Y+7	; 0x07
    242c:	78 85       	ldd	r23, Y+8	; 0x08
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e8       	ldi	r20, 0x80	; 128
    2438:	5f e3       	ldi	r21, 0x3F	; 63
    243a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    243e:	88 23       	and	r24, r24
    2440:	2c f4       	brge	.+10     	; 0x244c <A_DLSS_VoidTakePassword_1+0x25e>
		__ticks = 1;
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9e 83       	std	Y+6, r25	; 0x06
    2448:	8d 83       	std	Y+5, r24	; 0x05
    244a:	3f c0       	rjmp	.+126    	; 0x24ca <A_DLSS_VoidTakePassword_1+0x2dc>
	else if (__tmp > 65535)
    244c:	6f 81       	ldd	r22, Y+7	; 0x07
    244e:	78 85       	ldd	r23, Y+8	; 0x08
    2450:	89 85       	ldd	r24, Y+9	; 0x09
    2452:	9a 85       	ldd	r25, Y+10	; 0x0a
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	3f ef       	ldi	r19, 0xFF	; 255
    2458:	4f e7       	ldi	r20, 0x7F	; 127
    245a:	57 e4       	ldi	r21, 0x47	; 71
    245c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2460:	18 16       	cp	r1, r24
    2462:	4c f5       	brge	.+82     	; 0x24b6 <A_DLSS_VoidTakePassword_1+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2464:	6b 85       	ldd	r22, Y+11	; 0x0b
    2466:	7c 85       	ldd	r23, Y+12	; 0x0c
    2468:	8d 85       	ldd	r24, Y+13	; 0x0d
    246a:	9e 85       	ldd	r25, Y+14	; 0x0e
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e2       	ldi	r20, 0x20	; 32
    2472:	51 e4       	ldi	r21, 0x41	; 65
    2474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	bc 01       	movw	r22, r24
    247e:	cd 01       	movw	r24, r26
    2480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	9e 83       	std	Y+6, r25	; 0x06
    248a:	8d 83       	std	Y+5, r24	; 0x05
    248c:	0f c0       	rjmp	.+30     	; 0x24ac <A_DLSS_VoidTakePassword_1+0x2be>
    248e:	88 ec       	ldi	r24, 0xC8	; 200
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	9c 83       	std	Y+4, r25	; 0x04
    2494:	8b 83       	std	Y+3, r24	; 0x03
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	9c 81       	ldd	r25, Y+4	; 0x04
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	f1 f7       	brne	.-4      	; 0x249a <A_DLSS_VoidTakePassword_1+0x2ac>
    249e:	9c 83       	std	Y+4, r25	; 0x04
    24a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a2:	8d 81       	ldd	r24, Y+5	; 0x05
    24a4:	9e 81       	ldd	r25, Y+6	; 0x06
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	9e 83       	std	Y+6, r25	; 0x06
    24aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	9e 81       	ldd	r25, Y+6	; 0x06
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	69 f7       	brne	.-38     	; 0x248e <A_DLSS_VoidTakePassword_1+0x2a0>
    24b4:	14 c0       	rjmp	.+40     	; 0x24de <A_DLSS_VoidTakePassword_1+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b6:	6f 81       	ldd	r22, Y+7	; 0x07
    24b8:	78 85       	ldd	r23, Y+8	; 0x08
    24ba:	89 85       	ldd	r24, Y+9	; 0x09
    24bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	9e 83       	std	Y+6, r25	; 0x06
    24c8:	8d 83       	std	Y+5, r24	; 0x05
    24ca:	8d 81       	ldd	r24, Y+5	; 0x05
    24cc:	9e 81       	ldd	r25, Y+6	; 0x06
    24ce:	9a 83       	std	Y+2, r25	; 0x02
    24d0:	89 83       	std	Y+1, r24	; 0x01
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	9a 81       	ldd	r25, Y+2	; 0x02
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <A_DLSS_VoidTakePassword_1+0x2e8>
    24da:	9a 83       	std	Y+2, r25	; 0x02
    24dc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			LCD_displayCharacter('*');
    24de:	8a e2       	ldi	r24, 0x2A	; 42
    24e0:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <LCD_displayCharacter>
			Copy_u8_counter++;
    24e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    24e6:	8f 5f       	subi	r24, 0xFF	; 255
    24e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(20);
	LCD_displayString("PLZ Enter Pass: ");
	_delay_ms(10);
	LCD_moveCursor(1,4);

	while(Copy_u8_counter < PASS_SIZE)
    24ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ec:	85 30       	cpi	r24, 0x05	; 5
    24ee:	08 f4       	brcc	.+2      	; 0x24f2 <A_DLSS_VoidTakePassword_1+0x304>
    24f0:	7a cf       	rjmp	.-268    	; 0x23e6 <A_DLSS_VoidTakePassword_1+0x1f8>
			LCD_displayCharacter('*');
			Copy_u8_counter++;
		}

	}
	while(KEYPAD_getPressedKey() != '=' );
    24f2:	0e 94 12 21 	call	0x4224	; 0x4224 <KEYPAD_getPressedKey>
    24f6:	8d 33       	cpi	r24, 0x3D	; 61
    24f8:	e1 f7       	brne	.-8      	; 0x24f2 <A_DLSS_VoidTakePassword_1+0x304>

}
    24fa:	ac 96       	adiw	r28, 0x2c	; 44
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	de bf       	out	0x3e, r29	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	cd bf       	out	0x3d, r28	; 61
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <A_DLSS_VoidTakePassword_2>:
void A_DLSS_VoidTakePassword_2(void)
{
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	ac 97       	sbiw	r28, 0x2c	; 44
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	de bf       	out	0x3e, r29	; 62
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8KeyValue= KEY_NOT_PRESSED;
    2520:	8f ef       	ldi	r24, 0xFF	; 255
    2522:	8c a7       	std	Y+44, r24	; 0x2c
	uint8 Copy_u8_counter =0;
    2524:	1b a6       	std	Y+43, r1	; 0x2b
	LCD_clearScreen();
    2526:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	a0 ea       	ldi	r26, 0xA0	; 160
    2530:	b1 e4       	ldi	r27, 0x41	; 65
    2532:	8f a3       	std	Y+39, r24	; 0x27
    2534:	98 a7       	std	Y+40, r25	; 0x28
    2536:	a9 a7       	std	Y+41, r26	; 0x29
    2538:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253a:	6f a1       	ldd	r22, Y+39	; 0x27
    253c:	78 a5       	ldd	r23, Y+40	; 0x28
    253e:	89 a5       	ldd	r24, Y+41	; 0x29
    2540:	9a a5       	ldd	r25, Y+42	; 0x2a
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	4a ef       	ldi	r20, 0xFA	; 250
    2548:	54 e4       	ldi	r21, 0x44	; 68
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	8b a3       	std	Y+35, r24	; 0x23
    2554:	9c a3       	std	Y+36, r25	; 0x24
    2556:	ad a3       	std	Y+37, r26	; 0x25
    2558:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    255a:	6b a1       	ldd	r22, Y+35	; 0x23
    255c:	7c a1       	ldd	r23, Y+36	; 0x24
    255e:	8d a1       	ldd	r24, Y+37	; 0x25
    2560:	9e a1       	ldd	r25, Y+38	; 0x26
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e8       	ldi	r20, 0x80	; 128
    2568:	5f e3       	ldi	r21, 0x3F	; 63
    256a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    256e:	88 23       	and	r24, r24
    2570:	2c f4       	brge	.+10     	; 0x257c <A_DLSS_VoidTakePassword_2+0x70>
		__ticks = 1;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9a a3       	std	Y+34, r25	; 0x22
    2578:	89 a3       	std	Y+33, r24	; 0x21
    257a:	3f c0       	rjmp	.+126    	; 0x25fa <A_DLSS_VoidTakePassword_2+0xee>
	else if (__tmp > 65535)
    257c:	6b a1       	ldd	r22, Y+35	; 0x23
    257e:	7c a1       	ldd	r23, Y+36	; 0x24
    2580:	8d a1       	ldd	r24, Y+37	; 0x25
    2582:	9e a1       	ldd	r25, Y+38	; 0x26
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	3f ef       	ldi	r19, 0xFF	; 255
    2588:	4f e7       	ldi	r20, 0x7F	; 127
    258a:	57 e4       	ldi	r21, 0x47	; 71
    258c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2590:	18 16       	cp	r1, r24
    2592:	4c f5       	brge	.+82     	; 0x25e6 <A_DLSS_VoidTakePassword_2+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2594:	6f a1       	ldd	r22, Y+39	; 0x27
    2596:	78 a5       	ldd	r23, Y+40	; 0x28
    2598:	89 a5       	ldd	r24, Y+41	; 0x29
    259a:	9a a5       	ldd	r25, Y+42	; 0x2a
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e2       	ldi	r20, 0x20	; 32
    25a2:	51 e4       	ldi	r21, 0x41	; 65
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	9a a3       	std	Y+34, r25	; 0x22
    25ba:	89 a3       	std	Y+33, r24	; 0x21
    25bc:	0f c0       	rjmp	.+30     	; 0x25dc <A_DLSS_VoidTakePassword_2+0xd0>
    25be:	88 ec       	ldi	r24, 0xC8	; 200
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	98 a3       	std	Y+32, r25	; 0x20
    25c4:	8f 8f       	std	Y+31, r24	; 0x1f
    25c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25c8:	98 a1       	ldd	r25, Y+32	; 0x20
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <A_DLSS_VoidTakePassword_2+0xbe>
    25ce:	98 a3       	std	Y+32, r25	; 0x20
    25d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d2:	89 a1       	ldd	r24, Y+33	; 0x21
    25d4:	9a a1       	ldd	r25, Y+34	; 0x22
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	9a a3       	std	Y+34, r25	; 0x22
    25da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25dc:	89 a1       	ldd	r24, Y+33	; 0x21
    25de:	9a a1       	ldd	r25, Y+34	; 0x22
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	69 f7       	brne	.-38     	; 0x25be <A_DLSS_VoidTakePassword_2+0xb2>
    25e4:	14 c0       	rjmp	.+40     	; 0x260e <A_DLSS_VoidTakePassword_2+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e6:	6b a1       	ldd	r22, Y+35	; 0x23
    25e8:	7c a1       	ldd	r23, Y+36	; 0x24
    25ea:	8d a1       	ldd	r24, Y+37	; 0x25
    25ec:	9e a1       	ldd	r25, Y+38	; 0x26
    25ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9a a3       	std	Y+34, r25	; 0x22
    25f8:	89 a3       	std	Y+33, r24	; 0x21
    25fa:	89 a1       	ldd	r24, Y+33	; 0x21
    25fc:	9a a1       	ldd	r25, Y+34	; 0x22
    25fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2600:	8d 8f       	std	Y+29, r24	; 0x1d
    2602:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2604:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <A_DLSS_VoidTakePassword_2+0xfa>
    260a:	9e 8f       	std	Y+30, r25	; 0x1e
    260c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	LCD_displayString("PLZ Re-Enter the");
    260e:	8e ec       	ldi	r24, 0xCE	; 206
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a0 e2       	ldi	r26, 0x20	; 32
    261c:	b1 e4       	ldi	r27, 0x41	; 65
    261e:	89 8f       	std	Y+25, r24	; 0x19
    2620:	9a 8f       	std	Y+26, r25	; 0x1a
    2622:	ab 8f       	std	Y+27, r26	; 0x1b
    2624:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2626:	69 8d       	ldd	r22, Y+25	; 0x19
    2628:	7a 8d       	ldd	r23, Y+26	; 0x1a
    262a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    262c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	4a ef       	ldi	r20, 0xFA	; 250
    2634:	54 e4       	ldi	r21, 0x44	; 68
    2636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	8d 8b       	std	Y+21, r24	; 0x15
    2640:	9e 8b       	std	Y+22, r25	; 0x16
    2642:	af 8b       	std	Y+23, r26	; 0x17
    2644:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2646:	6d 89       	ldd	r22, Y+21	; 0x15
    2648:	7e 89       	ldd	r23, Y+22	; 0x16
    264a:	8f 89       	ldd	r24, Y+23	; 0x17
    264c:	98 8d       	ldd	r25, Y+24	; 0x18
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e8       	ldi	r20, 0x80	; 128
    2654:	5f e3       	ldi	r21, 0x3F	; 63
    2656:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    265a:	88 23       	and	r24, r24
    265c:	2c f4       	brge	.+10     	; 0x2668 <A_DLSS_VoidTakePassword_2+0x15c>
		__ticks = 1;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	9c 8b       	std	Y+20, r25	; 0x14
    2664:	8b 8b       	std	Y+19, r24	; 0x13
    2666:	3f c0       	rjmp	.+126    	; 0x26e6 <A_DLSS_VoidTakePassword_2+0x1da>
	else if (__tmp > 65535)
    2668:	6d 89       	ldd	r22, Y+21	; 0x15
    266a:	7e 89       	ldd	r23, Y+22	; 0x16
    266c:	8f 89       	ldd	r24, Y+23	; 0x17
    266e:	98 8d       	ldd	r25, Y+24	; 0x18
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	3f ef       	ldi	r19, 0xFF	; 255
    2674:	4f e7       	ldi	r20, 0x7F	; 127
    2676:	57 e4       	ldi	r21, 0x47	; 71
    2678:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    267c:	18 16       	cp	r1, r24
    267e:	4c f5       	brge	.+82     	; 0x26d2 <A_DLSS_VoidTakePassword_2+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2680:	69 8d       	ldd	r22, Y+25	; 0x19
    2682:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2684:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2686:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9c 8b       	std	Y+20, r25	; 0x14
    26a6:	8b 8b       	std	Y+19, r24	; 0x13
    26a8:	0f c0       	rjmp	.+30     	; 0x26c8 <A_DLSS_VoidTakePassword_2+0x1bc>
    26aa:	88 ec       	ldi	r24, 0xC8	; 200
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	9a 8b       	std	Y+18, r25	; 0x12
    26b0:	89 8b       	std	Y+17, r24	; 0x11
    26b2:	89 89       	ldd	r24, Y+17	; 0x11
    26b4:	9a 89       	ldd	r25, Y+18	; 0x12
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <A_DLSS_VoidTakePassword_2+0x1aa>
    26ba:	9a 8b       	std	Y+18, r25	; 0x12
    26bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	8b 89       	ldd	r24, Y+19	; 0x13
    26c0:	9c 89       	ldd	r25, Y+20	; 0x14
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	9c 8b       	std	Y+20, r25	; 0x14
    26c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ca:	9c 89       	ldd	r25, Y+20	; 0x14
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	69 f7       	brne	.-38     	; 0x26aa <A_DLSS_VoidTakePassword_2+0x19e>
    26d0:	14 c0       	rjmp	.+40     	; 0x26fa <A_DLSS_VoidTakePassword_2+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d2:	6d 89       	ldd	r22, Y+21	; 0x15
    26d4:	7e 89       	ldd	r23, Y+22	; 0x16
    26d6:	8f 89       	ldd	r24, Y+23	; 0x17
    26d8:	98 8d       	ldd	r25, Y+24	; 0x18
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	9c 8b       	std	Y+20, r25	; 0x14
    26e4:	8b 8b       	std	Y+19, r24	; 0x13
    26e6:	8b 89       	ldd	r24, Y+19	; 0x13
    26e8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ea:	98 8b       	std	Y+16, r25	; 0x10
    26ec:	8f 87       	std	Y+15, r24	; 0x0f
    26ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f0:	98 89       	ldd	r25, Y+16	; 0x10
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <A_DLSS_VoidTakePassword_2+0x1e6>
    26f6:	98 8b       	std	Y+16, r25	; 0x10
    26f8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_moveCursor(1,0);
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	60 e0       	ldi	r22, 0x00	; 0
    26fe:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <LCD_moveCursor>
	LCD_displayString("same pass:");
    2702:	8f ed       	ldi	r24, 0xDF	; 223
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
    270a:	82 c0       	rjmp	.+260    	; 0x2810 <A_DLSS_VoidTakePassword_2+0x304>
	while(Copy_u8_counter < PASS_SIZE)
	{

		Local_u8KeyValue = KEYPAD_getPressedKey();
    270c:	0e 94 12 21 	call	0x4224	; 0x4224 <KEYPAD_getPressedKey>
    2710:	8c a7       	std	Y+44, r24	; 0x2c
		if((Local_u8KeyValue >= 0) && (Local_u8KeyValue <= 9))
    2712:	8c a5       	ldd	r24, Y+44	; 0x2c
    2714:	8a 30       	cpi	r24, 0x0A	; 10
    2716:	08 f0       	brcs	.+2      	; 0x271a <A_DLSS_VoidTakePassword_2+0x20e>
    2718:	7b c0       	rjmp	.+246    	; 0x2810 <A_DLSS_VoidTakePassword_2+0x304>
		{
			UART_sendByte(Local_u8KeyValue);
    271a:	8c a5       	ldd	r24, Y+44	; 0x2c
    271c:	0e 94 85 2a 	call	0x550a	; 0x550a <UART_sendByte>
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	a8 e4       	ldi	r26, 0x48	; 72
    2726:	b2 e4       	ldi	r27, 0x42	; 66
    2728:	8b 87       	std	Y+11, r24	; 0x0b
    272a:	9c 87       	std	Y+12, r25	; 0x0c
    272c:	ad 87       	std	Y+13, r26	; 0x0d
    272e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2730:	6b 85       	ldd	r22, Y+11	; 0x0b
    2732:	7c 85       	ldd	r23, Y+12	; 0x0c
    2734:	8d 85       	ldd	r24, Y+13	; 0x0d
    2736:	9e 85       	ldd	r25, Y+14	; 0x0e
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	4a ef       	ldi	r20, 0xFA	; 250
    273e:	54 e4       	ldi	r21, 0x44	; 68
    2740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	8f 83       	std	Y+7, r24	; 0x07
    274a:	98 87       	std	Y+8, r25	; 0x08
    274c:	a9 87       	std	Y+9, r26	; 0x09
    274e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2750:	6f 81       	ldd	r22, Y+7	; 0x07
    2752:	78 85       	ldd	r23, Y+8	; 0x08
    2754:	89 85       	ldd	r24, Y+9	; 0x09
    2756:	9a 85       	ldd	r25, Y+10	; 0x0a
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e8       	ldi	r20, 0x80	; 128
    275e:	5f e3       	ldi	r21, 0x3F	; 63
    2760:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2764:	88 23       	and	r24, r24
    2766:	2c f4       	brge	.+10     	; 0x2772 <A_DLSS_VoidTakePassword_2+0x266>
		__ticks = 1;
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	9e 83       	std	Y+6, r25	; 0x06
    276e:	8d 83       	std	Y+5, r24	; 0x05
    2770:	3f c0       	rjmp	.+126    	; 0x27f0 <A_DLSS_VoidTakePassword_2+0x2e4>
	else if (__tmp > 65535)
    2772:	6f 81       	ldd	r22, Y+7	; 0x07
    2774:	78 85       	ldd	r23, Y+8	; 0x08
    2776:	89 85       	ldd	r24, Y+9	; 0x09
    2778:	9a 85       	ldd	r25, Y+10	; 0x0a
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	3f ef       	ldi	r19, 0xFF	; 255
    277e:	4f e7       	ldi	r20, 0x7F	; 127
    2780:	57 e4       	ldi	r21, 0x47	; 71
    2782:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2786:	18 16       	cp	r1, r24
    2788:	4c f5       	brge	.+82     	; 0x27dc <A_DLSS_VoidTakePassword_2+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278a:	6b 85       	ldd	r22, Y+11	; 0x0b
    278c:	7c 85       	ldd	r23, Y+12	; 0x0c
    278e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2790:	9e 85       	ldd	r25, Y+14	; 0x0e
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e2       	ldi	r20, 0x20	; 32
    2798:	51 e4       	ldi	r21, 0x41	; 65
    279a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	bc 01       	movw	r22, r24
    27a4:	cd 01       	movw	r24, r26
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
    27b2:	0f c0       	rjmp	.+30     	; 0x27d2 <A_DLSS_VoidTakePassword_2+0x2c6>
    27b4:	88 ec       	ldi	r24, 0xC8	; 200
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	9c 83       	std	Y+4, r25	; 0x04
    27ba:	8b 83       	std	Y+3, r24	; 0x03
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	9c 81       	ldd	r25, Y+4	; 0x04
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <A_DLSS_VoidTakePassword_2+0x2b4>
    27c4:	9c 83       	std	Y+4, r25	; 0x04
    27c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ca:	9e 81       	ldd	r25, Y+6	; 0x06
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	9e 83       	std	Y+6, r25	; 0x06
    27d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	69 f7       	brne	.-38     	; 0x27b4 <A_DLSS_VoidTakePassword_2+0x2a8>
    27da:	14 c0       	rjmp	.+40     	; 0x2804 <A_DLSS_VoidTakePassword_2+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27dc:	6f 81       	ldd	r22, Y+7	; 0x07
    27de:	78 85       	ldd	r23, Y+8	; 0x08
    27e0:	89 85       	ldd	r24, Y+9	; 0x09
    27e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	9e 83       	std	Y+6, r25	; 0x06
    27ee:	8d 83       	std	Y+5, r24	; 0x05
    27f0:	8d 81       	ldd	r24, Y+5	; 0x05
    27f2:	9e 81       	ldd	r25, Y+6	; 0x06
    27f4:	9a 83       	std	Y+2, r25	; 0x02
    27f6:	89 83       	std	Y+1, r24	; 0x01
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	9a 81       	ldd	r25, Y+2	; 0x02
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <A_DLSS_VoidTakePassword_2+0x2f0>
    2800:	9a 83       	std	Y+2, r25	; 0x02
    2802:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			LCD_displayCharacter('*');
    2804:	8a e2       	ldi	r24, 0x2A	; 42
    2806:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <LCD_displayCharacter>
			Copy_u8_counter++;
    280a:	8b a5       	ldd	r24, Y+43	; 0x2b
    280c:	8f 5f       	subi	r24, 0xFF	; 255
    280e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(20);
	LCD_displayString("PLZ Re-Enter the");
	_delay_ms(10);
	LCD_moveCursor(1,0);
	LCD_displayString("same pass:");
	while(Copy_u8_counter < PASS_SIZE)
    2810:	8b a5       	ldd	r24, Y+43	; 0x2b
    2812:	85 30       	cpi	r24, 0x05	; 5
    2814:	08 f4       	brcc	.+2      	; 0x2818 <A_DLSS_VoidTakePassword_2+0x30c>
    2816:	7a cf       	rjmp	.-268    	; 0x270c <A_DLSS_VoidTakePassword_2+0x200>
			LCD_displayCharacter('*');
			Copy_u8_counter++;
		}

	}
	while(KEYPAD_getPressedKey() != '=');
    2818:	0e 94 12 21 	call	0x4224	; 0x4224 <KEYPAD_getPressedKey>
    281c:	8d 33       	cpi	r24, 0x3D	; 61
    281e:	e1 f7       	brne	.-8      	; 0x2818 <A_DLSS_VoidTakePassword_2+0x30c>
}
    2820:	ac 96       	adiw	r28, 0x2c	; 44
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <A_DLSS_u8Step2TakeOperation>:

uint8 A_DLSS_u8Step2TakeOperation(void)
{
    2832:	0f 93       	push	r16
    2834:	1f 93       	push	r17
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	c5 55       	subi	r28, 0x55	; 85
    2840:	d0 40       	sbci	r29, 0x00	; 0
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8KeyValue= KEY_NOT_PRESSED;
    284c:	fe 01       	movw	r30, r28
    284e:	eb 5a       	subi	r30, 0xAB	; 171
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	8f ef       	ldi	r24, 0xFF	; 255
    2854:	80 83       	st	Z, r24
	while(1)
	{
		LCD_clearScreen();
    2856:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
    285a:	fe 01       	movw	r30, r28
    285c:	ef 5a       	subi	r30, 0xAF	; 175
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	a0 ea       	ldi	r26, 0xA0	; 160
    2866:	b1 e4       	ldi	r27, 0x41	; 65
    2868:	80 83       	st	Z, r24
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	a2 83       	std	Z+2, r26	; 0x02
    286e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2870:	8e 01       	movw	r16, r28
    2872:	03 5b       	subi	r16, 0xB3	; 179
    2874:	1f 4f       	sbci	r17, 0xFF	; 255
    2876:	fe 01       	movw	r30, r28
    2878:	ef 5a       	subi	r30, 0xAF	; 175
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	4a ef       	ldi	r20, 0xFA	; 250
    288a:	54 e4       	ldi	r21, 0x44	; 68
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	f8 01       	movw	r30, r16
    2896:	80 83       	st	Z, r24
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	a2 83       	std	Z+2, r26	; 0x02
    289c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    289e:	fe 01       	movw	r30, r28
    28a0:	e3 5b       	subi	r30, 0xB3	; 179
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	60 81       	ld	r22, Z
    28a6:	71 81       	ldd	r23, Z+1	; 0x01
    28a8:	82 81       	ldd	r24, Z+2	; 0x02
    28aa:	93 81       	ldd	r25, Z+3	; 0x03
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e8       	ldi	r20, 0x80	; 128
    28b2:	5f e3       	ldi	r21, 0x3F	; 63
    28b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b8:	88 23       	and	r24, r24
    28ba:	44 f4       	brge	.+16     	; 0x28cc <A_DLSS_u8Step2TakeOperation+0x9a>
		__ticks = 1;
    28bc:	fe 01       	movw	r30, r28
    28be:	e5 5b       	subi	r30, 0xB5	; 181
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	91 83       	std	Z+1, r25	; 0x01
    28c8:	80 83       	st	Z, r24
    28ca:	64 c0       	rjmp	.+200    	; 0x2994 <A_DLSS_u8Step2TakeOperation+0x162>
	else if (__tmp > 65535)
    28cc:	fe 01       	movw	r30, r28
    28ce:	e3 5b       	subi	r30, 0xB3	; 179
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	3f ef       	ldi	r19, 0xFF	; 255
    28de:	4f e7       	ldi	r20, 0x7F	; 127
    28e0:	57 e4       	ldi	r21, 0x47	; 71
    28e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e6:	18 16       	cp	r1, r24
    28e8:	0c f0       	brlt	.+2      	; 0x28ec <A_DLSS_u8Step2TakeOperation+0xba>
    28ea:	43 c0       	rjmp	.+134    	; 0x2972 <A_DLSS_u8Step2TakeOperation+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ec:	fe 01       	movw	r30, r28
    28ee:	ef 5a       	subi	r30, 0xAF	; 175
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	60 81       	ld	r22, Z
    28f4:	71 81       	ldd	r23, Z+1	; 0x01
    28f6:	82 81       	ldd	r24, Z+2	; 0x02
    28f8:	93 81       	ldd	r25, Z+3	; 0x03
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e2       	ldi	r20, 0x20	; 32
    2900:	51 e4       	ldi	r21, 0x41	; 65
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	8e 01       	movw	r16, r28
    290c:	05 5b       	subi	r16, 0xB5	; 181
    290e:	1f 4f       	sbci	r17, 0xFF	; 255
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	f8 01       	movw	r30, r16
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	80 83       	st	Z, r24
    2922:	1f c0       	rjmp	.+62     	; 0x2962 <A_DLSS_u8Step2TakeOperation+0x130>
    2924:	fe 01       	movw	r30, r28
    2926:	e7 5b       	subi	r30, 0xB7	; 183
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	88 ec       	ldi	r24, 0xC8	; 200
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	91 83       	std	Z+1, r25	; 0x01
    2930:	80 83       	st	Z, r24
    2932:	fe 01       	movw	r30, r28
    2934:	e7 5b       	subi	r30, 0xB7	; 183
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	80 81       	ld	r24, Z
    293a:	91 81       	ldd	r25, Z+1	; 0x01
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <A_DLSS_u8Step2TakeOperation+0x10a>
    2940:	fe 01       	movw	r30, r28
    2942:	e7 5b       	subi	r30, 0xB7	; 183
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294a:	de 01       	movw	r26, r28
    294c:	a5 5b       	subi	r26, 0xB5	; 181
    294e:	bf 4f       	sbci	r27, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e5 5b       	subi	r30, 0xB5	; 181
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	91 81       	ldd	r25, Z+1	; 0x01
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	11 96       	adiw	r26, 0x01	; 1
    295e:	9c 93       	st	X, r25
    2960:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2962:	fe 01       	movw	r30, r28
    2964:	e5 5b       	subi	r30, 0xB5	; 181
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 81       	ld	r24, Z
    296a:	91 81       	ldd	r25, Z+1	; 0x01
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	d1 f6       	brne	.-76     	; 0x2924 <A_DLSS_u8Step2TakeOperation+0xf2>
    2970:	27 c0       	rjmp	.+78     	; 0x29c0 <A_DLSS_u8Step2TakeOperation+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2972:	8e 01       	movw	r16, r28
    2974:	05 5b       	subi	r16, 0xB5	; 181
    2976:	1f 4f       	sbci	r17, 0xFF	; 255
    2978:	fe 01       	movw	r30, r28
    297a:	e3 5b       	subi	r30, 0xB3	; 179
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	f8 01       	movw	r30, r16
    2990:	91 83       	std	Z+1, r25	; 0x01
    2992:	80 83       	st	Z, r24
    2994:	de 01       	movw	r26, r28
    2996:	a9 5b       	subi	r26, 0xB9	; 185
    2998:	bf 4f       	sbci	r27, 0xFF	; 255
    299a:	fe 01       	movw	r30, r28
    299c:	e5 5b       	subi	r30, 0xB5	; 181
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 81       	ld	r24, Z
    29a2:	91 81       	ldd	r25, Z+1	; 0x01
    29a4:	8d 93       	st	X+, r24
    29a6:	9c 93       	st	X, r25
    29a8:	fe 01       	movw	r30, r28
    29aa:	e9 5b       	subi	r30, 0xB9	; 185
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	80 81       	ld	r24, Z
    29b0:	91 81       	ldd	r25, Z+1	; 0x01
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <A_DLSS_u8Step2TakeOperation+0x180>
    29b6:	fe 01       	movw	r30, r28
    29b8:	e9 5b       	subi	r30, 0xB9	; 185
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	91 83       	std	Z+1, r25	; 0x01
    29be:	80 83       	st	Z, r24
		_delay_ms(20);
		LCD_displayString("+ : Open Door ");
    29c0:	8a ee       	ldi	r24, 0xEA	; 234
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
    29c8:	fe 01       	movw	r30, r28
    29ca:	ed 5b       	subi	r30, 0xBD	; 189
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	a0 e2       	ldi	r26, 0x20	; 32
    29d4:	b1 e4       	ldi	r27, 0x41	; 65
    29d6:	80 83       	st	Z, r24
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	a2 83       	std	Z+2, r26	; 0x02
    29dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29de:	8e 01       	movw	r16, r28
    29e0:	01 5c       	subi	r16, 0xC1	; 193
    29e2:	1f 4f       	sbci	r17, 0xFF	; 255
    29e4:	fe 01       	movw	r30, r28
    29e6:	ed 5b       	subi	r30, 0xBD	; 189
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	60 81       	ld	r22, Z
    29ec:	71 81       	ldd	r23, Z+1	; 0x01
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	4a ef       	ldi	r20, 0xFA	; 250
    29f8:	54 e4       	ldi	r21, 0x44	; 68
    29fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	f8 01       	movw	r30, r16
    2a04:	80 83       	st	Z, r24
    2a06:	91 83       	std	Z+1, r25	; 0x01
    2a08:	a2 83       	std	Z+2, r26	; 0x02
    2a0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	ff 96       	adiw	r30, 0x3f	; 63
    2a10:	60 81       	ld	r22, Z
    2a12:	71 81       	ldd	r23, Z+1	; 0x01
    2a14:	82 81       	ldd	r24, Z+2	; 0x02
    2a16:	93 81       	ldd	r25, Z+3	; 0x03
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e8       	ldi	r20, 0x80	; 128
    2a1e:	5f e3       	ldi	r21, 0x3F	; 63
    2a20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a24:	88 23       	and	r24, r24
    2a26:	2c f4       	brge	.+10     	; 0x2a32 <A_DLSS_u8Step2TakeOperation+0x200>
		__ticks = 1;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9e af       	std	Y+62, r25	; 0x3e
    2a2e:	8d af       	std	Y+61, r24	; 0x3d
    2a30:	46 c0       	rjmp	.+140    	; 0x2abe <A_DLSS_u8Step2TakeOperation+0x28c>
	else if (__tmp > 65535)
    2a32:	fe 01       	movw	r30, r28
    2a34:	ff 96       	adiw	r30, 0x3f	; 63
    2a36:	60 81       	ld	r22, Z
    2a38:	71 81       	ldd	r23, Z+1	; 0x01
    2a3a:	82 81       	ldd	r24, Z+2	; 0x02
    2a3c:	93 81       	ldd	r25, Z+3	; 0x03
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	3f ef       	ldi	r19, 0xFF	; 255
    2a42:	4f e7       	ldi	r20, 0x7F	; 127
    2a44:	57 e4       	ldi	r21, 0x47	; 71
    2a46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a4a:	18 16       	cp	r1, r24
    2a4c:	64 f5       	brge	.+88     	; 0x2aa6 <A_DLSS_u8Step2TakeOperation+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4e:	fe 01       	movw	r30, r28
    2a50:	ed 5b       	subi	r30, 0xBD	; 189
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e2       	ldi	r20, 0x20	; 32
    2a62:	51 e4       	ldi	r21, 0x41	; 65
    2a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	bc 01       	movw	r22, r24
    2a6e:	cd 01       	movw	r24, r26
    2a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	9e af       	std	Y+62, r25	; 0x3e
    2a7a:	8d af       	std	Y+61, r24	; 0x3d
    2a7c:	0f c0       	rjmp	.+30     	; 0x2a9c <A_DLSS_u8Step2TakeOperation+0x26a>
    2a7e:	88 ec       	ldi	r24, 0xC8	; 200
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	9c af       	std	Y+60, r25	; 0x3c
    2a84:	8b af       	std	Y+59, r24	; 0x3b
    2a86:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a88:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <A_DLSS_u8Step2TakeOperation+0x258>
    2a8e:	9c af       	std	Y+60, r25	; 0x3c
    2a90:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a92:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a94:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	9e af       	std	Y+62, r25	; 0x3e
    2a9a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2aa0:	00 97       	sbiw	r24, 0x00	; 0
    2aa2:	69 f7       	brne	.-38     	; 0x2a7e <A_DLSS_u8Step2TakeOperation+0x24c>
    2aa4:	16 c0       	rjmp	.+44     	; 0x2ad2 <A_DLSS_u8Step2TakeOperation+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	ff 96       	adiw	r30, 0x3f	; 63
    2aaa:	60 81       	ld	r22, Z
    2aac:	71 81       	ldd	r23, Z+1	; 0x01
    2aae:	82 81       	ldd	r24, Z+2	; 0x02
    2ab0:	93 81       	ldd	r25, Z+3	; 0x03
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	9e af       	std	Y+62, r25	; 0x3e
    2abc:	8d af       	std	Y+61, r24	; 0x3d
    2abe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ac0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ac2:	9a af       	std	Y+58, r25	; 0x3a
    2ac4:	89 af       	std	Y+57, r24	; 0x39
    2ac6:	89 ad       	ldd	r24, Y+57	; 0x39
    2ac8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <A_DLSS_u8Step2TakeOperation+0x298>
    2ace:	9a af       	std	Y+58, r25	; 0x3a
    2ad0:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(10);
		LCD_moveCursor(1,0);
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	60 e0       	ldi	r22, 0x00	; 0
    2ad6:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <LCD_moveCursor>
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	a0 ea       	ldi	r26, 0xA0	; 160
    2ae0:	b1 e4       	ldi	r27, 0x41	; 65
    2ae2:	8d ab       	std	Y+53, r24	; 0x35
    2ae4:	9e ab       	std	Y+54, r25	; 0x36
    2ae6:	af ab       	std	Y+55, r26	; 0x37
    2ae8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aea:	6d a9       	ldd	r22, Y+53	; 0x35
    2aec:	7e a9       	ldd	r23, Y+54	; 0x36
    2aee:	8f a9       	ldd	r24, Y+55	; 0x37
    2af0:	98 ad       	ldd	r25, Y+56	; 0x38
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	4a ef       	ldi	r20, 0xFA	; 250
    2af8:	54 e4       	ldi	r21, 0x44	; 68
    2afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	89 ab       	std	Y+49, r24	; 0x31
    2b04:	9a ab       	std	Y+50, r25	; 0x32
    2b06:	ab ab       	std	Y+51, r26	; 0x33
    2b08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b0a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b0c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b0e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b10:	9c a9       	ldd	r25, Y+52	; 0x34
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e8       	ldi	r20, 0x80	; 128
    2b18:	5f e3       	ldi	r21, 0x3F	; 63
    2b1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b1e:	88 23       	and	r24, r24
    2b20:	2c f4       	brge	.+10     	; 0x2b2c <A_DLSS_u8Step2TakeOperation+0x2fa>
		__ticks = 1;
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	98 ab       	std	Y+48, r25	; 0x30
    2b28:	8f a7       	std	Y+47, r24	; 0x2f
    2b2a:	3f c0       	rjmp	.+126    	; 0x2baa <A_DLSS_u8Step2TakeOperation+0x378>
	else if (__tmp > 65535)
    2b2c:	69 a9       	ldd	r22, Y+49	; 0x31
    2b2e:	7a a9       	ldd	r23, Y+50	; 0x32
    2b30:	8b a9       	ldd	r24, Y+51	; 0x33
    2b32:	9c a9       	ldd	r25, Y+52	; 0x34
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	3f ef       	ldi	r19, 0xFF	; 255
    2b38:	4f e7       	ldi	r20, 0x7F	; 127
    2b3a:	57 e4       	ldi	r21, 0x47	; 71
    2b3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b40:	18 16       	cp	r1, r24
    2b42:	4c f5       	brge	.+82     	; 0x2b96 <A_DLSS_u8Step2TakeOperation+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b44:	6d a9       	ldd	r22, Y+53	; 0x35
    2b46:	7e a9       	ldd	r23, Y+54	; 0x36
    2b48:	8f a9       	ldd	r24, Y+55	; 0x37
    2b4a:	98 ad       	ldd	r25, Y+56	; 0x38
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 e2       	ldi	r20, 0x20	; 32
    2b52:	51 e4       	ldi	r21, 0x41	; 65
    2b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	bc 01       	movw	r22, r24
    2b5e:	cd 01       	movw	r24, r26
    2b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	98 ab       	std	Y+48, r25	; 0x30
    2b6a:	8f a7       	std	Y+47, r24	; 0x2f
    2b6c:	0f c0       	rjmp	.+30     	; 0x2b8c <A_DLSS_u8Step2TakeOperation+0x35a>
    2b6e:	88 ec       	ldi	r24, 0xC8	; 200
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	9e a7       	std	Y+46, r25	; 0x2e
    2b74:	8d a7       	std	Y+45, r24	; 0x2d
    2b76:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b78:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <A_DLSS_u8Step2TakeOperation+0x348>
    2b7e:	9e a7       	std	Y+46, r25	; 0x2e
    2b80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b82:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b84:	98 a9       	ldd	r25, Y+48	; 0x30
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	98 ab       	std	Y+48, r25	; 0x30
    2b8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b8e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b90:	00 97       	sbiw	r24, 0x00	; 0
    2b92:	69 f7       	brne	.-38     	; 0x2b6e <A_DLSS_u8Step2TakeOperation+0x33c>
    2b94:	14 c0       	rjmp	.+40     	; 0x2bbe <A_DLSS_u8Step2TakeOperation+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b96:	69 a9       	ldd	r22, Y+49	; 0x31
    2b98:	7a a9       	ldd	r23, Y+50	; 0x32
    2b9a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b9c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	98 ab       	std	Y+48, r25	; 0x30
    2ba8:	8f a7       	std	Y+47, r24	; 0x2f
    2baa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bac:	98 a9       	ldd	r25, Y+48	; 0x30
    2bae:	9c a7       	std	Y+44, r25	; 0x2c
    2bb0:	8b a7       	std	Y+43, r24	; 0x2b
    2bb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	f1 f7       	brne	.-4      	; 0x2bb6 <A_DLSS_u8Step2TakeOperation+0x384>
    2bba:	9c a7       	std	Y+44, r25	; 0x2c
    2bbc:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(20);
		LCD_displayString("- : Change pass ");
    2bbe:	89 ef       	ldi	r24, 0xF9	; 249
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
		Local_u8KeyValue = KEYPAD_getPressedKey();
    2bc6:	0e 94 12 21 	call	0x4224	; 0x4224 <KEYPAD_getPressedKey>
    2bca:	fe 01       	movw	r30, r28
    2bcc:	eb 5a       	subi	r30, 0xAB	; 171
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	80 83       	st	Z, r24
		if( Local_u8KeyValue == '+' || Local_u8KeyValue == '-')
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	eb 5a       	subi	r30, 0xAB	; 171
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	80 81       	ld	r24, Z
    2bda:	8b 32       	cpi	r24, 0x2B	; 43
    2bdc:	31 f0       	breq	.+12     	; 0x2bea <A_DLSS_u8Step2TakeOperation+0x3b8>
    2bde:	fe 01       	movw	r30, r28
    2be0:	eb 5a       	subi	r30, 0xAB	; 171
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	80 81       	ld	r24, Z
    2be6:	8d 32       	cpi	r24, 0x2D	; 45
    2be8:	81 f4       	brne	.+32     	; 0x2c0a <A_DLSS_u8Step2TakeOperation+0x3d8>
		{
			return Local_u8KeyValue;
    2bea:	fe 01       	movw	r30, r28
    2bec:	eb 5a       	subi	r30, 0xAB	; 171
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 81       	ld	r24, Z
			LCD_displayString("operation ");
			_delay_ms(500);
		}
	}

}
    2bf2:	cb 5a       	subi	r28, 0xAB	; 171
    2bf4:	df 4f       	sbci	r29, 0xFF	; 255
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	1f 91       	pop	r17
    2c06:	0f 91       	pop	r16
    2c08:	08 95       	ret
		if( Local_u8KeyValue == '+' || Local_u8KeyValue == '-')
		{
			return Local_u8KeyValue;
		}else
		{
			LCD_clearScreen();
    2c0a:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	a0 ea       	ldi	r26, 0xA0	; 160
    2c14:	b1 e4       	ldi	r27, 0x41	; 65
    2c16:	8f a3       	std	Y+39, r24	; 0x27
    2c18:	98 a7       	std	Y+40, r25	; 0x28
    2c1a:	a9 a7       	std	Y+41, r26	; 0x29
    2c1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1e:	6f a1       	ldd	r22, Y+39	; 0x27
    2c20:	78 a5       	ldd	r23, Y+40	; 0x28
    2c22:	89 a5       	ldd	r24, Y+41	; 0x29
    2c24:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	4a ef       	ldi	r20, 0xFA	; 250
    2c2c:	54 e4       	ldi	r21, 0x44	; 68
    2c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	8b a3       	std	Y+35, r24	; 0x23
    2c38:	9c a3       	std	Y+36, r25	; 0x24
    2c3a:	ad a3       	std	Y+37, r26	; 0x25
    2c3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c3e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c40:	7c a1       	ldd	r23, Y+36	; 0x24
    2c42:	8d a1       	ldd	r24, Y+37	; 0x25
    2c44:	9e a1       	ldd	r25, Y+38	; 0x26
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e8       	ldi	r20, 0x80	; 128
    2c4c:	5f e3       	ldi	r21, 0x3F	; 63
    2c4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c52:	88 23       	and	r24, r24
    2c54:	2c f4       	brge	.+10     	; 0x2c60 <A_DLSS_u8Step2TakeOperation+0x42e>
		__ticks = 1;
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	9a a3       	std	Y+34, r25	; 0x22
    2c5c:	89 a3       	std	Y+33, r24	; 0x21
    2c5e:	3f c0       	rjmp	.+126    	; 0x2cde <A_DLSS_u8Step2TakeOperation+0x4ac>
	else if (__tmp > 65535)
    2c60:	6b a1       	ldd	r22, Y+35	; 0x23
    2c62:	7c a1       	ldd	r23, Y+36	; 0x24
    2c64:	8d a1       	ldd	r24, Y+37	; 0x25
    2c66:	9e a1       	ldd	r25, Y+38	; 0x26
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	3f ef       	ldi	r19, 0xFF	; 255
    2c6c:	4f e7       	ldi	r20, 0x7F	; 127
    2c6e:	57 e4       	ldi	r21, 0x47	; 71
    2c70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c74:	18 16       	cp	r1, r24
    2c76:	4c f5       	brge	.+82     	; 0x2cca <A_DLSS_u8Step2TakeOperation+0x498>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c78:	6f a1       	ldd	r22, Y+39	; 0x27
    2c7a:	78 a5       	ldd	r23, Y+40	; 0x28
    2c7c:	89 a5       	ldd	r24, Y+41	; 0x29
    2c7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e2       	ldi	r20, 0x20	; 32
    2c86:	51 e4       	ldi	r21, 0x41	; 65
    2c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	bc 01       	movw	r22, r24
    2c92:	cd 01       	movw	r24, r26
    2c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	9a a3       	std	Y+34, r25	; 0x22
    2c9e:	89 a3       	std	Y+33, r24	; 0x21
    2ca0:	0f c0       	rjmp	.+30     	; 0x2cc0 <A_DLSS_u8Step2TakeOperation+0x48e>
    2ca2:	88 ec       	ldi	r24, 0xC8	; 200
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	98 a3       	std	Y+32, r25	; 0x20
    2ca8:	8f 8f       	std	Y+31, r24	; 0x1f
    2caa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cac:	98 a1       	ldd	r25, Y+32	; 0x20
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <A_DLSS_u8Step2TakeOperation+0x47c>
    2cb2:	98 a3       	std	Y+32, r25	; 0x20
    2cb4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb6:	89 a1       	ldd	r24, Y+33	; 0x21
    2cb8:	9a a1       	ldd	r25, Y+34	; 0x22
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	9a a3       	std	Y+34, r25	; 0x22
    2cbe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc0:	89 a1       	ldd	r24, Y+33	; 0x21
    2cc2:	9a a1       	ldd	r25, Y+34	; 0x22
    2cc4:	00 97       	sbiw	r24, 0x00	; 0
    2cc6:	69 f7       	brne	.-38     	; 0x2ca2 <A_DLSS_u8Step2TakeOperation+0x470>
    2cc8:	14 c0       	rjmp	.+40     	; 0x2cf2 <A_DLSS_u8Step2TakeOperation+0x4c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cca:	6b a1       	ldd	r22, Y+35	; 0x23
    2ccc:	7c a1       	ldd	r23, Y+36	; 0x24
    2cce:	8d a1       	ldd	r24, Y+37	; 0x25
    2cd0:	9e a1       	ldd	r25, Y+38	; 0x26
    2cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	9a a3       	std	Y+34, r25	; 0x22
    2cdc:	89 a3       	std	Y+33, r24	; 0x21
    2cde:	89 a1       	ldd	r24, Y+33	; 0x21
    2ce0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ce2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ce4:	8d 8f       	std	Y+29, r24	; 0x1d
    2ce6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ce8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	f1 f7       	brne	.-4      	; 0x2cea <A_DLSS_u8Step2TakeOperation+0x4b8>
    2cee:	9e 8f       	std	Y+30, r25	; 0x1e
    2cf0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(20);
			LCD_displayString("Enter correct ");
    2cf2:	8a e0       	ldi	r24, 0x0A	; 10
    2cf4:	91 e0       	ldi	r25, 0x01	; 1
    2cf6:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	a0 e2       	ldi	r26, 0x20	; 32
    2d00:	b1 e4       	ldi	r27, 0x41	; 65
    2d02:	89 8f       	std	Y+25, r24	; 0x19
    2d04:	9a 8f       	std	Y+26, r25	; 0x1a
    2d06:	ab 8f       	std	Y+27, r26	; 0x1b
    2d08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	4a ef       	ldi	r20, 0xFA	; 250
    2d18:	54 e4       	ldi	r21, 0x44	; 68
    2d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	8d 8b       	std	Y+21, r24	; 0x15
    2d24:	9e 8b       	std	Y+22, r25	; 0x16
    2d26:	af 8b       	std	Y+23, r26	; 0x17
    2d28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d30:	98 8d       	ldd	r25, Y+24	; 0x18
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e8       	ldi	r20, 0x80	; 128
    2d38:	5f e3       	ldi	r21, 0x3F	; 63
    2d3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d3e:	88 23       	and	r24, r24
    2d40:	2c f4       	brge	.+10     	; 0x2d4c <A_DLSS_u8Step2TakeOperation+0x51a>
		__ticks = 1;
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	9c 8b       	std	Y+20, r25	; 0x14
    2d48:	8b 8b       	std	Y+19, r24	; 0x13
    2d4a:	3f c0       	rjmp	.+126    	; 0x2dca <A_DLSS_u8Step2TakeOperation+0x598>
	else if (__tmp > 65535)
    2d4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d50:	8f 89       	ldd	r24, Y+23	; 0x17
    2d52:	98 8d       	ldd	r25, Y+24	; 0x18
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	3f ef       	ldi	r19, 0xFF	; 255
    2d58:	4f e7       	ldi	r20, 0x7F	; 127
    2d5a:	57 e4       	ldi	r21, 0x47	; 71
    2d5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d60:	18 16       	cp	r1, r24
    2d62:	4c f5       	brge	.+82     	; 0x2db6 <A_DLSS_u8Step2TakeOperation+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d64:	69 8d       	ldd	r22, Y+25	; 0x19
    2d66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	40 e2       	ldi	r20, 0x20	; 32
    2d72:	51 e4       	ldi	r21, 0x41	; 65
    2d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	bc 01       	movw	r22, r24
    2d7e:	cd 01       	movw	r24, r26
    2d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	9c 8b       	std	Y+20, r25	; 0x14
    2d8a:	8b 8b       	std	Y+19, r24	; 0x13
    2d8c:	0f c0       	rjmp	.+30     	; 0x2dac <A_DLSS_u8Step2TakeOperation+0x57a>
    2d8e:	88 ec       	ldi	r24, 0xC8	; 200
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	9a 8b       	std	Y+18, r25	; 0x12
    2d94:	89 8b       	std	Y+17, r24	; 0x11
    2d96:	89 89       	ldd	r24, Y+17	; 0x11
    2d98:	9a 89       	ldd	r25, Y+18	; 0x12
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	f1 f7       	brne	.-4      	; 0x2d9a <A_DLSS_u8Step2TakeOperation+0x568>
    2d9e:	9a 8b       	std	Y+18, r25	; 0x12
    2da0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da2:	8b 89       	ldd	r24, Y+19	; 0x13
    2da4:	9c 89       	ldd	r25, Y+20	; 0x14
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	9c 8b       	std	Y+20, r25	; 0x14
    2daa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dac:	8b 89       	ldd	r24, Y+19	; 0x13
    2dae:	9c 89       	ldd	r25, Y+20	; 0x14
    2db0:	00 97       	sbiw	r24, 0x00	; 0
    2db2:	69 f7       	brne	.-38     	; 0x2d8e <A_DLSS_u8Step2TakeOperation+0x55c>
    2db4:	14 c0       	rjmp	.+40     	; 0x2dde <A_DLSS_u8Step2TakeOperation+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db6:	6d 89       	ldd	r22, Y+21	; 0x15
    2db8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dba:	8f 89       	ldd	r24, Y+23	; 0x17
    2dbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	9c 8b       	std	Y+20, r25	; 0x14
    2dc8:	8b 8b       	std	Y+19, r24	; 0x13
    2dca:	8b 89       	ldd	r24, Y+19	; 0x13
    2dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2dce:	98 8b       	std	Y+16, r25	; 0x10
    2dd0:	8f 87       	std	Y+15, r24	; 0x0f
    2dd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dd4:	98 89       	ldd	r25, Y+16	; 0x10
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <A_DLSS_u8Step2TakeOperation+0x5a4>
    2dda:	98 8b       	std	Y+16, r25	; 0x10
    2ddc:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			LCD_moveCursor(1,0);
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	60 e0       	ldi	r22, 0x00	; 0
    2de2:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <LCD_moveCursor>
			LCD_displayString("operation ");
    2de6:	89 e1       	ldi	r24, 0x19	; 25
    2de8:	91 e0       	ldi	r25, 0x01	; 1
    2dea:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	aa ef       	ldi	r26, 0xFA	; 250
    2df4:	b3 e4       	ldi	r27, 0x43	; 67
    2df6:	8b 87       	std	Y+11, r24	; 0x0b
    2df8:	9c 87       	std	Y+12, r25	; 0x0c
    2dfa:	ad 87       	std	Y+13, r26	; 0x0d
    2dfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	4a ef       	ldi	r20, 0xFA	; 250
    2e0c:	54 e4       	ldi	r21, 0x44	; 68
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	8f 83       	std	Y+7, r24	; 0x07
    2e18:	98 87       	std	Y+8, r25	; 0x08
    2e1a:	a9 87       	std	Y+9, r26	; 0x09
    2e1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e20:	78 85       	ldd	r23, Y+8	; 0x08
    2e22:	89 85       	ldd	r24, Y+9	; 0x09
    2e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e8       	ldi	r20, 0x80	; 128
    2e2c:	5f e3       	ldi	r21, 0x3F	; 63
    2e2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e32:	88 23       	and	r24, r24
    2e34:	2c f4       	brge	.+10     	; 0x2e40 <A_DLSS_u8Step2TakeOperation+0x60e>
		__ticks = 1;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	9e 83       	std	Y+6, r25	; 0x06
    2e3c:	8d 83       	std	Y+5, r24	; 0x05
    2e3e:	3f c0       	rjmp	.+126    	; 0x2ebe <A_DLSS_u8Step2TakeOperation+0x68c>
	else if (__tmp > 65535)
    2e40:	6f 81       	ldd	r22, Y+7	; 0x07
    2e42:	78 85       	ldd	r23, Y+8	; 0x08
    2e44:	89 85       	ldd	r24, Y+9	; 0x09
    2e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	3f ef       	ldi	r19, 0xFF	; 255
    2e4c:	4f e7       	ldi	r20, 0x7F	; 127
    2e4e:	57 e4       	ldi	r21, 0x47	; 71
    2e50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e54:	18 16       	cp	r1, r24
    2e56:	4c f5       	brge	.+82     	; 0x2eaa <A_DLSS_u8Step2TakeOperation+0x678>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e2       	ldi	r20, 0x20	; 32
    2e66:	51 e4       	ldi	r21, 0x41	; 65
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	9e 83       	std	Y+6, r25	; 0x06
    2e7e:	8d 83       	std	Y+5, r24	; 0x05
    2e80:	0f c0       	rjmp	.+30     	; 0x2ea0 <A_DLSS_u8Step2TakeOperation+0x66e>
    2e82:	88 ec       	ldi	r24, 0xC8	; 200
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	9c 83       	std	Y+4, r25	; 0x04
    2e88:	8b 83       	std	Y+3, r24	; 0x03
    2e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <A_DLSS_u8Step2TakeOperation+0x65c>
    2e92:	9c 83       	std	Y+4, r25	; 0x04
    2e94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e96:	8d 81       	ldd	r24, Y+5	; 0x05
    2e98:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	9e 83       	std	Y+6, r25	; 0x06
    2e9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	69 f7       	brne	.-38     	; 0x2e82 <A_DLSS_u8Step2TakeOperation+0x650>
    2ea8:	d6 cc       	rjmp	.-1620   	; 0x2856 <A_DLSS_u8Step2TakeOperation+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2eac:	78 85       	ldd	r23, Y+8	; 0x08
    2eae:	89 85       	ldd	r24, Y+9	; 0x09
    2eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
    2ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <A_DLSS_u8Step2TakeOperation+0x698>
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	89 83       	std	Y+1, r24	; 0x01
    2ed2:	c1 cc       	rjmp	.-1662   	; 0x2856 <A_DLSS_u8Step2TakeOperation+0x24>

00002ed4 <A_DLSS_VoidStep3EnterPass>:
		}
	}

}
void A_DLSS_VoidStep3EnterPass(void)
{
    2ed4:	0f 93       	push	r16
    2ed6:	1f 93       	push	r17
    2ed8:	df 93       	push	r29
    2eda:	cf 93       	push	r28
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    2ee0:	c8 54       	subi	r28, 0x48	; 72
    2ee2:	d0 40       	sbci	r29, 0x00	; 0
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	f8 94       	cli
    2ee8:	de bf       	out	0x3e, r29	; 62
    2eea:	0f be       	out	0x3f, r0	; 63
    2eec:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8KeyValue= KEY_NOT_PRESSED;
    2eee:	fe 01       	movw	r30, r28
    2ef0:	e8 5b       	subi	r30, 0xB8	; 184
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	8f ef       	ldi	r24, 0xFF	; 255
    2ef6:	80 83       	st	Z, r24
	uint8 Copy_u8_counter =0;
    2ef8:	fe 01       	movw	r30, r28
    2efa:	e9 5b       	subi	r30, 0xB9	; 185
    2efc:	ff 4f       	sbci	r31, 0xFF	; 255
    2efe:	10 82       	st	Z, r1
	LCD_clearScreen();
    2f00:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
    2f04:	fe 01       	movw	r30, r28
    2f06:	ed 5b       	subi	r30, 0xBD	; 189
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	a0 ea       	ldi	r26, 0xA0	; 160
    2f10:	b1 e4       	ldi	r27, 0x41	; 65
    2f12:	80 83       	st	Z, r24
    2f14:	91 83       	std	Z+1, r25	; 0x01
    2f16:	a2 83       	std	Z+2, r26	; 0x02
    2f18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1a:	8e 01       	movw	r16, r28
    2f1c:	01 5c       	subi	r16, 0xC1	; 193
    2f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f20:	fe 01       	movw	r30, r28
    2f22:	ed 5b       	subi	r30, 0xBD	; 189
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	60 81       	ld	r22, Z
    2f28:	71 81       	ldd	r23, Z+1	; 0x01
    2f2a:	82 81       	ldd	r24, Z+2	; 0x02
    2f2c:	93 81       	ldd	r25, Z+3	; 0x03
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	4a ef       	ldi	r20, 0xFA	; 250
    2f34:	54 e4       	ldi	r21, 0x44	; 68
    2f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	f8 01       	movw	r30, r16
    2f40:	80 83       	st	Z, r24
    2f42:	91 83       	std	Z+1, r25	; 0x01
    2f44:	a2 83       	std	Z+2, r26	; 0x02
    2f46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f48:	fe 01       	movw	r30, r28
    2f4a:	ff 96       	adiw	r30, 0x3f	; 63
    2f4c:	60 81       	ld	r22, Z
    2f4e:	71 81       	ldd	r23, Z+1	; 0x01
    2f50:	82 81       	ldd	r24, Z+2	; 0x02
    2f52:	93 81       	ldd	r25, Z+3	; 0x03
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	40 e8       	ldi	r20, 0x80	; 128
    2f5a:	5f e3       	ldi	r21, 0x3F	; 63
    2f5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f60:	88 23       	and	r24, r24
    2f62:	2c f4       	brge	.+10     	; 0x2f6e <A_DLSS_VoidStep3EnterPass+0x9a>
		__ticks = 1;
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	9e af       	std	Y+62, r25	; 0x3e
    2f6a:	8d af       	std	Y+61, r24	; 0x3d
    2f6c:	46 c0       	rjmp	.+140    	; 0x2ffa <A_DLSS_VoidStep3EnterPass+0x126>
	else if (__tmp > 65535)
    2f6e:	fe 01       	movw	r30, r28
    2f70:	ff 96       	adiw	r30, 0x3f	; 63
    2f72:	60 81       	ld	r22, Z
    2f74:	71 81       	ldd	r23, Z+1	; 0x01
    2f76:	82 81       	ldd	r24, Z+2	; 0x02
    2f78:	93 81       	ldd	r25, Z+3	; 0x03
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	3f ef       	ldi	r19, 0xFF	; 255
    2f7e:	4f e7       	ldi	r20, 0x7F	; 127
    2f80:	57 e4       	ldi	r21, 0x47	; 71
    2f82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f86:	18 16       	cp	r1, r24
    2f88:	64 f5       	brge	.+88     	; 0x2fe2 <A_DLSS_VoidStep3EnterPass+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	ed 5b       	subi	r30, 0xBD	; 189
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	60 81       	ld	r22, Z
    2f92:	71 81       	ldd	r23, Z+1	; 0x01
    2f94:	82 81       	ldd	r24, Z+2	; 0x02
    2f96:	93 81       	ldd	r25, Z+3	; 0x03
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e2       	ldi	r20, 0x20	; 32
    2f9e:	51 e4       	ldi	r21, 0x41	; 65
    2fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	bc 01       	movw	r22, r24
    2faa:	cd 01       	movw	r24, r26
    2fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	9e af       	std	Y+62, r25	; 0x3e
    2fb6:	8d af       	std	Y+61, r24	; 0x3d
    2fb8:	0f c0       	rjmp	.+30     	; 0x2fd8 <A_DLSS_VoidStep3EnterPass+0x104>
    2fba:	88 ec       	ldi	r24, 0xC8	; 200
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	9c af       	std	Y+60, r25	; 0x3c
    2fc0:	8b af       	std	Y+59, r24	; 0x3b
    2fc2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fc4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	f1 f7       	brne	.-4      	; 0x2fc6 <A_DLSS_VoidStep3EnterPass+0xf2>
    2fca:	9c af       	std	Y+60, r25	; 0x3c
    2fcc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fce:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fd0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	9e af       	std	Y+62, r25	; 0x3e
    2fd6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fda:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fdc:	00 97       	sbiw	r24, 0x00	; 0
    2fde:	69 f7       	brne	.-38     	; 0x2fba <A_DLSS_VoidStep3EnterPass+0xe6>
    2fe0:	16 c0       	rjmp	.+44     	; 0x300e <A_DLSS_VoidStep3EnterPass+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	ff 96       	adiw	r30, 0x3f	; 63
    2fe6:	60 81       	ld	r22, Z
    2fe8:	71 81       	ldd	r23, Z+1	; 0x01
    2fea:	82 81       	ldd	r24, Z+2	; 0x02
    2fec:	93 81       	ldd	r25, Z+3	; 0x03
    2fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	9e af       	std	Y+62, r25	; 0x3e
    2ff8:	8d af       	std	Y+61, r24	; 0x3d
    2ffa:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ffc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ffe:	9a af       	std	Y+58, r25	; 0x3a
    3000:	89 af       	std	Y+57, r24	; 0x39
    3002:	89 ad       	ldd	r24, Y+57	; 0x39
    3004:	9a ad       	ldd	r25, Y+58	; 0x3a
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	f1 f7       	brne	.-4      	; 0x3006 <A_DLSS_VoidStep3EnterPass+0x132>
    300a:	9a af       	std	Y+58, r25	; 0x3a
    300c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(20);
	LCD_displayString("Open door ");
    300e:	84 e2       	ldi	r24, 0x24	; 36
    3010:	91 e0       	ldi	r25, 0x01	; 1
    3012:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	aa ef       	ldi	r26, 0xFA	; 250
    301c:	b3 e4       	ldi	r27, 0x43	; 67
    301e:	8d ab       	std	Y+53, r24	; 0x35
    3020:	9e ab       	std	Y+54, r25	; 0x36
    3022:	af ab       	std	Y+55, r26	; 0x37
    3024:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3026:	6d a9       	ldd	r22, Y+53	; 0x35
    3028:	7e a9       	ldd	r23, Y+54	; 0x36
    302a:	8f a9       	ldd	r24, Y+55	; 0x37
    302c:	98 ad       	ldd	r25, Y+56	; 0x38
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	4a ef       	ldi	r20, 0xFA	; 250
    3034:	54 e4       	ldi	r21, 0x44	; 68
    3036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	89 ab       	std	Y+49, r24	; 0x31
    3040:	9a ab       	std	Y+50, r25	; 0x32
    3042:	ab ab       	std	Y+51, r26	; 0x33
    3044:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3046:	69 a9       	ldd	r22, Y+49	; 0x31
    3048:	7a a9       	ldd	r23, Y+50	; 0x32
    304a:	8b a9       	ldd	r24, Y+51	; 0x33
    304c:	9c a9       	ldd	r25, Y+52	; 0x34
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	40 e8       	ldi	r20, 0x80	; 128
    3054:	5f e3       	ldi	r21, 0x3F	; 63
    3056:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    305a:	88 23       	and	r24, r24
    305c:	2c f4       	brge	.+10     	; 0x3068 <A_DLSS_VoidStep3EnterPass+0x194>
		__ticks = 1;
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	98 ab       	std	Y+48, r25	; 0x30
    3064:	8f a7       	std	Y+47, r24	; 0x2f
    3066:	3f c0       	rjmp	.+126    	; 0x30e6 <A_DLSS_VoidStep3EnterPass+0x212>
	else if (__tmp > 65535)
    3068:	69 a9       	ldd	r22, Y+49	; 0x31
    306a:	7a a9       	ldd	r23, Y+50	; 0x32
    306c:	8b a9       	ldd	r24, Y+51	; 0x33
    306e:	9c a9       	ldd	r25, Y+52	; 0x34
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	3f ef       	ldi	r19, 0xFF	; 255
    3074:	4f e7       	ldi	r20, 0x7F	; 127
    3076:	57 e4       	ldi	r21, 0x47	; 71
    3078:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    307c:	18 16       	cp	r1, r24
    307e:	4c f5       	brge	.+82     	; 0x30d2 <A_DLSS_VoidStep3EnterPass+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3080:	6d a9       	ldd	r22, Y+53	; 0x35
    3082:	7e a9       	ldd	r23, Y+54	; 0x36
    3084:	8f a9       	ldd	r24, Y+55	; 0x37
    3086:	98 ad       	ldd	r25, Y+56	; 0x38
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	40 e2       	ldi	r20, 0x20	; 32
    308e:	51 e4       	ldi	r21, 0x41	; 65
    3090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	bc 01       	movw	r22, r24
    309a:	cd 01       	movw	r24, r26
    309c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	98 ab       	std	Y+48, r25	; 0x30
    30a6:	8f a7       	std	Y+47, r24	; 0x2f
    30a8:	0f c0       	rjmp	.+30     	; 0x30c8 <A_DLSS_VoidStep3EnterPass+0x1f4>
    30aa:	88 ec       	ldi	r24, 0xC8	; 200
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	9e a7       	std	Y+46, r25	; 0x2e
    30b0:	8d a7       	std	Y+45, r24	; 0x2d
    30b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    30b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    30b6:	01 97       	sbiw	r24, 0x01	; 1
    30b8:	f1 f7       	brne	.-4      	; 0x30b6 <A_DLSS_VoidStep3EnterPass+0x1e2>
    30ba:	9e a7       	std	Y+46, r25	; 0x2e
    30bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30be:	8f a5       	ldd	r24, Y+47	; 0x2f
    30c0:	98 a9       	ldd	r25, Y+48	; 0x30
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	98 ab       	std	Y+48, r25	; 0x30
    30c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    30ca:	98 a9       	ldd	r25, Y+48	; 0x30
    30cc:	00 97       	sbiw	r24, 0x00	; 0
    30ce:	69 f7       	brne	.-38     	; 0x30aa <A_DLSS_VoidStep3EnterPass+0x1d6>
    30d0:	14 c0       	rjmp	.+40     	; 0x30fa <A_DLSS_VoidStep3EnterPass+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d2:	69 a9       	ldd	r22, Y+49	; 0x31
    30d4:	7a a9       	ldd	r23, Y+50	; 0x32
    30d6:	8b a9       	ldd	r24, Y+51	; 0x33
    30d8:	9c a9       	ldd	r25, Y+52	; 0x34
    30da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	98 ab       	std	Y+48, r25	; 0x30
    30e4:	8f a7       	std	Y+47, r24	; 0x2f
    30e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    30e8:	98 a9       	ldd	r25, Y+48	; 0x30
    30ea:	9c a7       	std	Y+44, r25	; 0x2c
    30ec:	8b a7       	std	Y+43, r24	; 0x2b
    30ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    30f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	f1 f7       	brne	.-4      	; 0x30f2 <A_DLSS_VoidStep3EnterPass+0x21e>
    30f6:	9c a7       	std	Y+44, r25	; 0x2c
    30f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);
	LCD_clearScreen();
    30fa:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	a0 ea       	ldi	r26, 0xA0	; 160
    3104:	b1 e4       	ldi	r27, 0x41	; 65
    3106:	8f a3       	std	Y+39, r24	; 0x27
    3108:	98 a7       	std	Y+40, r25	; 0x28
    310a:	a9 a7       	std	Y+41, r26	; 0x29
    310c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310e:	6f a1       	ldd	r22, Y+39	; 0x27
    3110:	78 a5       	ldd	r23, Y+40	; 0x28
    3112:	89 a5       	ldd	r24, Y+41	; 0x29
    3114:	9a a5       	ldd	r25, Y+42	; 0x2a
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	4a ef       	ldi	r20, 0xFA	; 250
    311c:	54 e4       	ldi	r21, 0x44	; 68
    311e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	8b a3       	std	Y+35, r24	; 0x23
    3128:	9c a3       	std	Y+36, r25	; 0x24
    312a:	ad a3       	std	Y+37, r26	; 0x25
    312c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    312e:	6b a1       	ldd	r22, Y+35	; 0x23
    3130:	7c a1       	ldd	r23, Y+36	; 0x24
    3132:	8d a1       	ldd	r24, Y+37	; 0x25
    3134:	9e a1       	ldd	r25, Y+38	; 0x26
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e8       	ldi	r20, 0x80	; 128
    313c:	5f e3       	ldi	r21, 0x3F	; 63
    313e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3142:	88 23       	and	r24, r24
    3144:	2c f4       	brge	.+10     	; 0x3150 <A_DLSS_VoidStep3EnterPass+0x27c>
		__ticks = 1;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	9a a3       	std	Y+34, r25	; 0x22
    314c:	89 a3       	std	Y+33, r24	; 0x21
    314e:	3f c0       	rjmp	.+126    	; 0x31ce <A_DLSS_VoidStep3EnterPass+0x2fa>
	else if (__tmp > 65535)
    3150:	6b a1       	ldd	r22, Y+35	; 0x23
    3152:	7c a1       	ldd	r23, Y+36	; 0x24
    3154:	8d a1       	ldd	r24, Y+37	; 0x25
    3156:	9e a1       	ldd	r25, Y+38	; 0x26
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	3f ef       	ldi	r19, 0xFF	; 255
    315c:	4f e7       	ldi	r20, 0x7F	; 127
    315e:	57 e4       	ldi	r21, 0x47	; 71
    3160:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3164:	18 16       	cp	r1, r24
    3166:	4c f5       	brge	.+82     	; 0x31ba <A_DLSS_VoidStep3EnterPass+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3168:	6f a1       	ldd	r22, Y+39	; 0x27
    316a:	78 a5       	ldd	r23, Y+40	; 0x28
    316c:	89 a5       	ldd	r24, Y+41	; 0x29
    316e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e2       	ldi	r20, 0x20	; 32
    3176:	51 e4       	ldi	r21, 0x41	; 65
    3178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	bc 01       	movw	r22, r24
    3182:	cd 01       	movw	r24, r26
    3184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	9a a3       	std	Y+34, r25	; 0x22
    318e:	89 a3       	std	Y+33, r24	; 0x21
    3190:	0f c0       	rjmp	.+30     	; 0x31b0 <A_DLSS_VoidStep3EnterPass+0x2dc>
    3192:	88 ec       	ldi	r24, 0xC8	; 200
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	98 a3       	std	Y+32, r25	; 0x20
    3198:	8f 8f       	std	Y+31, r24	; 0x1f
    319a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    319c:	98 a1       	ldd	r25, Y+32	; 0x20
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <A_DLSS_VoidStep3EnterPass+0x2ca>
    31a2:	98 a3       	std	Y+32, r25	; 0x20
    31a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a6:	89 a1       	ldd	r24, Y+33	; 0x21
    31a8:	9a a1       	ldd	r25, Y+34	; 0x22
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	9a a3       	std	Y+34, r25	; 0x22
    31ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b0:	89 a1       	ldd	r24, Y+33	; 0x21
    31b2:	9a a1       	ldd	r25, Y+34	; 0x22
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	69 f7       	brne	.-38     	; 0x3192 <A_DLSS_VoidStep3EnterPass+0x2be>
    31b8:	14 c0       	rjmp	.+40     	; 0x31e2 <A_DLSS_VoidStep3EnterPass+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ba:	6b a1       	ldd	r22, Y+35	; 0x23
    31bc:	7c a1       	ldd	r23, Y+36	; 0x24
    31be:	8d a1       	ldd	r24, Y+37	; 0x25
    31c0:	9e a1       	ldd	r25, Y+38	; 0x26
    31c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	9a a3       	std	Y+34, r25	; 0x22
    31cc:	89 a3       	std	Y+33, r24	; 0x21
    31ce:	89 a1       	ldd	r24, Y+33	; 0x21
    31d0:	9a a1       	ldd	r25, Y+34	; 0x22
    31d2:	9e 8f       	std	Y+30, r25	; 0x1e
    31d4:	8d 8f       	std	Y+29, r24	; 0x1d
    31d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <A_DLSS_VoidStep3EnterPass+0x306>
    31de:	9e 8f       	std	Y+30, r25	; 0x1e
    31e0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	LCD_displayString("PLZ Enter Pass: ");
    31e2:	8d eb       	ldi	r24, 0xBD	; 189
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	a0 e2       	ldi	r26, 0x20	; 32
    31f0:	b1 e4       	ldi	r27, 0x41	; 65
    31f2:	89 8f       	std	Y+25, r24	; 0x19
    31f4:	9a 8f       	std	Y+26, r25	; 0x1a
    31f6:	ab 8f       	std	Y+27, r26	; 0x1b
    31f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31fa:	69 8d       	ldd	r22, Y+25	; 0x19
    31fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3200:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	4a ef       	ldi	r20, 0xFA	; 250
    3208:	54 e4       	ldi	r21, 0x44	; 68
    320a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	8d 8b       	std	Y+21, r24	; 0x15
    3214:	9e 8b       	std	Y+22, r25	; 0x16
    3216:	af 8b       	std	Y+23, r26	; 0x17
    3218:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    321a:	6d 89       	ldd	r22, Y+21	; 0x15
    321c:	7e 89       	ldd	r23, Y+22	; 0x16
    321e:	8f 89       	ldd	r24, Y+23	; 0x17
    3220:	98 8d       	ldd	r25, Y+24	; 0x18
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	40 e8       	ldi	r20, 0x80	; 128
    3228:	5f e3       	ldi	r21, 0x3F	; 63
    322a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    322e:	88 23       	and	r24, r24
    3230:	2c f4       	brge	.+10     	; 0x323c <A_DLSS_VoidStep3EnterPass+0x368>
		__ticks = 1;
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	9c 8b       	std	Y+20, r25	; 0x14
    3238:	8b 8b       	std	Y+19, r24	; 0x13
    323a:	3f c0       	rjmp	.+126    	; 0x32ba <A_DLSS_VoidStep3EnterPass+0x3e6>
	else if (__tmp > 65535)
    323c:	6d 89       	ldd	r22, Y+21	; 0x15
    323e:	7e 89       	ldd	r23, Y+22	; 0x16
    3240:	8f 89       	ldd	r24, Y+23	; 0x17
    3242:	98 8d       	ldd	r25, Y+24	; 0x18
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	3f ef       	ldi	r19, 0xFF	; 255
    3248:	4f e7       	ldi	r20, 0x7F	; 127
    324a:	57 e4       	ldi	r21, 0x47	; 71
    324c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3250:	18 16       	cp	r1, r24
    3252:	4c f5       	brge	.+82     	; 0x32a6 <A_DLSS_VoidStep3EnterPass+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3254:	69 8d       	ldd	r22, Y+25	; 0x19
    3256:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    325a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e2       	ldi	r20, 0x20	; 32
    3262:	51 e4       	ldi	r21, 0x41	; 65
    3264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	bc 01       	movw	r22, r24
    326e:	cd 01       	movw	r24, r26
    3270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	9c 8b       	std	Y+20, r25	; 0x14
    327a:	8b 8b       	std	Y+19, r24	; 0x13
    327c:	0f c0       	rjmp	.+30     	; 0x329c <A_DLSS_VoidStep3EnterPass+0x3c8>
    327e:	88 ec       	ldi	r24, 0xC8	; 200
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	9a 8b       	std	Y+18, r25	; 0x12
    3284:	89 8b       	std	Y+17, r24	; 0x11
    3286:	89 89       	ldd	r24, Y+17	; 0x11
    3288:	9a 89       	ldd	r25, Y+18	; 0x12
    328a:	01 97       	sbiw	r24, 0x01	; 1
    328c:	f1 f7       	brne	.-4      	; 0x328a <A_DLSS_VoidStep3EnterPass+0x3b6>
    328e:	9a 8b       	std	Y+18, r25	; 0x12
    3290:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3292:	8b 89       	ldd	r24, Y+19	; 0x13
    3294:	9c 89       	ldd	r25, Y+20	; 0x14
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	9c 8b       	std	Y+20, r25	; 0x14
    329a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329c:	8b 89       	ldd	r24, Y+19	; 0x13
    329e:	9c 89       	ldd	r25, Y+20	; 0x14
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	69 f7       	brne	.-38     	; 0x327e <A_DLSS_VoidStep3EnterPass+0x3aa>
    32a4:	14 c0       	rjmp	.+40     	; 0x32ce <A_DLSS_VoidStep3EnterPass+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a6:	6d 89       	ldd	r22, Y+21	; 0x15
    32a8:	7e 89       	ldd	r23, Y+22	; 0x16
    32aa:	8f 89       	ldd	r24, Y+23	; 0x17
    32ac:	98 8d       	ldd	r25, Y+24	; 0x18
    32ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	9c 8b       	std	Y+20, r25	; 0x14
    32b8:	8b 8b       	std	Y+19, r24	; 0x13
    32ba:	8b 89       	ldd	r24, Y+19	; 0x13
    32bc:	9c 89       	ldd	r25, Y+20	; 0x14
    32be:	98 8b       	std	Y+16, r25	; 0x10
    32c0:	8f 87       	std	Y+15, r24	; 0x0f
    32c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    32c4:	98 89       	ldd	r25, Y+16	; 0x10
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	f1 f7       	brne	.-4      	; 0x32c6 <A_DLSS_VoidStep3EnterPass+0x3f2>
    32ca:	98 8b       	std	Y+16, r25	; 0x10
    32cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_moveCursor(1,4);
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	64 e0       	ldi	r22, 0x04	; 4
    32d2:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <LCD_moveCursor>
    32d6:	91 c0       	rjmp	.+290    	; 0x33fa <A_DLSS_VoidStep3EnterPass+0x526>

	while(Copy_u8_counter < PASS_SIZE)
	{

		Local_u8KeyValue = KEYPAD_getPressedKey();
    32d8:	0e 94 12 21 	call	0x4224	; 0x4224 <KEYPAD_getPressedKey>
    32dc:	fe 01       	movw	r30, r28
    32de:	e8 5b       	subi	r30, 0xB8	; 184
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	80 83       	st	Z, r24
		if((Local_u8KeyValue >= 0) && (Local_u8KeyValue <= 9))
    32e4:	fe 01       	movw	r30, r28
    32e6:	e8 5b       	subi	r30, 0xB8	; 184
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	80 81       	ld	r24, Z
    32ec:	8a 30       	cpi	r24, 0x0A	; 10
    32ee:	08 f0       	brcs	.+2      	; 0x32f2 <A_DLSS_VoidStep3EnterPass+0x41e>
    32f0:	84 c0       	rjmp	.+264    	; 0x33fa <A_DLSS_VoidStep3EnterPass+0x526>
		{
			UART_sendByte(Local_u8KeyValue);
    32f2:	fe 01       	movw	r30, r28
    32f4:	e8 5b       	subi	r30, 0xB8	; 184
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	80 81       	ld	r24, Z
    32fa:	0e 94 85 2a 	call	0x550a	; 0x550a <UART_sendByte>
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	a8 e4       	ldi	r26, 0x48	; 72
    3304:	b2 e4       	ldi	r27, 0x42	; 66
    3306:	8b 87       	std	Y+11, r24	; 0x0b
    3308:	9c 87       	std	Y+12, r25	; 0x0c
    330a:	ad 87       	std	Y+13, r26	; 0x0d
    330c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    330e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3310:	7c 85       	ldd	r23, Y+12	; 0x0c
    3312:	8d 85       	ldd	r24, Y+13	; 0x0d
    3314:	9e 85       	ldd	r25, Y+14	; 0x0e
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	4a ef       	ldi	r20, 0xFA	; 250
    331c:	54 e4       	ldi	r21, 0x44	; 68
    331e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	8f 83       	std	Y+7, r24	; 0x07
    3328:	98 87       	std	Y+8, r25	; 0x08
    332a:	a9 87       	std	Y+9, r26	; 0x09
    332c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    332e:	6f 81       	ldd	r22, Y+7	; 0x07
    3330:	78 85       	ldd	r23, Y+8	; 0x08
    3332:	89 85       	ldd	r24, Y+9	; 0x09
    3334:	9a 85       	ldd	r25, Y+10	; 0x0a
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	40 e8       	ldi	r20, 0x80	; 128
    333c:	5f e3       	ldi	r21, 0x3F	; 63
    333e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3342:	88 23       	and	r24, r24
    3344:	2c f4       	brge	.+10     	; 0x3350 <A_DLSS_VoidStep3EnterPass+0x47c>
		__ticks = 1;
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	9e 83       	std	Y+6, r25	; 0x06
    334c:	8d 83       	std	Y+5, r24	; 0x05
    334e:	3f c0       	rjmp	.+126    	; 0x33ce <A_DLSS_VoidStep3EnterPass+0x4fa>
	else if (__tmp > 65535)
    3350:	6f 81       	ldd	r22, Y+7	; 0x07
    3352:	78 85       	ldd	r23, Y+8	; 0x08
    3354:	89 85       	ldd	r24, Y+9	; 0x09
    3356:	9a 85       	ldd	r25, Y+10	; 0x0a
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	3f ef       	ldi	r19, 0xFF	; 255
    335c:	4f e7       	ldi	r20, 0x7F	; 127
    335e:	57 e4       	ldi	r21, 0x47	; 71
    3360:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3364:	18 16       	cp	r1, r24
    3366:	4c f5       	brge	.+82     	; 0x33ba <A_DLSS_VoidStep3EnterPass+0x4e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3368:	6b 85       	ldd	r22, Y+11	; 0x0b
    336a:	7c 85       	ldd	r23, Y+12	; 0x0c
    336c:	8d 85       	ldd	r24, Y+13	; 0x0d
    336e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	40 e2       	ldi	r20, 0x20	; 32
    3376:	51 e4       	ldi	r21, 0x41	; 65
    3378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	bc 01       	movw	r22, r24
    3382:	cd 01       	movw	r24, r26
    3384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	9e 83       	std	Y+6, r25	; 0x06
    338e:	8d 83       	std	Y+5, r24	; 0x05
    3390:	0f c0       	rjmp	.+30     	; 0x33b0 <A_DLSS_VoidStep3EnterPass+0x4dc>
    3392:	88 ec       	ldi	r24, 0xC8	; 200
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	9c 83       	std	Y+4, r25	; 0x04
    3398:	8b 83       	std	Y+3, r24	; 0x03
    339a:	8b 81       	ldd	r24, Y+3	; 0x03
    339c:	9c 81       	ldd	r25, Y+4	; 0x04
    339e:	01 97       	sbiw	r24, 0x01	; 1
    33a0:	f1 f7       	brne	.-4      	; 0x339e <A_DLSS_VoidStep3EnterPass+0x4ca>
    33a2:	9c 83       	std	Y+4, r25	; 0x04
    33a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33a6:	8d 81       	ldd	r24, Y+5	; 0x05
    33a8:	9e 81       	ldd	r25, Y+6	; 0x06
    33aa:	01 97       	sbiw	r24, 0x01	; 1
    33ac:	9e 83       	std	Y+6, r25	; 0x06
    33ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b0:	8d 81       	ldd	r24, Y+5	; 0x05
    33b2:	9e 81       	ldd	r25, Y+6	; 0x06
    33b4:	00 97       	sbiw	r24, 0x00	; 0
    33b6:	69 f7       	brne	.-38     	; 0x3392 <A_DLSS_VoidStep3EnterPass+0x4be>
    33b8:	14 c0       	rjmp	.+40     	; 0x33e2 <A_DLSS_VoidStep3EnterPass+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ba:	6f 81       	ldd	r22, Y+7	; 0x07
    33bc:	78 85       	ldd	r23, Y+8	; 0x08
    33be:	89 85       	ldd	r24, Y+9	; 0x09
    33c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	9e 83       	std	Y+6, r25	; 0x06
    33cc:	8d 83       	std	Y+5, r24	; 0x05
    33ce:	8d 81       	ldd	r24, Y+5	; 0x05
    33d0:	9e 81       	ldd	r25, Y+6	; 0x06
    33d2:	9a 83       	std	Y+2, r25	; 0x02
    33d4:	89 83       	std	Y+1, r24	; 0x01
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	9a 81       	ldd	r25, Y+2	; 0x02
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	f1 f7       	brne	.-4      	; 0x33da <A_DLSS_VoidStep3EnterPass+0x506>
    33de:	9a 83       	std	Y+2, r25	; 0x02
    33e0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			LCD_displayCharacter('*');
    33e2:	8a e2       	ldi	r24, 0x2A	; 42
    33e4:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <LCD_displayCharacter>
			Copy_u8_counter++;
    33e8:	de 01       	movw	r26, r28
    33ea:	a9 5b       	subi	r26, 0xB9	; 185
    33ec:	bf 4f       	sbci	r27, 0xFF	; 255
    33ee:	fe 01       	movw	r30, r28
    33f0:	e9 5b       	subi	r30, 0xB9	; 185
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	80 81       	ld	r24, Z
    33f6:	8f 5f       	subi	r24, 0xFF	; 255
    33f8:	8c 93       	st	X, r24
	_delay_ms(20);
	LCD_displayString("PLZ Enter Pass: ");
	_delay_ms(10);
	LCD_moveCursor(1,4);

	while(Copy_u8_counter < PASS_SIZE)
    33fa:	fe 01       	movw	r30, r28
    33fc:	e9 5b       	subi	r30, 0xB9	; 185
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	80 81       	ld	r24, Z
    3402:	85 30       	cpi	r24, 0x05	; 5
    3404:	08 f4       	brcc	.+2      	; 0x3408 <A_DLSS_VoidStep3EnterPass+0x534>
    3406:	68 cf       	rjmp	.-304    	; 0x32d8 <A_DLSS_VoidStep3EnterPass+0x404>
			LCD_displayCharacter('*');
			Copy_u8_counter++;
		}

	}
	while(KEYPAD_getPressedKey() != '=');
    3408:	0e 94 12 21 	call	0x4224	; 0x4224 <KEYPAD_getPressedKey>
    340c:	8d 33       	cpi	r24, 0x3D	; 61
    340e:	e1 f7       	brne	.-8      	; 0x3408 <A_DLSS_VoidStep3EnterPass+0x534>
}
    3410:	c8 5b       	subi	r28, 0xB8	; 184
    3412:	df 4f       	sbci	r29, 0xFF	; 255
    3414:	0f b6       	in	r0, 0x3f	; 63
    3416:	f8 94       	cli
    3418:	de bf       	out	0x3e, r29	; 62
    341a:	0f be       	out	0x3f, r0	; 63
    341c:	cd bf       	out	0x3d, r28	; 61
    341e:	cf 91       	pop	r28
    3420:	df 91       	pop	r29
    3422:	1f 91       	pop	r17
    3424:	0f 91       	pop	r16
    3426:	08 95       	ret

00003428 <A_DLSS_VoidStep_3_MotorState>:
void A_DLSS_VoidStep_3_MotorState(void)
{
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62

	Timer1_init(&Timer1_configCTCMode);
    3430:	8a e8       	ldi	r24, 0x8A	; 138
    3432:	91 e0       	ldi	r25, 0x01	; 1
    3434:	0e 94 34 28 	call	0x5068	; 0x5068 <Timer1_init>
	g_Second =0;
    3438:	10 92 96 01 	sts	0x0196, r1
	LCD_clearScreen();
    343c:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
    3440:	07 c0       	rjmp	.+14     	; 0x3450 <A_DLSS_VoidStep_3_MotorState+0x28>

	while(g_Second < TIME_OF_DOOR_UNLOOKED)
	{
		LCD_displayStringRowColumn(0,0,"Door Unlocking");
    3442:	2f e2       	ldi	r18, 0x2F	; 47
    3444:	31 e0       	ldi	r19, 0x01	; 1
    3446:	80 e0       	ldi	r24, 0x00	; 0
    3448:	60 e0       	ldi	r22, 0x00	; 0
    344a:	a9 01       	movw	r20, r18
    344c:	0e 94 94 27 	call	0x4f28	; 0x4f28 <LCD_displayStringRowColumn>

	Timer1_init(&Timer1_configCTCMode);
	g_Second =0;
	LCD_clearScreen();

	while(g_Second < TIME_OF_DOOR_UNLOOKED)
    3450:	80 91 96 01 	lds	r24, 0x0196
    3454:	8f 30       	cpi	r24, 0x0F	; 15
    3456:	a8 f3       	brcs	.-22     	; 0x3442 <A_DLSS_VoidStep_3_MotorState+0x1a>
	{
		LCD_displayStringRowColumn(0,0,"Door Unlocking");
	}
	g_Second =0;
    3458:	10 92 96 01 	sts	0x0196, r1
	LCD_clearScreen();
    345c:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
    3460:	07 c0       	rjmp	.+14     	; 0x3470 <A_DLSS_VoidStep_3_MotorState+0x48>
	while(g_Second < TIME_OF_MOTOR_HOLD)
	{
		LCD_displayStringRowColumn(0,0,"Door Hold");
    3462:	2e e3       	ldi	r18, 0x3E	; 62
    3464:	31 e0       	ldi	r19, 0x01	; 1
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	60 e0       	ldi	r22, 0x00	; 0
    346a:	a9 01       	movw	r20, r18
    346c:	0e 94 94 27 	call	0x4f28	; 0x4f28 <LCD_displayStringRowColumn>
	{
		LCD_displayStringRowColumn(0,0,"Door Unlocking");
	}
	g_Second =0;
	LCD_clearScreen();
	while(g_Second < TIME_OF_MOTOR_HOLD)
    3470:	80 91 96 01 	lds	r24, 0x0196
    3474:	83 30       	cpi	r24, 0x03	; 3
    3476:	a8 f3       	brcs	.-22     	; 0x3462 <A_DLSS_VoidStep_3_MotorState+0x3a>
	{
		LCD_displayStringRowColumn(0,0,"Door Hold");
	}
	g_Second=0;
    3478:	10 92 96 01 	sts	0x0196, r1
	LCD_clearScreen();
    347c:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
    3480:	07 c0       	rjmp	.+14     	; 0x3490 <A_DLSS_VoidStep_3_MotorState+0x68>

	while(g_Second < TIME_OF_DOOR_LOOKED)
	{
		LCD_displayStringRowColumn(0,0,"Door is locked");
    3482:	28 e4       	ldi	r18, 0x48	; 72
    3484:	31 e0       	ldi	r19, 0x01	; 1
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	60 e0       	ldi	r22, 0x00	; 0
    348a:	a9 01       	movw	r20, r18
    348c:	0e 94 94 27 	call	0x4f28	; 0x4f28 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(0,0,"Door Hold");
	}
	g_Second=0;
	LCD_clearScreen();

	while(g_Second < TIME_OF_DOOR_LOOKED)
    3490:	80 91 96 01 	lds	r24, 0x0196
    3494:	8f 30       	cpi	r24, 0x0F	; 15
    3496:	a8 f3       	brcs	.-22     	; 0x3482 <A_DLSS_VoidStep_3_MotorState+0x5a>
	{
		LCD_displayStringRowColumn(0,0,"Door is locked");
	}

	g_Second=0;
    3498:	10 92 96 01 	sts	0x0196, r1
	Timer1_deInit();
    349c:	0e 94 5d 28 	call	0x50ba	; 0x50ba <Timer1_deInit>
	LCD_clearScreen();
    34a0:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>

}
    34a4:	cf 91       	pop	r28
    34a6:	df 91       	pop	r29
    34a8:	08 95       	ret

000034aa <A_DLSS_VoidGenerateSecond>:
void A_DLSS_VoidGenerateSecond(void)
{
    34aa:	df 93       	push	r29
    34ac:	cf 93       	push	r28
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
	g_Second++;
    34b2:	80 91 96 01 	lds	r24, 0x0196
    34b6:	8f 5f       	subi	r24, 0xFF	; 255
    34b8:	80 93 96 01 	sts	0x0196, r24
}
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	08 95       	ret

000034c2 <A_DLSS_VoidStep4ChangePass>:

void A_DLSS_VoidStep4ChangePass(void)
{
    34c2:	0f 93       	push	r16
    34c4:	1f 93       	push	r17
    34c6:	df 93       	push	r29
    34c8:	cf 93       	push	r28
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
    34ce:	c8 54       	subi	r28, 0x48	; 72
    34d0:	d0 40       	sbci	r29, 0x00	; 0
    34d2:	0f b6       	in	r0, 0x3f	; 63
    34d4:	f8 94       	cli
    34d6:	de bf       	out	0x3e, r29	; 62
    34d8:	0f be       	out	0x3f, r0	; 63
    34da:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8KeyValue= KEY_NOT_PRESSED;
    34dc:	fe 01       	movw	r30, r28
    34de:	e8 5b       	subi	r30, 0xB8	; 184
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	8f ef       	ldi	r24, 0xFF	; 255
    34e4:	80 83       	st	Z, r24
	uint8 Copy_u8_counter =0;
    34e6:	fe 01       	movw	r30, r28
    34e8:	e9 5b       	subi	r30, 0xB9	; 185
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	10 82       	st	Z, r1
	LCD_clearScreen();
    34ee:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
    34f2:	fe 01       	movw	r30, r28
    34f4:	ed 5b       	subi	r30, 0xBD	; 189
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	a0 ea       	ldi	r26, 0xA0	; 160
    34fe:	b1 e4       	ldi	r27, 0x41	; 65
    3500:	80 83       	st	Z, r24
    3502:	91 83       	std	Z+1, r25	; 0x01
    3504:	a2 83       	std	Z+2, r26	; 0x02
    3506:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3508:	8e 01       	movw	r16, r28
    350a:	01 5c       	subi	r16, 0xC1	; 193
    350c:	1f 4f       	sbci	r17, 0xFF	; 255
    350e:	fe 01       	movw	r30, r28
    3510:	ed 5b       	subi	r30, 0xBD	; 189
    3512:	ff 4f       	sbci	r31, 0xFF	; 255
    3514:	60 81       	ld	r22, Z
    3516:	71 81       	ldd	r23, Z+1	; 0x01
    3518:	82 81       	ldd	r24, Z+2	; 0x02
    351a:	93 81       	ldd	r25, Z+3	; 0x03
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	4a ef       	ldi	r20, 0xFA	; 250
    3522:	54 e4       	ldi	r21, 0x44	; 68
    3524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	f8 01       	movw	r30, r16
    352e:	80 83       	st	Z, r24
    3530:	91 83       	std	Z+1, r25	; 0x01
    3532:	a2 83       	std	Z+2, r26	; 0x02
    3534:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3536:	fe 01       	movw	r30, r28
    3538:	ff 96       	adiw	r30, 0x3f	; 63
    353a:	60 81       	ld	r22, Z
    353c:	71 81       	ldd	r23, Z+1	; 0x01
    353e:	82 81       	ldd	r24, Z+2	; 0x02
    3540:	93 81       	ldd	r25, Z+3	; 0x03
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	40 e8       	ldi	r20, 0x80	; 128
    3548:	5f e3       	ldi	r21, 0x3F	; 63
    354a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    354e:	88 23       	and	r24, r24
    3550:	2c f4       	brge	.+10     	; 0x355c <A_DLSS_VoidStep4ChangePass+0x9a>
		__ticks = 1;
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	9e af       	std	Y+62, r25	; 0x3e
    3558:	8d af       	std	Y+61, r24	; 0x3d
    355a:	46 c0       	rjmp	.+140    	; 0x35e8 <A_DLSS_VoidStep4ChangePass+0x126>
	else if (__tmp > 65535)
    355c:	fe 01       	movw	r30, r28
    355e:	ff 96       	adiw	r30, 0x3f	; 63
    3560:	60 81       	ld	r22, Z
    3562:	71 81       	ldd	r23, Z+1	; 0x01
    3564:	82 81       	ldd	r24, Z+2	; 0x02
    3566:	93 81       	ldd	r25, Z+3	; 0x03
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	3f ef       	ldi	r19, 0xFF	; 255
    356c:	4f e7       	ldi	r20, 0x7F	; 127
    356e:	57 e4       	ldi	r21, 0x47	; 71
    3570:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3574:	18 16       	cp	r1, r24
    3576:	64 f5       	brge	.+88     	; 0x35d0 <A_DLSS_VoidStep4ChangePass+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3578:	fe 01       	movw	r30, r28
    357a:	ed 5b       	subi	r30, 0xBD	; 189
    357c:	ff 4f       	sbci	r31, 0xFF	; 255
    357e:	60 81       	ld	r22, Z
    3580:	71 81       	ldd	r23, Z+1	; 0x01
    3582:	82 81       	ldd	r24, Z+2	; 0x02
    3584:	93 81       	ldd	r25, Z+3	; 0x03
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	40 e2       	ldi	r20, 0x20	; 32
    358c:	51 e4       	ldi	r21, 0x41	; 65
    358e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	bc 01       	movw	r22, r24
    3598:	cd 01       	movw	r24, r26
    359a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	9e af       	std	Y+62, r25	; 0x3e
    35a4:	8d af       	std	Y+61, r24	; 0x3d
    35a6:	0f c0       	rjmp	.+30     	; 0x35c6 <A_DLSS_VoidStep4ChangePass+0x104>
    35a8:	88 ec       	ldi	r24, 0xC8	; 200
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	9c af       	std	Y+60, r25	; 0x3c
    35ae:	8b af       	std	Y+59, r24	; 0x3b
    35b0:	8b ad       	ldd	r24, Y+59	; 0x3b
    35b2:	9c ad       	ldd	r25, Y+60	; 0x3c
    35b4:	01 97       	sbiw	r24, 0x01	; 1
    35b6:	f1 f7       	brne	.-4      	; 0x35b4 <A_DLSS_VoidStep4ChangePass+0xf2>
    35b8:	9c af       	std	Y+60, r25	; 0x3c
    35ba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    35be:	9e ad       	ldd	r25, Y+62	; 0x3e
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	9e af       	std	Y+62, r25	; 0x3e
    35c4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    35c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    35ca:	00 97       	sbiw	r24, 0x00	; 0
    35cc:	69 f7       	brne	.-38     	; 0x35a8 <A_DLSS_VoidStep4ChangePass+0xe6>
    35ce:	16 c0       	rjmp	.+44     	; 0x35fc <A_DLSS_VoidStep4ChangePass+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d0:	fe 01       	movw	r30, r28
    35d2:	ff 96       	adiw	r30, 0x3f	; 63
    35d4:	60 81       	ld	r22, Z
    35d6:	71 81       	ldd	r23, Z+1	; 0x01
    35d8:	82 81       	ldd	r24, Z+2	; 0x02
    35da:	93 81       	ldd	r25, Z+3	; 0x03
    35dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	9e af       	std	Y+62, r25	; 0x3e
    35e6:	8d af       	std	Y+61, r24	; 0x3d
    35e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    35ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    35ec:	9a af       	std	Y+58, r25	; 0x3a
    35ee:	89 af       	std	Y+57, r24	; 0x39
    35f0:	89 ad       	ldd	r24, Y+57	; 0x39
    35f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    35f4:	01 97       	sbiw	r24, 0x01	; 1
    35f6:	f1 f7       	brne	.-4      	; 0x35f4 <A_DLSS_VoidStep4ChangePass+0x132>
    35f8:	9a af       	std	Y+58, r25	; 0x3a
    35fa:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(20);
	LCD_displayString("Change Pass ");
    35fc:	87 e5       	ldi	r24, 0x57	; 87
    35fe:	91 e0       	ldi	r25, 0x01	; 1
    3600:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	aa ef       	ldi	r26, 0xFA	; 250
    360a:	b3 e4       	ldi	r27, 0x43	; 67
    360c:	8d ab       	std	Y+53, r24	; 0x35
    360e:	9e ab       	std	Y+54, r25	; 0x36
    3610:	af ab       	std	Y+55, r26	; 0x37
    3612:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3614:	6d a9       	ldd	r22, Y+53	; 0x35
    3616:	7e a9       	ldd	r23, Y+54	; 0x36
    3618:	8f a9       	ldd	r24, Y+55	; 0x37
    361a:	98 ad       	ldd	r25, Y+56	; 0x38
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	4a ef       	ldi	r20, 0xFA	; 250
    3622:	54 e4       	ldi	r21, 0x44	; 68
    3624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	89 ab       	std	Y+49, r24	; 0x31
    362e:	9a ab       	std	Y+50, r25	; 0x32
    3630:	ab ab       	std	Y+51, r26	; 0x33
    3632:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3634:	69 a9       	ldd	r22, Y+49	; 0x31
    3636:	7a a9       	ldd	r23, Y+50	; 0x32
    3638:	8b a9       	ldd	r24, Y+51	; 0x33
    363a:	9c a9       	ldd	r25, Y+52	; 0x34
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	40 e8       	ldi	r20, 0x80	; 128
    3642:	5f e3       	ldi	r21, 0x3F	; 63
    3644:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3648:	88 23       	and	r24, r24
    364a:	2c f4       	brge	.+10     	; 0x3656 <A_DLSS_VoidStep4ChangePass+0x194>
		__ticks = 1;
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	98 ab       	std	Y+48, r25	; 0x30
    3652:	8f a7       	std	Y+47, r24	; 0x2f
    3654:	3f c0       	rjmp	.+126    	; 0x36d4 <A_DLSS_VoidStep4ChangePass+0x212>
	else if (__tmp > 65535)
    3656:	69 a9       	ldd	r22, Y+49	; 0x31
    3658:	7a a9       	ldd	r23, Y+50	; 0x32
    365a:	8b a9       	ldd	r24, Y+51	; 0x33
    365c:	9c a9       	ldd	r25, Y+52	; 0x34
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	3f ef       	ldi	r19, 0xFF	; 255
    3662:	4f e7       	ldi	r20, 0x7F	; 127
    3664:	57 e4       	ldi	r21, 0x47	; 71
    3666:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    366a:	18 16       	cp	r1, r24
    366c:	4c f5       	brge	.+82     	; 0x36c0 <A_DLSS_VoidStep4ChangePass+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    366e:	6d a9       	ldd	r22, Y+53	; 0x35
    3670:	7e a9       	ldd	r23, Y+54	; 0x36
    3672:	8f a9       	ldd	r24, Y+55	; 0x37
    3674:	98 ad       	ldd	r25, Y+56	; 0x38
    3676:	20 e0       	ldi	r18, 0x00	; 0
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	40 e2       	ldi	r20, 0x20	; 32
    367c:	51 e4       	ldi	r21, 0x41	; 65
    367e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	bc 01       	movw	r22, r24
    3688:	cd 01       	movw	r24, r26
    368a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	98 ab       	std	Y+48, r25	; 0x30
    3694:	8f a7       	std	Y+47, r24	; 0x2f
    3696:	0f c0       	rjmp	.+30     	; 0x36b6 <A_DLSS_VoidStep4ChangePass+0x1f4>
    3698:	88 ec       	ldi	r24, 0xC8	; 200
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	9e a7       	std	Y+46, r25	; 0x2e
    369e:	8d a7       	std	Y+45, r24	; 0x2d
    36a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    36a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	f1 f7       	brne	.-4      	; 0x36a4 <A_DLSS_VoidStep4ChangePass+0x1e2>
    36a8:	9e a7       	std	Y+46, r25	; 0x2e
    36aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    36ae:	98 a9       	ldd	r25, Y+48	; 0x30
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	98 ab       	std	Y+48, r25	; 0x30
    36b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    36b8:	98 a9       	ldd	r25, Y+48	; 0x30
    36ba:	00 97       	sbiw	r24, 0x00	; 0
    36bc:	69 f7       	brne	.-38     	; 0x3698 <A_DLSS_VoidStep4ChangePass+0x1d6>
    36be:	14 c0       	rjmp	.+40     	; 0x36e8 <A_DLSS_VoidStep4ChangePass+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c0:	69 a9       	ldd	r22, Y+49	; 0x31
    36c2:	7a a9       	ldd	r23, Y+50	; 0x32
    36c4:	8b a9       	ldd	r24, Y+51	; 0x33
    36c6:	9c a9       	ldd	r25, Y+52	; 0x34
    36c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	98 ab       	std	Y+48, r25	; 0x30
    36d2:	8f a7       	std	Y+47, r24	; 0x2f
    36d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    36d6:	98 a9       	ldd	r25, Y+48	; 0x30
    36d8:	9c a7       	std	Y+44, r25	; 0x2c
    36da:	8b a7       	std	Y+43, r24	; 0x2b
    36dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    36de:	9c a5       	ldd	r25, Y+44	; 0x2c
    36e0:	01 97       	sbiw	r24, 0x01	; 1
    36e2:	f1 f7       	brne	.-4      	; 0x36e0 <A_DLSS_VoidStep4ChangePass+0x21e>
    36e4:	9c a7       	std	Y+44, r25	; 0x2c
    36e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);
	LCD_clearScreen();
    36e8:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	a0 ea       	ldi	r26, 0xA0	; 160
    36f2:	b1 e4       	ldi	r27, 0x41	; 65
    36f4:	8f a3       	std	Y+39, r24	; 0x27
    36f6:	98 a7       	std	Y+40, r25	; 0x28
    36f8:	a9 a7       	std	Y+41, r26	; 0x29
    36fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fc:	6f a1       	ldd	r22, Y+39	; 0x27
    36fe:	78 a5       	ldd	r23, Y+40	; 0x28
    3700:	89 a5       	ldd	r24, Y+41	; 0x29
    3702:	9a a5       	ldd	r25, Y+42	; 0x2a
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	4a ef       	ldi	r20, 0xFA	; 250
    370a:	54 e4       	ldi	r21, 0x44	; 68
    370c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	8b a3       	std	Y+35, r24	; 0x23
    3716:	9c a3       	std	Y+36, r25	; 0x24
    3718:	ad a3       	std	Y+37, r26	; 0x25
    371a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    371c:	6b a1       	ldd	r22, Y+35	; 0x23
    371e:	7c a1       	ldd	r23, Y+36	; 0x24
    3720:	8d a1       	ldd	r24, Y+37	; 0x25
    3722:	9e a1       	ldd	r25, Y+38	; 0x26
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	40 e8       	ldi	r20, 0x80	; 128
    372a:	5f e3       	ldi	r21, 0x3F	; 63
    372c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3730:	88 23       	and	r24, r24
    3732:	2c f4       	brge	.+10     	; 0x373e <A_DLSS_VoidStep4ChangePass+0x27c>
		__ticks = 1;
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	9a a3       	std	Y+34, r25	; 0x22
    373a:	89 a3       	std	Y+33, r24	; 0x21
    373c:	3f c0       	rjmp	.+126    	; 0x37bc <A_DLSS_VoidStep4ChangePass+0x2fa>
	else if (__tmp > 65535)
    373e:	6b a1       	ldd	r22, Y+35	; 0x23
    3740:	7c a1       	ldd	r23, Y+36	; 0x24
    3742:	8d a1       	ldd	r24, Y+37	; 0x25
    3744:	9e a1       	ldd	r25, Y+38	; 0x26
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	3f ef       	ldi	r19, 0xFF	; 255
    374a:	4f e7       	ldi	r20, 0x7F	; 127
    374c:	57 e4       	ldi	r21, 0x47	; 71
    374e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3752:	18 16       	cp	r1, r24
    3754:	4c f5       	brge	.+82     	; 0x37a8 <A_DLSS_VoidStep4ChangePass+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3756:	6f a1       	ldd	r22, Y+39	; 0x27
    3758:	78 a5       	ldd	r23, Y+40	; 0x28
    375a:	89 a5       	ldd	r24, Y+41	; 0x29
    375c:	9a a5       	ldd	r25, Y+42	; 0x2a
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	40 e2       	ldi	r20, 0x20	; 32
    3764:	51 e4       	ldi	r21, 0x41	; 65
    3766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	bc 01       	movw	r22, r24
    3770:	cd 01       	movw	r24, r26
    3772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	9a a3       	std	Y+34, r25	; 0x22
    377c:	89 a3       	std	Y+33, r24	; 0x21
    377e:	0f c0       	rjmp	.+30     	; 0x379e <A_DLSS_VoidStep4ChangePass+0x2dc>
    3780:	88 ec       	ldi	r24, 0xC8	; 200
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	98 a3       	std	Y+32, r25	; 0x20
    3786:	8f 8f       	std	Y+31, r24	; 0x1f
    3788:	8f 8d       	ldd	r24, Y+31	; 0x1f
    378a:	98 a1       	ldd	r25, Y+32	; 0x20
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	f1 f7       	brne	.-4      	; 0x378c <A_DLSS_VoidStep4ChangePass+0x2ca>
    3790:	98 a3       	std	Y+32, r25	; 0x20
    3792:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3794:	89 a1       	ldd	r24, Y+33	; 0x21
    3796:	9a a1       	ldd	r25, Y+34	; 0x22
    3798:	01 97       	sbiw	r24, 0x01	; 1
    379a:	9a a3       	std	Y+34, r25	; 0x22
    379c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379e:	89 a1       	ldd	r24, Y+33	; 0x21
    37a0:	9a a1       	ldd	r25, Y+34	; 0x22
    37a2:	00 97       	sbiw	r24, 0x00	; 0
    37a4:	69 f7       	brne	.-38     	; 0x3780 <A_DLSS_VoidStep4ChangePass+0x2be>
    37a6:	14 c0       	rjmp	.+40     	; 0x37d0 <A_DLSS_VoidStep4ChangePass+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a8:	6b a1       	ldd	r22, Y+35	; 0x23
    37aa:	7c a1       	ldd	r23, Y+36	; 0x24
    37ac:	8d a1       	ldd	r24, Y+37	; 0x25
    37ae:	9e a1       	ldd	r25, Y+38	; 0x26
    37b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	9a a3       	std	Y+34, r25	; 0x22
    37ba:	89 a3       	std	Y+33, r24	; 0x21
    37bc:	89 a1       	ldd	r24, Y+33	; 0x21
    37be:	9a a1       	ldd	r25, Y+34	; 0x22
    37c0:	9e 8f       	std	Y+30, r25	; 0x1e
    37c2:	8d 8f       	std	Y+29, r24	; 0x1d
    37c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	f1 f7       	brne	.-4      	; 0x37c8 <A_DLSS_VoidStep4ChangePass+0x306>
    37cc:	9e 8f       	std	Y+30, r25	; 0x1e
    37ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	LCD_displayString("PLZ Enter Pass: ");
    37d0:	8d eb       	ldi	r24, 0xBD	; 189
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	a0 e2       	ldi	r26, 0x20	; 32
    37de:	b1 e4       	ldi	r27, 0x41	; 65
    37e0:	89 8f       	std	Y+25, r24	; 0x19
    37e2:	9a 8f       	std	Y+26, r25	; 0x1a
    37e4:	ab 8f       	std	Y+27, r26	; 0x1b
    37e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e8:	69 8d       	ldd	r22, Y+25	; 0x19
    37ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	4a ef       	ldi	r20, 0xFA	; 250
    37f6:	54 e4       	ldi	r21, 0x44	; 68
    37f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	8d 8b       	std	Y+21, r24	; 0x15
    3802:	9e 8b       	std	Y+22, r25	; 0x16
    3804:	af 8b       	std	Y+23, r26	; 0x17
    3806:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3808:	6d 89       	ldd	r22, Y+21	; 0x15
    380a:	7e 89       	ldd	r23, Y+22	; 0x16
    380c:	8f 89       	ldd	r24, Y+23	; 0x17
    380e:	98 8d       	ldd	r25, Y+24	; 0x18
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	40 e8       	ldi	r20, 0x80	; 128
    3816:	5f e3       	ldi	r21, 0x3F	; 63
    3818:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    381c:	88 23       	and	r24, r24
    381e:	2c f4       	brge	.+10     	; 0x382a <A_DLSS_VoidStep4ChangePass+0x368>
		__ticks = 1;
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	9c 8b       	std	Y+20, r25	; 0x14
    3826:	8b 8b       	std	Y+19, r24	; 0x13
    3828:	3f c0       	rjmp	.+126    	; 0x38a8 <A_DLSS_VoidStep4ChangePass+0x3e6>
	else if (__tmp > 65535)
    382a:	6d 89       	ldd	r22, Y+21	; 0x15
    382c:	7e 89       	ldd	r23, Y+22	; 0x16
    382e:	8f 89       	ldd	r24, Y+23	; 0x17
    3830:	98 8d       	ldd	r25, Y+24	; 0x18
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	3f ef       	ldi	r19, 0xFF	; 255
    3836:	4f e7       	ldi	r20, 0x7F	; 127
    3838:	57 e4       	ldi	r21, 0x47	; 71
    383a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    383e:	18 16       	cp	r1, r24
    3840:	4c f5       	brge	.+82     	; 0x3894 <A_DLSS_VoidStep4ChangePass+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3842:	69 8d       	ldd	r22, Y+25	; 0x19
    3844:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3846:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3848:	9c 8d       	ldd	r25, Y+28	; 0x1c
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	40 e2       	ldi	r20, 0x20	; 32
    3850:	51 e4       	ldi	r21, 0x41	; 65
    3852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	9c 8b       	std	Y+20, r25	; 0x14
    3868:	8b 8b       	std	Y+19, r24	; 0x13
    386a:	0f c0       	rjmp	.+30     	; 0x388a <A_DLSS_VoidStep4ChangePass+0x3c8>
    386c:	88 ec       	ldi	r24, 0xC8	; 200
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	9a 8b       	std	Y+18, r25	; 0x12
    3872:	89 8b       	std	Y+17, r24	; 0x11
    3874:	89 89       	ldd	r24, Y+17	; 0x11
    3876:	9a 89       	ldd	r25, Y+18	; 0x12
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	f1 f7       	brne	.-4      	; 0x3878 <A_DLSS_VoidStep4ChangePass+0x3b6>
    387c:	9a 8b       	std	Y+18, r25	; 0x12
    387e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3880:	8b 89       	ldd	r24, Y+19	; 0x13
    3882:	9c 89       	ldd	r25, Y+20	; 0x14
    3884:	01 97       	sbiw	r24, 0x01	; 1
    3886:	9c 8b       	std	Y+20, r25	; 0x14
    3888:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    388a:	8b 89       	ldd	r24, Y+19	; 0x13
    388c:	9c 89       	ldd	r25, Y+20	; 0x14
    388e:	00 97       	sbiw	r24, 0x00	; 0
    3890:	69 f7       	brne	.-38     	; 0x386c <A_DLSS_VoidStep4ChangePass+0x3aa>
    3892:	14 c0       	rjmp	.+40     	; 0x38bc <A_DLSS_VoidStep4ChangePass+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3894:	6d 89       	ldd	r22, Y+21	; 0x15
    3896:	7e 89       	ldd	r23, Y+22	; 0x16
    3898:	8f 89       	ldd	r24, Y+23	; 0x17
    389a:	98 8d       	ldd	r25, Y+24	; 0x18
    389c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	9c 8b       	std	Y+20, r25	; 0x14
    38a6:	8b 8b       	std	Y+19, r24	; 0x13
    38a8:	8b 89       	ldd	r24, Y+19	; 0x13
    38aa:	9c 89       	ldd	r25, Y+20	; 0x14
    38ac:	98 8b       	std	Y+16, r25	; 0x10
    38ae:	8f 87       	std	Y+15, r24	; 0x0f
    38b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    38b2:	98 89       	ldd	r25, Y+16	; 0x10
    38b4:	01 97       	sbiw	r24, 0x01	; 1
    38b6:	f1 f7       	brne	.-4      	; 0x38b4 <A_DLSS_VoidStep4ChangePass+0x3f2>
    38b8:	98 8b       	std	Y+16, r25	; 0x10
    38ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_moveCursor(1,4);
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	64 e0       	ldi	r22, 0x04	; 4
    38c0:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <LCD_moveCursor>
    38c4:	91 c0       	rjmp	.+290    	; 0x39e8 <A_DLSS_VoidStep4ChangePass+0x526>

	while(Copy_u8_counter < PASS_SIZE)
	{

		Local_u8KeyValue = KEYPAD_getPressedKey();
    38c6:	0e 94 12 21 	call	0x4224	; 0x4224 <KEYPAD_getPressedKey>
    38ca:	fe 01       	movw	r30, r28
    38cc:	e8 5b       	subi	r30, 0xB8	; 184
    38ce:	ff 4f       	sbci	r31, 0xFF	; 255
    38d0:	80 83       	st	Z, r24
		if((Local_u8KeyValue >= 0) && (Local_u8KeyValue <= 9))
    38d2:	fe 01       	movw	r30, r28
    38d4:	e8 5b       	subi	r30, 0xB8	; 184
    38d6:	ff 4f       	sbci	r31, 0xFF	; 255
    38d8:	80 81       	ld	r24, Z
    38da:	8a 30       	cpi	r24, 0x0A	; 10
    38dc:	08 f0       	brcs	.+2      	; 0x38e0 <A_DLSS_VoidStep4ChangePass+0x41e>
    38de:	84 c0       	rjmp	.+264    	; 0x39e8 <A_DLSS_VoidStep4ChangePass+0x526>
		{
			UART_sendByte(Local_u8KeyValue);
    38e0:	fe 01       	movw	r30, r28
    38e2:	e8 5b       	subi	r30, 0xB8	; 184
    38e4:	ff 4f       	sbci	r31, 0xFF	; 255
    38e6:	80 81       	ld	r24, Z
    38e8:	0e 94 85 2a 	call	0x550a	; 0x550a <UART_sendByte>
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	a8 e4       	ldi	r26, 0x48	; 72
    38f2:	b2 e4       	ldi	r27, 0x42	; 66
    38f4:	8b 87       	std	Y+11, r24	; 0x0b
    38f6:	9c 87       	std	Y+12, r25	; 0x0c
    38f8:	ad 87       	std	Y+13, r26	; 0x0d
    38fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    38fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3900:	8d 85       	ldd	r24, Y+13	; 0x0d
    3902:	9e 85       	ldd	r25, Y+14	; 0x0e
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	4a ef       	ldi	r20, 0xFA	; 250
    390a:	54 e4       	ldi	r21, 0x44	; 68
    390c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	8f 83       	std	Y+7, r24	; 0x07
    3916:	98 87       	std	Y+8, r25	; 0x08
    3918:	a9 87       	std	Y+9, r26	; 0x09
    391a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    391c:	6f 81       	ldd	r22, Y+7	; 0x07
    391e:	78 85       	ldd	r23, Y+8	; 0x08
    3920:	89 85       	ldd	r24, Y+9	; 0x09
    3922:	9a 85       	ldd	r25, Y+10	; 0x0a
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	40 e8       	ldi	r20, 0x80	; 128
    392a:	5f e3       	ldi	r21, 0x3F	; 63
    392c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3930:	88 23       	and	r24, r24
    3932:	2c f4       	brge	.+10     	; 0x393e <A_DLSS_VoidStep4ChangePass+0x47c>
		__ticks = 1;
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	9e 83       	std	Y+6, r25	; 0x06
    393a:	8d 83       	std	Y+5, r24	; 0x05
    393c:	3f c0       	rjmp	.+126    	; 0x39bc <A_DLSS_VoidStep4ChangePass+0x4fa>
	else if (__tmp > 65535)
    393e:	6f 81       	ldd	r22, Y+7	; 0x07
    3940:	78 85       	ldd	r23, Y+8	; 0x08
    3942:	89 85       	ldd	r24, Y+9	; 0x09
    3944:	9a 85       	ldd	r25, Y+10	; 0x0a
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	3f ef       	ldi	r19, 0xFF	; 255
    394a:	4f e7       	ldi	r20, 0x7F	; 127
    394c:	57 e4       	ldi	r21, 0x47	; 71
    394e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3952:	18 16       	cp	r1, r24
    3954:	4c f5       	brge	.+82     	; 0x39a8 <A_DLSS_VoidStep4ChangePass+0x4e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3956:	6b 85       	ldd	r22, Y+11	; 0x0b
    3958:	7c 85       	ldd	r23, Y+12	; 0x0c
    395a:	8d 85       	ldd	r24, Y+13	; 0x0d
    395c:	9e 85       	ldd	r25, Y+14	; 0x0e
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	40 e2       	ldi	r20, 0x20	; 32
    3964:	51 e4       	ldi	r21, 0x41	; 65
    3966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	bc 01       	movw	r22, r24
    3970:	cd 01       	movw	r24, r26
    3972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	9e 83       	std	Y+6, r25	; 0x06
    397c:	8d 83       	std	Y+5, r24	; 0x05
    397e:	0f c0       	rjmp	.+30     	; 0x399e <A_DLSS_VoidStep4ChangePass+0x4dc>
    3980:	88 ec       	ldi	r24, 0xC8	; 200
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	9c 83       	std	Y+4, r25	; 0x04
    3986:	8b 83       	std	Y+3, r24	; 0x03
    3988:	8b 81       	ldd	r24, Y+3	; 0x03
    398a:	9c 81       	ldd	r25, Y+4	; 0x04
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	f1 f7       	brne	.-4      	; 0x398c <A_DLSS_VoidStep4ChangePass+0x4ca>
    3990:	9c 83       	std	Y+4, r25	; 0x04
    3992:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3994:	8d 81       	ldd	r24, Y+5	; 0x05
    3996:	9e 81       	ldd	r25, Y+6	; 0x06
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	9e 83       	std	Y+6, r25	; 0x06
    399c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    399e:	8d 81       	ldd	r24, Y+5	; 0x05
    39a0:	9e 81       	ldd	r25, Y+6	; 0x06
    39a2:	00 97       	sbiw	r24, 0x00	; 0
    39a4:	69 f7       	brne	.-38     	; 0x3980 <A_DLSS_VoidStep4ChangePass+0x4be>
    39a6:	14 c0       	rjmp	.+40     	; 0x39d0 <A_DLSS_VoidStep4ChangePass+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a8:	6f 81       	ldd	r22, Y+7	; 0x07
    39aa:	78 85       	ldd	r23, Y+8	; 0x08
    39ac:	89 85       	ldd	r24, Y+9	; 0x09
    39ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    39b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	9e 83       	std	Y+6, r25	; 0x06
    39ba:	8d 83       	std	Y+5, r24	; 0x05
    39bc:	8d 81       	ldd	r24, Y+5	; 0x05
    39be:	9e 81       	ldd	r25, Y+6	; 0x06
    39c0:	9a 83       	std	Y+2, r25	; 0x02
    39c2:	89 83       	std	Y+1, r24	; 0x01
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	9a 81       	ldd	r25, Y+2	; 0x02
    39c8:	01 97       	sbiw	r24, 0x01	; 1
    39ca:	f1 f7       	brne	.-4      	; 0x39c8 <A_DLSS_VoidStep4ChangePass+0x506>
    39cc:	9a 83       	std	Y+2, r25	; 0x02
    39ce:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			LCD_displayCharacter('*');
    39d0:	8a e2       	ldi	r24, 0x2A	; 42
    39d2:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <LCD_displayCharacter>
			Copy_u8_counter++;
    39d6:	de 01       	movw	r26, r28
    39d8:	a9 5b       	subi	r26, 0xB9	; 185
    39da:	bf 4f       	sbci	r27, 0xFF	; 255
    39dc:	fe 01       	movw	r30, r28
    39de:	e9 5b       	subi	r30, 0xB9	; 185
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	80 81       	ld	r24, Z
    39e4:	8f 5f       	subi	r24, 0xFF	; 255
    39e6:	8c 93       	st	X, r24
	_delay_ms(20);
	LCD_displayString("PLZ Enter Pass: ");
	_delay_ms(10);
	LCD_moveCursor(1,4);

	while(Copy_u8_counter < PASS_SIZE)
    39e8:	fe 01       	movw	r30, r28
    39ea:	e9 5b       	subi	r30, 0xB9	; 185
    39ec:	ff 4f       	sbci	r31, 0xFF	; 255
    39ee:	80 81       	ld	r24, Z
    39f0:	85 30       	cpi	r24, 0x05	; 5
    39f2:	08 f4       	brcc	.+2      	; 0x39f6 <A_DLSS_VoidStep4ChangePass+0x534>
    39f4:	68 cf       	rjmp	.-304    	; 0x38c6 <A_DLSS_VoidStep4ChangePass+0x404>
			LCD_displayCharacter('*');
			Copy_u8_counter++;
		}

	}
	while(KEYPAD_getPressedKey() != '=');
    39f6:	0e 94 12 21 	call	0x4224	; 0x4224 <KEYPAD_getPressedKey>
    39fa:	8d 33       	cpi	r24, 0x3D	; 61
    39fc:	e1 f7       	brne	.-8      	; 0x39f6 <A_DLSS_VoidStep4ChangePass+0x534>
}
    39fe:	c8 5b       	subi	r28, 0xB8	; 184
    3a00:	df 4f       	sbci	r29, 0xFF	; 255
    3a02:	0f b6       	in	r0, 0x3f	; 63
    3a04:	f8 94       	cli
    3a06:	de bf       	out	0x3e, r29	; 62
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	cd bf       	out	0x3d, r28	; 61
    3a0c:	cf 91       	pop	r28
    3a0e:	df 91       	pop	r29
    3a10:	1f 91       	pop	r17
    3a12:	0f 91       	pop	r16
    3a14:	08 95       	ret

00003a16 <A_DLSS_VoidStep5ErrorMassage>:


void  A_DLSS_VoidStep5ErrorMassage(void)
{
    3a16:	df 93       	push	r29
    3a18:	cf 93       	push	r28
    3a1a:	cd b7       	in	r28, 0x3d	; 61
    3a1c:	de b7       	in	r29, 0x3e	; 62
    3a1e:	2e 97       	sbiw	r28, 0x0e	; 14
    3a20:	0f b6       	in	r0, 0x3f	; 63
    3a22:	f8 94       	cli
    3a24:	de bf       	out	0x3e, r29	; 62
    3a26:	0f be       	out	0x3f, r0	; 63
    3a28:	cd bf       	out	0x3d, r28	; 61
	Timer1_init(&Timer1_configNormalMode);
    3a2a:	80 e9       	ldi	r24, 0x90	; 144
    3a2c:	91 e0       	ldi	r25, 0x01	; 1
    3a2e:	0e 94 34 28 	call	0x5068	; 0x5068 <Timer1_init>
	LCD_clearScreen();
    3a32:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <LCD_clearScreen>
	LCD_displayString("ERROR!!!!!");
    3a36:	84 e6       	ldi	r24, 0x64	; 100
    3a38:	91 e0       	ldi	r25, 0x01	; 1
    3a3a:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
	LCD_moveCursor(1,0);
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	60 e0       	ldi	r22, 0x00	; 0
    3a42:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <LCD_moveCursor>
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	a0 ea       	ldi	r26, 0xA0	; 160
    3a4c:	b1 e4       	ldi	r27, 0x41	; 65
    3a4e:	8b 87       	std	Y+11, r24	; 0x0b
    3a50:	9c 87       	std	Y+12, r25	; 0x0c
    3a52:	ad 87       	std	Y+13, r26	; 0x0d
    3a54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	4a ef       	ldi	r20, 0xFA	; 250
    3a64:	54 e4       	ldi	r21, 0x44	; 68
    3a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	8f 83       	std	Y+7, r24	; 0x07
    3a70:	98 87       	std	Y+8, r25	; 0x08
    3a72:	a9 87       	std	Y+9, r26	; 0x09
    3a74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a76:	6f 81       	ldd	r22, Y+7	; 0x07
    3a78:	78 85       	ldd	r23, Y+8	; 0x08
    3a7a:	89 85       	ldd	r24, Y+9	; 0x09
    3a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	40 e8       	ldi	r20, 0x80	; 128
    3a84:	5f e3       	ldi	r21, 0x3F	; 63
    3a86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a8a:	88 23       	and	r24, r24
    3a8c:	2c f4       	brge	.+10     	; 0x3a98 <A_DLSS_VoidStep5ErrorMassage+0x82>
		__ticks = 1;
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	9e 83       	std	Y+6, r25	; 0x06
    3a94:	8d 83       	std	Y+5, r24	; 0x05
    3a96:	3f c0       	rjmp	.+126    	; 0x3b16 <A_DLSS_VoidStep5ErrorMassage+0x100>
	else if (__tmp > 65535)
    3a98:	6f 81       	ldd	r22, Y+7	; 0x07
    3a9a:	78 85       	ldd	r23, Y+8	; 0x08
    3a9c:	89 85       	ldd	r24, Y+9	; 0x09
    3a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	3f ef       	ldi	r19, 0xFF	; 255
    3aa4:	4f e7       	ldi	r20, 0x7F	; 127
    3aa6:	57 e4       	ldi	r21, 0x47	; 71
    3aa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3aac:	18 16       	cp	r1, r24
    3aae:	4c f5       	brge	.+82     	; 0x3b02 <A_DLSS_VoidStep5ErrorMassage+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	40 e2       	ldi	r20, 0x20	; 32
    3abe:	51 e4       	ldi	r21, 0x41	; 65
    3ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	bc 01       	movw	r22, r24
    3aca:	cd 01       	movw	r24, r26
    3acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	cb 01       	movw	r24, r22
    3ad4:	9e 83       	std	Y+6, r25	; 0x06
    3ad6:	8d 83       	std	Y+5, r24	; 0x05
    3ad8:	0f c0       	rjmp	.+30     	; 0x3af8 <A_DLSS_VoidStep5ErrorMassage+0xe2>
    3ada:	88 ec       	ldi	r24, 0xC8	; 200
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	9c 83       	std	Y+4, r25	; 0x04
    3ae0:	8b 83       	std	Y+3, r24	; 0x03
    3ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae6:	01 97       	sbiw	r24, 0x01	; 1
    3ae8:	f1 f7       	brne	.-4      	; 0x3ae6 <A_DLSS_VoidStep5ErrorMassage+0xd0>
    3aea:	9c 83       	std	Y+4, r25	; 0x04
    3aec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aee:	8d 81       	ldd	r24, Y+5	; 0x05
    3af0:	9e 81       	ldd	r25, Y+6	; 0x06
    3af2:	01 97       	sbiw	r24, 0x01	; 1
    3af4:	9e 83       	std	Y+6, r25	; 0x06
    3af6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af8:	8d 81       	ldd	r24, Y+5	; 0x05
    3afa:	9e 81       	ldd	r25, Y+6	; 0x06
    3afc:	00 97       	sbiw	r24, 0x00	; 0
    3afe:	69 f7       	brne	.-38     	; 0x3ada <A_DLSS_VoidStep5ErrorMassage+0xc4>
    3b00:	14 c0       	rjmp	.+40     	; 0x3b2a <A_DLSS_VoidStep5ErrorMassage+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b02:	6f 81       	ldd	r22, Y+7	; 0x07
    3b04:	78 85       	ldd	r23, Y+8	; 0x08
    3b06:	89 85       	ldd	r24, Y+9	; 0x09
    3b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	cb 01       	movw	r24, r22
    3b12:	9e 83       	std	Y+6, r25	; 0x06
    3b14:	8d 83       	std	Y+5, r24	; 0x05
    3b16:	8d 81       	ldd	r24, Y+5	; 0x05
    3b18:	9e 81       	ldd	r25, Y+6	; 0x06
    3b1a:	9a 83       	std	Y+2, r25	; 0x02
    3b1c:	89 83       	std	Y+1, r24	; 0x01
    3b1e:	89 81       	ldd	r24, Y+1	; 0x01
    3b20:	9a 81       	ldd	r25, Y+2	; 0x02
    3b22:	01 97       	sbiw	r24, 0x01	; 1
    3b24:	f1 f7       	brne	.-4      	; 0x3b22 <A_DLSS_VoidStep5ErrorMassage+0x10c>
    3b26:	9a 83       	std	Y+2, r25	; 0x02
    3b28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_displayString("Wait Minute");
    3b2a:	8f e6       	ldi	r24, 0x6F	; 111
    3b2c:	91 e0       	ldi	r25, 0x01	; 1
    3b2e:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
}
    3b32:	2e 96       	adiw	r28, 0x0e	; 14
    3b34:	0f b6       	in	r0, 0x3f	; 63
    3b36:	f8 94       	cli
    3b38:	de bf       	out	0x3e, r29	; 62
    3b3a:	0f be       	out	0x3f, r0	; 63
    3b3c:	cd bf       	out	0x3d, r28	; 61
    3b3e:	cf 91       	pop	r28
    3b40:	df 91       	pop	r29
    3b42:	08 95       	ret

00003b44 <A_DLSS_VoidGenerateMinute>:
void A_DLSS_VoidGenerateMinute(void)
{
    3b44:	df 93       	push	r29
    3b46:	cf 93       	push	r28
    3b48:	cd b7       	in	r28, 0x3d	; 61
    3b4a:	de b7       	in	r29, 0x3e	; 62
	static uint8 counter =0;
	counter++;
    3b4c:	80 91 98 01 	lds	r24, 0x0198
    3b50:	8f 5f       	subi	r24, 0xFF	; 255
    3b52:	80 93 98 01 	sts	0x0198, r24
	if(counter == 11)//29
    3b56:	80 91 98 01 	lds	r24, 0x0198
    3b5a:	8b 30       	cpi	r24, 0x0B	; 11
    3b5c:	31 f4       	brne	.+12     	; 0x3b6a <A_DLSS_VoidGenerateMinute+0x26>
	{
		/* Clear the number of entered password Wrong */
		g_NumberOfEnterpass=0;
    3b5e:	10 92 97 01 	sts	0x0197, r1
		Timer1_deInit();
    3b62:	0e 94 5d 28 	call	0x50ba	; 0x50ba <Timer1_deInit>
		counter =0;
    3b66:	10 92 98 01 	sts	0x0198, r1
	}
}
    3b6a:	cf 91       	pop	r28
    3b6c:	df 91       	pop	r29
    3b6e:	08 95       	ret

00003b70 <Global_interruptEnable>:
 */
#include <avr/io.h>
#include "common_macros.h"
#include "g_interrupt.h"
void Global_interruptEnable(void)
{
    3b70:	df 93       	push	r29
    3b72:	cf 93       	push	r28
    3b74:	cd b7       	in	r28, 0x3d	; 61
    3b76:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    3b78:	af e5       	ldi	r26, 0x5F	; 95
    3b7a:	b0 e0       	ldi	r27, 0x00	; 0
    3b7c:	ef e5       	ldi	r30, 0x5F	; 95
    3b7e:	f0 e0       	ldi	r31, 0x00	; 0
    3b80:	80 81       	ld	r24, Z
    3b82:	80 68       	ori	r24, 0x80	; 128
    3b84:	8c 93       	st	X, r24
}
    3b86:	cf 91       	pop	r28
    3b88:	df 91       	pop	r29
    3b8a:	08 95       	ret

00003b8c <Global_interruptDisable>:
void Global_interruptDisable(void)
{
    3b8c:	df 93       	push	r29
    3b8e:	cf 93       	push	r28
    3b90:	cd b7       	in	r28, 0x3d	; 61
    3b92:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,7);
    3b94:	af e5       	ldi	r26, 0x5F	; 95
    3b96:	b0 e0       	ldi	r27, 0x00	; 0
    3b98:	ef e5       	ldi	r30, 0x5F	; 95
    3b9a:	f0 e0       	ldi	r31, 0x00	; 0
    3b9c:	80 81       	ld	r24, Z
    3b9e:	8f 77       	andi	r24, 0x7F	; 127
    3ba0:	8c 93       	st	X, r24
}
    3ba2:	cf 91       	pop	r28
    3ba4:	df 91       	pop	r29
    3ba6:	08 95       	ret

00003ba8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    3ba8:	df 93       	push	r29
    3baa:	cf 93       	push	r28
    3bac:	00 d0       	rcall	.+0      	; 0x3bae <GPIO_setupPinDirection+0x6>
    3bae:	00 d0       	rcall	.+0      	; 0x3bb0 <GPIO_setupPinDirection+0x8>
    3bb0:	0f 92       	push	r0
    3bb2:	cd b7       	in	r28, 0x3d	; 61
    3bb4:	de b7       	in	r29, 0x3e	; 62
    3bb6:	89 83       	std	Y+1, r24	; 0x01
    3bb8:	6a 83       	std	Y+2, r22	; 0x02
    3bba:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bbe:	88 30       	cpi	r24, 0x08	; 8
    3bc0:	08 f0       	brcs	.+2      	; 0x3bc4 <GPIO_setupPinDirection+0x1c>
    3bc2:	d5 c0       	rjmp	.+426    	; 0x3d6e <GPIO_setupPinDirection+0x1c6>
    3bc4:	89 81       	ldd	r24, Y+1	; 0x01
    3bc6:	84 30       	cpi	r24, 0x04	; 4
    3bc8:	08 f0       	brcs	.+2      	; 0x3bcc <GPIO_setupPinDirection+0x24>
    3bca:	d1 c0       	rjmp	.+418    	; 0x3d6e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    3bcc:	89 81       	ldd	r24, Y+1	; 0x01
    3bce:	28 2f       	mov	r18, r24
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	3d 83       	std	Y+5, r19	; 0x05
    3bd4:	2c 83       	std	Y+4, r18	; 0x04
    3bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    3bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    3bda:	81 30       	cpi	r24, 0x01	; 1
    3bdc:	91 05       	cpc	r25, r1
    3bde:	09 f4       	brne	.+2      	; 0x3be2 <GPIO_setupPinDirection+0x3a>
    3be0:	43 c0       	rjmp	.+134    	; 0x3c68 <GPIO_setupPinDirection+0xc0>
    3be2:	2c 81       	ldd	r18, Y+4	; 0x04
    3be4:	3d 81       	ldd	r19, Y+5	; 0x05
    3be6:	22 30       	cpi	r18, 0x02	; 2
    3be8:	31 05       	cpc	r19, r1
    3bea:	2c f4       	brge	.+10     	; 0x3bf6 <GPIO_setupPinDirection+0x4e>
    3bec:	8c 81       	ldd	r24, Y+4	; 0x04
    3bee:	9d 81       	ldd	r25, Y+5	; 0x05
    3bf0:	00 97       	sbiw	r24, 0x00	; 0
    3bf2:	71 f0       	breq	.+28     	; 0x3c10 <GPIO_setupPinDirection+0x68>
    3bf4:	bc c0       	rjmp	.+376    	; 0x3d6e <GPIO_setupPinDirection+0x1c6>
    3bf6:	2c 81       	ldd	r18, Y+4	; 0x04
    3bf8:	3d 81       	ldd	r19, Y+5	; 0x05
    3bfa:	22 30       	cpi	r18, 0x02	; 2
    3bfc:	31 05       	cpc	r19, r1
    3bfe:	09 f4       	brne	.+2      	; 0x3c02 <GPIO_setupPinDirection+0x5a>
    3c00:	5f c0       	rjmp	.+190    	; 0x3cc0 <GPIO_setupPinDirection+0x118>
    3c02:	8c 81       	ldd	r24, Y+4	; 0x04
    3c04:	9d 81       	ldd	r25, Y+5	; 0x05
    3c06:	83 30       	cpi	r24, 0x03	; 3
    3c08:	91 05       	cpc	r25, r1
    3c0a:	09 f4       	brne	.+2      	; 0x3c0e <GPIO_setupPinDirection+0x66>
    3c0c:	85 c0       	rjmp	.+266    	; 0x3d18 <GPIO_setupPinDirection+0x170>
    3c0e:	af c0       	rjmp	.+350    	; 0x3d6e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    3c10:	8b 81       	ldd	r24, Y+3	; 0x03
    3c12:	81 30       	cpi	r24, 0x01	; 1
    3c14:	a1 f4       	brne	.+40     	; 0x3c3e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    3c16:	aa e3       	ldi	r26, 0x3A	; 58
    3c18:	b0 e0       	ldi	r27, 0x00	; 0
    3c1a:	ea e3       	ldi	r30, 0x3A	; 58
    3c1c:	f0 e0       	ldi	r31, 0x00	; 0
    3c1e:	80 81       	ld	r24, Z
    3c20:	48 2f       	mov	r20, r24
    3c22:	8a 81       	ldd	r24, Y+2	; 0x02
    3c24:	28 2f       	mov	r18, r24
    3c26:	30 e0       	ldi	r19, 0x00	; 0
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	02 2e       	mov	r0, r18
    3c2e:	02 c0       	rjmp	.+4      	; 0x3c34 <GPIO_setupPinDirection+0x8c>
    3c30:	88 0f       	add	r24, r24
    3c32:	99 1f       	adc	r25, r25
    3c34:	0a 94       	dec	r0
    3c36:	e2 f7       	brpl	.-8      	; 0x3c30 <GPIO_setupPinDirection+0x88>
    3c38:	84 2b       	or	r24, r20
    3c3a:	8c 93       	st	X, r24
    3c3c:	98 c0       	rjmp	.+304    	; 0x3d6e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    3c3e:	aa e3       	ldi	r26, 0x3A	; 58
    3c40:	b0 e0       	ldi	r27, 0x00	; 0
    3c42:	ea e3       	ldi	r30, 0x3A	; 58
    3c44:	f0 e0       	ldi	r31, 0x00	; 0
    3c46:	80 81       	ld	r24, Z
    3c48:	48 2f       	mov	r20, r24
    3c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c4c:	28 2f       	mov	r18, r24
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	81 e0       	ldi	r24, 0x01	; 1
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	02 2e       	mov	r0, r18
    3c56:	02 c0       	rjmp	.+4      	; 0x3c5c <GPIO_setupPinDirection+0xb4>
    3c58:	88 0f       	add	r24, r24
    3c5a:	99 1f       	adc	r25, r25
    3c5c:	0a 94       	dec	r0
    3c5e:	e2 f7       	brpl	.-8      	; 0x3c58 <GPIO_setupPinDirection+0xb0>
    3c60:	80 95       	com	r24
    3c62:	84 23       	and	r24, r20
    3c64:	8c 93       	st	X, r24
    3c66:	83 c0       	rjmp	.+262    	; 0x3d6e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    3c68:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6a:	81 30       	cpi	r24, 0x01	; 1
    3c6c:	a1 f4       	brne	.+40     	; 0x3c96 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    3c6e:	a7 e3       	ldi	r26, 0x37	; 55
    3c70:	b0 e0       	ldi	r27, 0x00	; 0
    3c72:	e7 e3       	ldi	r30, 0x37	; 55
    3c74:	f0 e0       	ldi	r31, 0x00	; 0
    3c76:	80 81       	ld	r24, Z
    3c78:	48 2f       	mov	r20, r24
    3c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7c:	28 2f       	mov	r18, r24
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	02 2e       	mov	r0, r18
    3c86:	02 c0       	rjmp	.+4      	; 0x3c8c <GPIO_setupPinDirection+0xe4>
    3c88:	88 0f       	add	r24, r24
    3c8a:	99 1f       	adc	r25, r25
    3c8c:	0a 94       	dec	r0
    3c8e:	e2 f7       	brpl	.-8      	; 0x3c88 <GPIO_setupPinDirection+0xe0>
    3c90:	84 2b       	or	r24, r20
    3c92:	8c 93       	st	X, r24
    3c94:	6c c0       	rjmp	.+216    	; 0x3d6e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    3c96:	a7 e3       	ldi	r26, 0x37	; 55
    3c98:	b0 e0       	ldi	r27, 0x00	; 0
    3c9a:	e7 e3       	ldi	r30, 0x37	; 55
    3c9c:	f0 e0       	ldi	r31, 0x00	; 0
    3c9e:	80 81       	ld	r24, Z
    3ca0:	48 2f       	mov	r20, r24
    3ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca4:	28 2f       	mov	r18, r24
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	02 2e       	mov	r0, r18
    3cae:	02 c0       	rjmp	.+4      	; 0x3cb4 <GPIO_setupPinDirection+0x10c>
    3cb0:	88 0f       	add	r24, r24
    3cb2:	99 1f       	adc	r25, r25
    3cb4:	0a 94       	dec	r0
    3cb6:	e2 f7       	brpl	.-8      	; 0x3cb0 <GPIO_setupPinDirection+0x108>
    3cb8:	80 95       	com	r24
    3cba:	84 23       	and	r24, r20
    3cbc:	8c 93       	st	X, r24
    3cbe:	57 c0       	rjmp	.+174    	; 0x3d6e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    3cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc2:	81 30       	cpi	r24, 0x01	; 1
    3cc4:	a1 f4       	brne	.+40     	; 0x3cee <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    3cc6:	a4 e3       	ldi	r26, 0x34	; 52
    3cc8:	b0 e0       	ldi	r27, 0x00	; 0
    3cca:	e4 e3       	ldi	r30, 0x34	; 52
    3ccc:	f0 e0       	ldi	r31, 0x00	; 0
    3cce:	80 81       	ld	r24, Z
    3cd0:	48 2f       	mov	r20, r24
    3cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd4:	28 2f       	mov	r18, r24
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	02 2e       	mov	r0, r18
    3cde:	02 c0       	rjmp	.+4      	; 0x3ce4 <GPIO_setupPinDirection+0x13c>
    3ce0:	88 0f       	add	r24, r24
    3ce2:	99 1f       	adc	r25, r25
    3ce4:	0a 94       	dec	r0
    3ce6:	e2 f7       	brpl	.-8      	; 0x3ce0 <GPIO_setupPinDirection+0x138>
    3ce8:	84 2b       	or	r24, r20
    3cea:	8c 93       	st	X, r24
    3cec:	40 c0       	rjmp	.+128    	; 0x3d6e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    3cee:	a4 e3       	ldi	r26, 0x34	; 52
    3cf0:	b0 e0       	ldi	r27, 0x00	; 0
    3cf2:	e4 e3       	ldi	r30, 0x34	; 52
    3cf4:	f0 e0       	ldi	r31, 0x00	; 0
    3cf6:	80 81       	ld	r24, Z
    3cf8:	48 2f       	mov	r20, r24
    3cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfc:	28 2f       	mov	r18, r24
    3cfe:	30 e0       	ldi	r19, 0x00	; 0
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	02 2e       	mov	r0, r18
    3d06:	02 c0       	rjmp	.+4      	; 0x3d0c <GPIO_setupPinDirection+0x164>
    3d08:	88 0f       	add	r24, r24
    3d0a:	99 1f       	adc	r25, r25
    3d0c:	0a 94       	dec	r0
    3d0e:	e2 f7       	brpl	.-8      	; 0x3d08 <GPIO_setupPinDirection+0x160>
    3d10:	80 95       	com	r24
    3d12:	84 23       	and	r24, r20
    3d14:	8c 93       	st	X, r24
    3d16:	2b c0       	rjmp	.+86     	; 0x3d6e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    3d18:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1a:	81 30       	cpi	r24, 0x01	; 1
    3d1c:	a1 f4       	brne	.+40     	; 0x3d46 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    3d1e:	a1 e3       	ldi	r26, 0x31	; 49
    3d20:	b0 e0       	ldi	r27, 0x00	; 0
    3d22:	e1 e3       	ldi	r30, 0x31	; 49
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	80 81       	ld	r24, Z
    3d28:	48 2f       	mov	r20, r24
    3d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2c:	28 2f       	mov	r18, r24
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	02 2e       	mov	r0, r18
    3d36:	02 c0       	rjmp	.+4      	; 0x3d3c <GPIO_setupPinDirection+0x194>
    3d38:	88 0f       	add	r24, r24
    3d3a:	99 1f       	adc	r25, r25
    3d3c:	0a 94       	dec	r0
    3d3e:	e2 f7       	brpl	.-8      	; 0x3d38 <GPIO_setupPinDirection+0x190>
    3d40:	84 2b       	or	r24, r20
    3d42:	8c 93       	st	X, r24
    3d44:	14 c0       	rjmp	.+40     	; 0x3d6e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    3d46:	a1 e3       	ldi	r26, 0x31	; 49
    3d48:	b0 e0       	ldi	r27, 0x00	; 0
    3d4a:	e1 e3       	ldi	r30, 0x31	; 49
    3d4c:	f0 e0       	ldi	r31, 0x00	; 0
    3d4e:	80 81       	ld	r24, Z
    3d50:	48 2f       	mov	r20, r24
    3d52:	8a 81       	ldd	r24, Y+2	; 0x02
    3d54:	28 2f       	mov	r18, r24
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	81 e0       	ldi	r24, 0x01	; 1
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	02 2e       	mov	r0, r18
    3d5e:	02 c0       	rjmp	.+4      	; 0x3d64 <GPIO_setupPinDirection+0x1bc>
    3d60:	88 0f       	add	r24, r24
    3d62:	99 1f       	adc	r25, r25
    3d64:	0a 94       	dec	r0
    3d66:	e2 f7       	brpl	.-8      	; 0x3d60 <GPIO_setupPinDirection+0x1b8>
    3d68:	80 95       	com	r24
    3d6a:	84 23       	and	r24, r20
    3d6c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    3d6e:	0f 90       	pop	r0
    3d70:	0f 90       	pop	r0
    3d72:	0f 90       	pop	r0
    3d74:	0f 90       	pop	r0
    3d76:	0f 90       	pop	r0
    3d78:	cf 91       	pop	r28
    3d7a:	df 91       	pop	r29
    3d7c:	08 95       	ret

00003d7e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    3d7e:	df 93       	push	r29
    3d80:	cf 93       	push	r28
    3d82:	00 d0       	rcall	.+0      	; 0x3d84 <GPIO_writePin+0x6>
    3d84:	00 d0       	rcall	.+0      	; 0x3d86 <GPIO_writePin+0x8>
    3d86:	0f 92       	push	r0
    3d88:	cd b7       	in	r28, 0x3d	; 61
    3d8a:	de b7       	in	r29, 0x3e	; 62
    3d8c:	89 83       	std	Y+1, r24	; 0x01
    3d8e:	6a 83       	std	Y+2, r22	; 0x02
    3d90:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3d92:	8a 81       	ldd	r24, Y+2	; 0x02
    3d94:	88 30       	cpi	r24, 0x08	; 8
    3d96:	08 f0       	brcs	.+2      	; 0x3d9a <GPIO_writePin+0x1c>
    3d98:	d5 c0       	rjmp	.+426    	; 0x3f44 <GPIO_writePin+0x1c6>
    3d9a:	89 81       	ldd	r24, Y+1	; 0x01
    3d9c:	84 30       	cpi	r24, 0x04	; 4
    3d9e:	08 f0       	brcs	.+2      	; 0x3da2 <GPIO_writePin+0x24>
    3da0:	d1 c0       	rjmp	.+418    	; 0x3f44 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    3da2:	89 81       	ldd	r24, Y+1	; 0x01
    3da4:	28 2f       	mov	r18, r24
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	3d 83       	std	Y+5, r19	; 0x05
    3daa:	2c 83       	std	Y+4, r18	; 0x04
    3dac:	8c 81       	ldd	r24, Y+4	; 0x04
    3dae:	9d 81       	ldd	r25, Y+5	; 0x05
    3db0:	81 30       	cpi	r24, 0x01	; 1
    3db2:	91 05       	cpc	r25, r1
    3db4:	09 f4       	brne	.+2      	; 0x3db8 <GPIO_writePin+0x3a>
    3db6:	43 c0       	rjmp	.+134    	; 0x3e3e <GPIO_writePin+0xc0>
    3db8:	2c 81       	ldd	r18, Y+4	; 0x04
    3dba:	3d 81       	ldd	r19, Y+5	; 0x05
    3dbc:	22 30       	cpi	r18, 0x02	; 2
    3dbe:	31 05       	cpc	r19, r1
    3dc0:	2c f4       	brge	.+10     	; 0x3dcc <GPIO_writePin+0x4e>
    3dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc4:	9d 81       	ldd	r25, Y+5	; 0x05
    3dc6:	00 97       	sbiw	r24, 0x00	; 0
    3dc8:	71 f0       	breq	.+28     	; 0x3de6 <GPIO_writePin+0x68>
    3dca:	bc c0       	rjmp	.+376    	; 0x3f44 <GPIO_writePin+0x1c6>
    3dcc:	2c 81       	ldd	r18, Y+4	; 0x04
    3dce:	3d 81       	ldd	r19, Y+5	; 0x05
    3dd0:	22 30       	cpi	r18, 0x02	; 2
    3dd2:	31 05       	cpc	r19, r1
    3dd4:	09 f4       	brne	.+2      	; 0x3dd8 <GPIO_writePin+0x5a>
    3dd6:	5f c0       	rjmp	.+190    	; 0x3e96 <GPIO_writePin+0x118>
    3dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    3dda:	9d 81       	ldd	r25, Y+5	; 0x05
    3ddc:	83 30       	cpi	r24, 0x03	; 3
    3dde:	91 05       	cpc	r25, r1
    3de0:	09 f4       	brne	.+2      	; 0x3de4 <GPIO_writePin+0x66>
    3de2:	85 c0       	rjmp	.+266    	; 0x3eee <GPIO_writePin+0x170>
    3de4:	af c0       	rjmp	.+350    	; 0x3f44 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    3de6:	8b 81       	ldd	r24, Y+3	; 0x03
    3de8:	81 30       	cpi	r24, 0x01	; 1
    3dea:	a1 f4       	brne	.+40     	; 0x3e14 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    3dec:	ab e3       	ldi	r26, 0x3B	; 59
    3dee:	b0 e0       	ldi	r27, 0x00	; 0
    3df0:	eb e3       	ldi	r30, 0x3B	; 59
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	80 81       	ld	r24, Z
    3df6:	48 2f       	mov	r20, r24
    3df8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfa:	28 2f       	mov	r18, r24
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	02 2e       	mov	r0, r18
    3e04:	02 c0       	rjmp	.+4      	; 0x3e0a <GPIO_writePin+0x8c>
    3e06:	88 0f       	add	r24, r24
    3e08:	99 1f       	adc	r25, r25
    3e0a:	0a 94       	dec	r0
    3e0c:	e2 f7       	brpl	.-8      	; 0x3e06 <GPIO_writePin+0x88>
    3e0e:	84 2b       	or	r24, r20
    3e10:	8c 93       	st	X, r24
    3e12:	98 c0       	rjmp	.+304    	; 0x3f44 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    3e14:	ab e3       	ldi	r26, 0x3B	; 59
    3e16:	b0 e0       	ldi	r27, 0x00	; 0
    3e18:	eb e3       	ldi	r30, 0x3B	; 59
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	80 81       	ld	r24, Z
    3e1e:	48 2f       	mov	r20, r24
    3e20:	8a 81       	ldd	r24, Y+2	; 0x02
    3e22:	28 2f       	mov	r18, r24
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	02 2e       	mov	r0, r18
    3e2c:	02 c0       	rjmp	.+4      	; 0x3e32 <GPIO_writePin+0xb4>
    3e2e:	88 0f       	add	r24, r24
    3e30:	99 1f       	adc	r25, r25
    3e32:	0a 94       	dec	r0
    3e34:	e2 f7       	brpl	.-8      	; 0x3e2e <GPIO_writePin+0xb0>
    3e36:	80 95       	com	r24
    3e38:	84 23       	and	r24, r20
    3e3a:	8c 93       	st	X, r24
    3e3c:	83 c0       	rjmp	.+262    	; 0x3f44 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    3e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e40:	81 30       	cpi	r24, 0x01	; 1
    3e42:	a1 f4       	brne	.+40     	; 0x3e6c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    3e44:	a8 e3       	ldi	r26, 0x38	; 56
    3e46:	b0 e0       	ldi	r27, 0x00	; 0
    3e48:	e8 e3       	ldi	r30, 0x38	; 56
    3e4a:	f0 e0       	ldi	r31, 0x00	; 0
    3e4c:	80 81       	ld	r24, Z
    3e4e:	48 2f       	mov	r20, r24
    3e50:	8a 81       	ldd	r24, Y+2	; 0x02
    3e52:	28 2f       	mov	r18, r24
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	02 2e       	mov	r0, r18
    3e5c:	02 c0       	rjmp	.+4      	; 0x3e62 <GPIO_writePin+0xe4>
    3e5e:	88 0f       	add	r24, r24
    3e60:	99 1f       	adc	r25, r25
    3e62:	0a 94       	dec	r0
    3e64:	e2 f7       	brpl	.-8      	; 0x3e5e <GPIO_writePin+0xe0>
    3e66:	84 2b       	or	r24, r20
    3e68:	8c 93       	st	X, r24
    3e6a:	6c c0       	rjmp	.+216    	; 0x3f44 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    3e6c:	a8 e3       	ldi	r26, 0x38	; 56
    3e6e:	b0 e0       	ldi	r27, 0x00	; 0
    3e70:	e8 e3       	ldi	r30, 0x38	; 56
    3e72:	f0 e0       	ldi	r31, 0x00	; 0
    3e74:	80 81       	ld	r24, Z
    3e76:	48 2f       	mov	r20, r24
    3e78:	8a 81       	ldd	r24, Y+2	; 0x02
    3e7a:	28 2f       	mov	r18, r24
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	02 2e       	mov	r0, r18
    3e84:	02 c0       	rjmp	.+4      	; 0x3e8a <GPIO_writePin+0x10c>
    3e86:	88 0f       	add	r24, r24
    3e88:	99 1f       	adc	r25, r25
    3e8a:	0a 94       	dec	r0
    3e8c:	e2 f7       	brpl	.-8      	; 0x3e86 <GPIO_writePin+0x108>
    3e8e:	80 95       	com	r24
    3e90:	84 23       	and	r24, r20
    3e92:	8c 93       	st	X, r24
    3e94:	57 c0       	rjmp	.+174    	; 0x3f44 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    3e96:	8b 81       	ldd	r24, Y+3	; 0x03
    3e98:	81 30       	cpi	r24, 0x01	; 1
    3e9a:	a1 f4       	brne	.+40     	; 0x3ec4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    3e9c:	a5 e3       	ldi	r26, 0x35	; 53
    3e9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ea0:	e5 e3       	ldi	r30, 0x35	; 53
    3ea2:	f0 e0       	ldi	r31, 0x00	; 0
    3ea4:	80 81       	ld	r24, Z
    3ea6:	48 2f       	mov	r20, r24
    3ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eaa:	28 2f       	mov	r18, r24
    3eac:	30 e0       	ldi	r19, 0x00	; 0
    3eae:	81 e0       	ldi	r24, 0x01	; 1
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	02 2e       	mov	r0, r18
    3eb4:	02 c0       	rjmp	.+4      	; 0x3eba <GPIO_writePin+0x13c>
    3eb6:	88 0f       	add	r24, r24
    3eb8:	99 1f       	adc	r25, r25
    3eba:	0a 94       	dec	r0
    3ebc:	e2 f7       	brpl	.-8      	; 0x3eb6 <GPIO_writePin+0x138>
    3ebe:	84 2b       	or	r24, r20
    3ec0:	8c 93       	st	X, r24
    3ec2:	40 c0       	rjmp	.+128    	; 0x3f44 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    3ec4:	a5 e3       	ldi	r26, 0x35	; 53
    3ec6:	b0 e0       	ldi	r27, 0x00	; 0
    3ec8:	e5 e3       	ldi	r30, 0x35	; 53
    3eca:	f0 e0       	ldi	r31, 0x00	; 0
    3ecc:	80 81       	ld	r24, Z
    3ece:	48 2f       	mov	r20, r24
    3ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed2:	28 2f       	mov	r18, r24
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	02 2e       	mov	r0, r18
    3edc:	02 c0       	rjmp	.+4      	; 0x3ee2 <GPIO_writePin+0x164>
    3ede:	88 0f       	add	r24, r24
    3ee0:	99 1f       	adc	r25, r25
    3ee2:	0a 94       	dec	r0
    3ee4:	e2 f7       	brpl	.-8      	; 0x3ede <GPIO_writePin+0x160>
    3ee6:	80 95       	com	r24
    3ee8:	84 23       	and	r24, r20
    3eea:	8c 93       	st	X, r24
    3eec:	2b c0       	rjmp	.+86     	; 0x3f44 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    3eee:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef0:	81 30       	cpi	r24, 0x01	; 1
    3ef2:	a1 f4       	brne	.+40     	; 0x3f1c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    3ef4:	a2 e3       	ldi	r26, 0x32	; 50
    3ef6:	b0 e0       	ldi	r27, 0x00	; 0
    3ef8:	e2 e3       	ldi	r30, 0x32	; 50
    3efa:	f0 e0       	ldi	r31, 0x00	; 0
    3efc:	80 81       	ld	r24, Z
    3efe:	48 2f       	mov	r20, r24
    3f00:	8a 81       	ldd	r24, Y+2	; 0x02
    3f02:	28 2f       	mov	r18, r24
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	02 2e       	mov	r0, r18
    3f0c:	02 c0       	rjmp	.+4      	; 0x3f12 <GPIO_writePin+0x194>
    3f0e:	88 0f       	add	r24, r24
    3f10:	99 1f       	adc	r25, r25
    3f12:	0a 94       	dec	r0
    3f14:	e2 f7       	brpl	.-8      	; 0x3f0e <GPIO_writePin+0x190>
    3f16:	84 2b       	or	r24, r20
    3f18:	8c 93       	st	X, r24
    3f1a:	14 c0       	rjmp	.+40     	; 0x3f44 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    3f1c:	a2 e3       	ldi	r26, 0x32	; 50
    3f1e:	b0 e0       	ldi	r27, 0x00	; 0
    3f20:	e2 e3       	ldi	r30, 0x32	; 50
    3f22:	f0 e0       	ldi	r31, 0x00	; 0
    3f24:	80 81       	ld	r24, Z
    3f26:	48 2f       	mov	r20, r24
    3f28:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2a:	28 2f       	mov	r18, r24
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	02 2e       	mov	r0, r18
    3f34:	02 c0       	rjmp	.+4      	; 0x3f3a <GPIO_writePin+0x1bc>
    3f36:	88 0f       	add	r24, r24
    3f38:	99 1f       	adc	r25, r25
    3f3a:	0a 94       	dec	r0
    3f3c:	e2 f7       	brpl	.-8      	; 0x3f36 <GPIO_writePin+0x1b8>
    3f3e:	80 95       	com	r24
    3f40:	84 23       	and	r24, r20
    3f42:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    3f44:	0f 90       	pop	r0
    3f46:	0f 90       	pop	r0
    3f48:	0f 90       	pop	r0
    3f4a:	0f 90       	pop	r0
    3f4c:	0f 90       	pop	r0
    3f4e:	cf 91       	pop	r28
    3f50:	df 91       	pop	r29
    3f52:	08 95       	ret

00003f54 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    3f54:	df 93       	push	r29
    3f56:	cf 93       	push	r28
    3f58:	00 d0       	rcall	.+0      	; 0x3f5a <GPIO_readPin+0x6>
    3f5a:	00 d0       	rcall	.+0      	; 0x3f5c <GPIO_readPin+0x8>
    3f5c:	0f 92       	push	r0
    3f5e:	cd b7       	in	r28, 0x3d	; 61
    3f60:	de b7       	in	r29, 0x3e	; 62
    3f62:	8a 83       	std	Y+2, r24	; 0x02
    3f64:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    3f66:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3f68:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6a:	88 30       	cpi	r24, 0x08	; 8
    3f6c:	08 f0       	brcs	.+2      	; 0x3f70 <GPIO_readPin+0x1c>
    3f6e:	84 c0       	rjmp	.+264    	; 0x4078 <GPIO_readPin+0x124>
    3f70:	8a 81       	ldd	r24, Y+2	; 0x02
    3f72:	84 30       	cpi	r24, 0x04	; 4
    3f74:	08 f0       	brcs	.+2      	; 0x3f78 <GPIO_readPin+0x24>
    3f76:	80 c0       	rjmp	.+256    	; 0x4078 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    3f78:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7a:	28 2f       	mov	r18, r24
    3f7c:	30 e0       	ldi	r19, 0x00	; 0
    3f7e:	3d 83       	std	Y+5, r19	; 0x05
    3f80:	2c 83       	std	Y+4, r18	; 0x04
    3f82:	4c 81       	ldd	r20, Y+4	; 0x04
    3f84:	5d 81       	ldd	r21, Y+5	; 0x05
    3f86:	41 30       	cpi	r20, 0x01	; 1
    3f88:	51 05       	cpc	r21, r1
    3f8a:	79 f1       	breq	.+94     	; 0x3fea <GPIO_readPin+0x96>
    3f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3f90:	82 30       	cpi	r24, 0x02	; 2
    3f92:	91 05       	cpc	r25, r1
    3f94:	34 f4       	brge	.+12     	; 0x3fa2 <GPIO_readPin+0x4e>
    3f96:	2c 81       	ldd	r18, Y+4	; 0x04
    3f98:	3d 81       	ldd	r19, Y+5	; 0x05
    3f9a:	21 15       	cp	r18, r1
    3f9c:	31 05       	cpc	r19, r1
    3f9e:	69 f0       	breq	.+26     	; 0x3fba <GPIO_readPin+0x66>
    3fa0:	6b c0       	rjmp	.+214    	; 0x4078 <GPIO_readPin+0x124>
    3fa2:	4c 81       	ldd	r20, Y+4	; 0x04
    3fa4:	5d 81       	ldd	r21, Y+5	; 0x05
    3fa6:	42 30       	cpi	r20, 0x02	; 2
    3fa8:	51 05       	cpc	r21, r1
    3faa:	b9 f1       	breq	.+110    	; 0x401a <GPIO_readPin+0xc6>
    3fac:	8c 81       	ldd	r24, Y+4	; 0x04
    3fae:	9d 81       	ldd	r25, Y+5	; 0x05
    3fb0:	83 30       	cpi	r24, 0x03	; 3
    3fb2:	91 05       	cpc	r25, r1
    3fb4:	09 f4       	brne	.+2      	; 0x3fb8 <GPIO_readPin+0x64>
    3fb6:	49 c0       	rjmp	.+146    	; 0x404a <GPIO_readPin+0xf6>
    3fb8:	5f c0       	rjmp	.+190    	; 0x4078 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    3fba:	e9 e3       	ldi	r30, 0x39	; 57
    3fbc:	f0 e0       	ldi	r31, 0x00	; 0
    3fbe:	80 81       	ld	r24, Z
    3fc0:	28 2f       	mov	r18, r24
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc6:	88 2f       	mov	r24, r24
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	a9 01       	movw	r20, r18
    3fcc:	02 c0       	rjmp	.+4      	; 0x3fd2 <GPIO_readPin+0x7e>
    3fce:	55 95       	asr	r21
    3fd0:	47 95       	ror	r20
    3fd2:	8a 95       	dec	r24
    3fd4:	e2 f7       	brpl	.-8      	; 0x3fce <GPIO_readPin+0x7a>
    3fd6:	ca 01       	movw	r24, r20
    3fd8:	81 70       	andi	r24, 0x01	; 1
    3fda:	90 70       	andi	r25, 0x00	; 0
    3fdc:	88 23       	and	r24, r24
    3fde:	19 f0       	breq	.+6      	; 0x3fe6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	89 83       	std	Y+1, r24	; 0x01
    3fe4:	49 c0       	rjmp	.+146    	; 0x4078 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    3fe6:	19 82       	std	Y+1, r1	; 0x01
    3fe8:	47 c0       	rjmp	.+142    	; 0x4078 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    3fea:	e6 e3       	ldi	r30, 0x36	; 54
    3fec:	f0 e0       	ldi	r31, 0x00	; 0
    3fee:	80 81       	ld	r24, Z
    3ff0:	28 2f       	mov	r18, r24
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff6:	88 2f       	mov	r24, r24
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	a9 01       	movw	r20, r18
    3ffc:	02 c0       	rjmp	.+4      	; 0x4002 <GPIO_readPin+0xae>
    3ffe:	55 95       	asr	r21
    4000:	47 95       	ror	r20
    4002:	8a 95       	dec	r24
    4004:	e2 f7       	brpl	.-8      	; 0x3ffe <GPIO_readPin+0xaa>
    4006:	ca 01       	movw	r24, r20
    4008:	81 70       	andi	r24, 0x01	; 1
    400a:	90 70       	andi	r25, 0x00	; 0
    400c:	88 23       	and	r24, r24
    400e:	19 f0       	breq	.+6      	; 0x4016 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	89 83       	std	Y+1, r24	; 0x01
    4014:	31 c0       	rjmp	.+98     	; 0x4078 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    4016:	19 82       	std	Y+1, r1	; 0x01
    4018:	2f c0       	rjmp	.+94     	; 0x4078 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    401a:	e3 e3       	ldi	r30, 0x33	; 51
    401c:	f0 e0       	ldi	r31, 0x00	; 0
    401e:	80 81       	ld	r24, Z
    4020:	28 2f       	mov	r18, r24
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	8b 81       	ldd	r24, Y+3	; 0x03
    4026:	88 2f       	mov	r24, r24
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	a9 01       	movw	r20, r18
    402c:	02 c0       	rjmp	.+4      	; 0x4032 <GPIO_readPin+0xde>
    402e:	55 95       	asr	r21
    4030:	47 95       	ror	r20
    4032:	8a 95       	dec	r24
    4034:	e2 f7       	brpl	.-8      	; 0x402e <GPIO_readPin+0xda>
    4036:	ca 01       	movw	r24, r20
    4038:	81 70       	andi	r24, 0x01	; 1
    403a:	90 70       	andi	r25, 0x00	; 0
    403c:	88 23       	and	r24, r24
    403e:	19 f0       	breq	.+6      	; 0x4046 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    4040:	81 e0       	ldi	r24, 0x01	; 1
    4042:	89 83       	std	Y+1, r24	; 0x01
    4044:	19 c0       	rjmp	.+50     	; 0x4078 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    4046:	19 82       	std	Y+1, r1	; 0x01
    4048:	17 c0       	rjmp	.+46     	; 0x4078 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    404a:	e0 e3       	ldi	r30, 0x30	; 48
    404c:	f0 e0       	ldi	r31, 0x00	; 0
    404e:	80 81       	ld	r24, Z
    4050:	28 2f       	mov	r18, r24
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	8b 81       	ldd	r24, Y+3	; 0x03
    4056:	88 2f       	mov	r24, r24
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	a9 01       	movw	r20, r18
    405c:	02 c0       	rjmp	.+4      	; 0x4062 <GPIO_readPin+0x10e>
    405e:	55 95       	asr	r21
    4060:	47 95       	ror	r20
    4062:	8a 95       	dec	r24
    4064:	e2 f7       	brpl	.-8      	; 0x405e <GPIO_readPin+0x10a>
    4066:	ca 01       	movw	r24, r20
    4068:	81 70       	andi	r24, 0x01	; 1
    406a:	90 70       	andi	r25, 0x00	; 0
    406c:	88 23       	and	r24, r24
    406e:	19 f0       	breq	.+6      	; 0x4076 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	89 83       	std	Y+1, r24	; 0x01
    4074:	01 c0       	rjmp	.+2      	; 0x4078 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    4076:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    4078:	89 81       	ldd	r24, Y+1	; 0x01
}
    407a:	0f 90       	pop	r0
    407c:	0f 90       	pop	r0
    407e:	0f 90       	pop	r0
    4080:	0f 90       	pop	r0
    4082:	0f 90       	pop	r0
    4084:	cf 91       	pop	r28
    4086:	df 91       	pop	r29
    4088:	08 95       	ret

0000408a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    408a:	df 93       	push	r29
    408c:	cf 93       	push	r28
    408e:	00 d0       	rcall	.+0      	; 0x4090 <GPIO_setupPortDirection+0x6>
    4090:	00 d0       	rcall	.+0      	; 0x4092 <GPIO_setupPortDirection+0x8>
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
    4096:	89 83       	std	Y+1, r24	; 0x01
    4098:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    409a:	89 81       	ldd	r24, Y+1	; 0x01
    409c:	84 30       	cpi	r24, 0x04	; 4
    409e:	90 f5       	brcc	.+100    	; 0x4104 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    40a0:	89 81       	ldd	r24, Y+1	; 0x01
    40a2:	28 2f       	mov	r18, r24
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	3c 83       	std	Y+4, r19	; 0x04
    40a8:	2b 83       	std	Y+3, r18	; 0x03
    40aa:	8b 81       	ldd	r24, Y+3	; 0x03
    40ac:	9c 81       	ldd	r25, Y+4	; 0x04
    40ae:	81 30       	cpi	r24, 0x01	; 1
    40b0:	91 05       	cpc	r25, r1
    40b2:	d1 f0       	breq	.+52     	; 0x40e8 <GPIO_setupPortDirection+0x5e>
    40b4:	2b 81       	ldd	r18, Y+3	; 0x03
    40b6:	3c 81       	ldd	r19, Y+4	; 0x04
    40b8:	22 30       	cpi	r18, 0x02	; 2
    40ba:	31 05       	cpc	r19, r1
    40bc:	2c f4       	brge	.+10     	; 0x40c8 <GPIO_setupPortDirection+0x3e>
    40be:	8b 81       	ldd	r24, Y+3	; 0x03
    40c0:	9c 81       	ldd	r25, Y+4	; 0x04
    40c2:	00 97       	sbiw	r24, 0x00	; 0
    40c4:	61 f0       	breq	.+24     	; 0x40de <GPIO_setupPortDirection+0x54>
    40c6:	1e c0       	rjmp	.+60     	; 0x4104 <GPIO_setupPortDirection+0x7a>
    40c8:	2b 81       	ldd	r18, Y+3	; 0x03
    40ca:	3c 81       	ldd	r19, Y+4	; 0x04
    40cc:	22 30       	cpi	r18, 0x02	; 2
    40ce:	31 05       	cpc	r19, r1
    40d0:	81 f0       	breq	.+32     	; 0x40f2 <GPIO_setupPortDirection+0x68>
    40d2:	8b 81       	ldd	r24, Y+3	; 0x03
    40d4:	9c 81       	ldd	r25, Y+4	; 0x04
    40d6:	83 30       	cpi	r24, 0x03	; 3
    40d8:	91 05       	cpc	r25, r1
    40da:	81 f0       	breq	.+32     	; 0x40fc <GPIO_setupPortDirection+0x72>
    40dc:	13 c0       	rjmp	.+38     	; 0x4104 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    40de:	ea e3       	ldi	r30, 0x3A	; 58
    40e0:	f0 e0       	ldi	r31, 0x00	; 0
    40e2:	8a 81       	ldd	r24, Y+2	; 0x02
    40e4:	80 83       	st	Z, r24
    40e6:	0e c0       	rjmp	.+28     	; 0x4104 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    40e8:	e7 e3       	ldi	r30, 0x37	; 55
    40ea:	f0 e0       	ldi	r31, 0x00	; 0
    40ec:	8a 81       	ldd	r24, Y+2	; 0x02
    40ee:	80 83       	st	Z, r24
    40f0:	09 c0       	rjmp	.+18     	; 0x4104 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    40f2:	e4 e3       	ldi	r30, 0x34	; 52
    40f4:	f0 e0       	ldi	r31, 0x00	; 0
    40f6:	8a 81       	ldd	r24, Y+2	; 0x02
    40f8:	80 83       	st	Z, r24
    40fa:	04 c0       	rjmp	.+8      	; 0x4104 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    40fc:	e1 e3       	ldi	r30, 0x31	; 49
    40fe:	f0 e0       	ldi	r31, 0x00	; 0
    4100:	8a 81       	ldd	r24, Y+2	; 0x02
    4102:	80 83       	st	Z, r24
			break;
		}
	}
}
    4104:	0f 90       	pop	r0
    4106:	0f 90       	pop	r0
    4108:	0f 90       	pop	r0
    410a:	0f 90       	pop	r0
    410c:	cf 91       	pop	r28
    410e:	df 91       	pop	r29
    4110:	08 95       	ret

00004112 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    4112:	df 93       	push	r29
    4114:	cf 93       	push	r28
    4116:	00 d0       	rcall	.+0      	; 0x4118 <GPIO_writePort+0x6>
    4118:	00 d0       	rcall	.+0      	; 0x411a <GPIO_writePort+0x8>
    411a:	cd b7       	in	r28, 0x3d	; 61
    411c:	de b7       	in	r29, 0x3e	; 62
    411e:	89 83       	std	Y+1, r24	; 0x01
    4120:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    4122:	89 81       	ldd	r24, Y+1	; 0x01
    4124:	84 30       	cpi	r24, 0x04	; 4
    4126:	90 f5       	brcc	.+100    	; 0x418c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    4128:	89 81       	ldd	r24, Y+1	; 0x01
    412a:	28 2f       	mov	r18, r24
    412c:	30 e0       	ldi	r19, 0x00	; 0
    412e:	3c 83       	std	Y+4, r19	; 0x04
    4130:	2b 83       	std	Y+3, r18	; 0x03
    4132:	8b 81       	ldd	r24, Y+3	; 0x03
    4134:	9c 81       	ldd	r25, Y+4	; 0x04
    4136:	81 30       	cpi	r24, 0x01	; 1
    4138:	91 05       	cpc	r25, r1
    413a:	d1 f0       	breq	.+52     	; 0x4170 <GPIO_writePort+0x5e>
    413c:	2b 81       	ldd	r18, Y+3	; 0x03
    413e:	3c 81       	ldd	r19, Y+4	; 0x04
    4140:	22 30       	cpi	r18, 0x02	; 2
    4142:	31 05       	cpc	r19, r1
    4144:	2c f4       	brge	.+10     	; 0x4150 <GPIO_writePort+0x3e>
    4146:	8b 81       	ldd	r24, Y+3	; 0x03
    4148:	9c 81       	ldd	r25, Y+4	; 0x04
    414a:	00 97       	sbiw	r24, 0x00	; 0
    414c:	61 f0       	breq	.+24     	; 0x4166 <GPIO_writePort+0x54>
    414e:	1e c0       	rjmp	.+60     	; 0x418c <GPIO_writePort+0x7a>
    4150:	2b 81       	ldd	r18, Y+3	; 0x03
    4152:	3c 81       	ldd	r19, Y+4	; 0x04
    4154:	22 30       	cpi	r18, 0x02	; 2
    4156:	31 05       	cpc	r19, r1
    4158:	81 f0       	breq	.+32     	; 0x417a <GPIO_writePort+0x68>
    415a:	8b 81       	ldd	r24, Y+3	; 0x03
    415c:	9c 81       	ldd	r25, Y+4	; 0x04
    415e:	83 30       	cpi	r24, 0x03	; 3
    4160:	91 05       	cpc	r25, r1
    4162:	81 f0       	breq	.+32     	; 0x4184 <GPIO_writePort+0x72>
    4164:	13 c0       	rjmp	.+38     	; 0x418c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    4166:	eb e3       	ldi	r30, 0x3B	; 59
    4168:	f0 e0       	ldi	r31, 0x00	; 0
    416a:	8a 81       	ldd	r24, Y+2	; 0x02
    416c:	80 83       	st	Z, r24
    416e:	0e c0       	rjmp	.+28     	; 0x418c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    4170:	e8 e3       	ldi	r30, 0x38	; 56
    4172:	f0 e0       	ldi	r31, 0x00	; 0
    4174:	8a 81       	ldd	r24, Y+2	; 0x02
    4176:	80 83       	st	Z, r24
    4178:	09 c0       	rjmp	.+18     	; 0x418c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    417a:	e5 e3       	ldi	r30, 0x35	; 53
    417c:	f0 e0       	ldi	r31, 0x00	; 0
    417e:	8a 81       	ldd	r24, Y+2	; 0x02
    4180:	80 83       	st	Z, r24
    4182:	04 c0       	rjmp	.+8      	; 0x418c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    4184:	e2 e3       	ldi	r30, 0x32	; 50
    4186:	f0 e0       	ldi	r31, 0x00	; 0
    4188:	8a 81       	ldd	r24, Y+2	; 0x02
    418a:	80 83       	st	Z, r24
			break;
		}
	}
}
    418c:	0f 90       	pop	r0
    418e:	0f 90       	pop	r0
    4190:	0f 90       	pop	r0
    4192:	0f 90       	pop	r0
    4194:	cf 91       	pop	r28
    4196:	df 91       	pop	r29
    4198:	08 95       	ret

0000419a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    419a:	df 93       	push	r29
    419c:	cf 93       	push	r28
    419e:	00 d0       	rcall	.+0      	; 0x41a0 <GPIO_readPort+0x6>
    41a0:	00 d0       	rcall	.+0      	; 0x41a2 <GPIO_readPort+0x8>
    41a2:	cd b7       	in	r28, 0x3d	; 61
    41a4:	de b7       	in	r29, 0x3e	; 62
    41a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    41a8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    41aa:	8a 81       	ldd	r24, Y+2	; 0x02
    41ac:	84 30       	cpi	r24, 0x04	; 4
    41ae:	90 f5       	brcc	.+100    	; 0x4214 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    41b0:	8a 81       	ldd	r24, Y+2	; 0x02
    41b2:	28 2f       	mov	r18, r24
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	3c 83       	std	Y+4, r19	; 0x04
    41b8:	2b 83       	std	Y+3, r18	; 0x03
    41ba:	8b 81       	ldd	r24, Y+3	; 0x03
    41bc:	9c 81       	ldd	r25, Y+4	; 0x04
    41be:	81 30       	cpi	r24, 0x01	; 1
    41c0:	91 05       	cpc	r25, r1
    41c2:	d1 f0       	breq	.+52     	; 0x41f8 <GPIO_readPort+0x5e>
    41c4:	2b 81       	ldd	r18, Y+3	; 0x03
    41c6:	3c 81       	ldd	r19, Y+4	; 0x04
    41c8:	22 30       	cpi	r18, 0x02	; 2
    41ca:	31 05       	cpc	r19, r1
    41cc:	2c f4       	brge	.+10     	; 0x41d8 <GPIO_readPort+0x3e>
    41ce:	8b 81       	ldd	r24, Y+3	; 0x03
    41d0:	9c 81       	ldd	r25, Y+4	; 0x04
    41d2:	00 97       	sbiw	r24, 0x00	; 0
    41d4:	61 f0       	breq	.+24     	; 0x41ee <GPIO_readPort+0x54>
    41d6:	1e c0       	rjmp	.+60     	; 0x4214 <GPIO_readPort+0x7a>
    41d8:	2b 81       	ldd	r18, Y+3	; 0x03
    41da:	3c 81       	ldd	r19, Y+4	; 0x04
    41dc:	22 30       	cpi	r18, 0x02	; 2
    41de:	31 05       	cpc	r19, r1
    41e0:	81 f0       	breq	.+32     	; 0x4202 <GPIO_readPort+0x68>
    41e2:	8b 81       	ldd	r24, Y+3	; 0x03
    41e4:	9c 81       	ldd	r25, Y+4	; 0x04
    41e6:	83 30       	cpi	r24, 0x03	; 3
    41e8:	91 05       	cpc	r25, r1
    41ea:	81 f0       	breq	.+32     	; 0x420c <GPIO_readPort+0x72>
    41ec:	13 c0       	rjmp	.+38     	; 0x4214 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    41ee:	e9 e3       	ldi	r30, 0x39	; 57
    41f0:	f0 e0       	ldi	r31, 0x00	; 0
    41f2:	80 81       	ld	r24, Z
    41f4:	89 83       	std	Y+1, r24	; 0x01
    41f6:	0e c0       	rjmp	.+28     	; 0x4214 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    41f8:	e6 e3       	ldi	r30, 0x36	; 54
    41fa:	f0 e0       	ldi	r31, 0x00	; 0
    41fc:	80 81       	ld	r24, Z
    41fe:	89 83       	std	Y+1, r24	; 0x01
    4200:	09 c0       	rjmp	.+18     	; 0x4214 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    4202:	e3 e3       	ldi	r30, 0x33	; 51
    4204:	f0 e0       	ldi	r31, 0x00	; 0
    4206:	80 81       	ld	r24, Z
    4208:	89 83       	std	Y+1, r24	; 0x01
    420a:	04 c0       	rjmp	.+8      	; 0x4214 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    420c:	e0 e3       	ldi	r30, 0x30	; 48
    420e:	f0 e0       	ldi	r31, 0x00	; 0
    4210:	80 81       	ld	r24, Z
    4212:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    4214:	89 81       	ldd	r24, Y+1	; 0x01
}
    4216:	0f 90       	pop	r0
    4218:	0f 90       	pop	r0
    421a:	0f 90       	pop	r0
    421c:	0f 90       	pop	r0
    421e:	cf 91       	pop	r28
    4220:	df 91       	pop	r29
    4222:	08 95       	ret

00004224 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    4224:	df 93       	push	r29
    4226:	cf 93       	push	r28
    4228:	cd b7       	in	r28, 0x3d	; 61
    422a:	de b7       	in	r29, 0x3e	; 62
    422c:	60 97       	sbiw	r28, 0x10	; 16
    422e:	0f b6       	in	r0, 0x3f	; 63
    4230:	f8 94       	cli
    4232:	de bf       	out	0x3e, r29	; 62
    4234:	0f be       	out	0x3f, r0	; 63
    4236:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    4238:	81 e0       	ldi	r24, 0x01	; 1
    423a:	64 e0       	ldi	r22, 0x04	; 4
    423c:	40 e0       	ldi	r20, 0x00	; 0
    423e:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    4242:	81 e0       	ldi	r24, 0x01	; 1
    4244:	65 e0       	ldi	r22, 0x05	; 5
    4246:	40 e0       	ldi	r20, 0x00	; 0
    4248:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	66 e0       	ldi	r22, 0x06	; 6
    4250:	40 e0       	ldi	r20, 0x00	; 0
    4252:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    4256:	81 e0       	ldi	r24, 0x01	; 1
    4258:	67 e0       	ldi	r22, 0x07	; 7
    425a:	40 e0       	ldi	r20, 0x00	; 0
    425c:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    4260:	83 e0       	ldi	r24, 0x03	; 3
    4262:	62 e0       	ldi	r22, 0x02	; 2
    4264:	40 e0       	ldi	r20, 0x00	; 0
    4266:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    426a:	83 e0       	ldi	r24, 0x03	; 3
    426c:	63 e0       	ldi	r22, 0x03	; 3
    426e:	40 e0       	ldi	r20, 0x00	; 0
    4270:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    4274:	83 e0       	ldi	r24, 0x03	; 3
    4276:	64 e0       	ldi	r22, 0x04	; 4
    4278:	40 e0       	ldi	r20, 0x00	; 0
    427a:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    427e:	83 e0       	ldi	r24, 0x03	; 3
    4280:	65 e0       	ldi	r22, 0x05	; 5
    4282:	40 e0       	ldi	r20, 0x00	; 0
    4284:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    4288:	1f 86       	std	Y+15, r1	; 0x0f
    428a:	bd c0       	rjmp	.+378    	; 0x4406 <KEYPAD_getPressedKey+0x1e2>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    428c:	8f 85       	ldd	r24, Y+15	; 0x0f
    428e:	98 2f       	mov	r25, r24
    4290:	9c 5f       	subi	r25, 0xFC	; 252
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	69 2f       	mov	r22, r25
    4296:	41 e0       	ldi	r20, 0x01	; 1
    4298:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    429c:	8f 85       	ldd	r24, Y+15	; 0x0f
    429e:	98 2f       	mov	r25, r24
    42a0:	9c 5f       	subi	r25, 0xFC	; 252
    42a2:	81 e0       	ldi	r24, 0x01	; 1
    42a4:	69 2f       	mov	r22, r25
    42a6:	40 e0       	ldi	r20, 0x00	; 0
    42a8:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    42ac:	18 8a       	std	Y+16, r1	; 0x10
    42ae:	2b c0       	rjmp	.+86     	; 0x4306 <KEYPAD_getPressedKey+0xe2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    42b0:	88 89       	ldd	r24, Y+16	; 0x10
    42b2:	98 2f       	mov	r25, r24
    42b4:	9e 5f       	subi	r25, 0xFE	; 254
    42b6:	83 e0       	ldi	r24, 0x03	; 3
    42b8:	69 2f       	mov	r22, r25
    42ba:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <GPIO_readPin>
    42be:	88 23       	and	r24, r24
    42c0:	f9 f4       	brne	.+62     	; 0x4300 <KEYPAD_getPressedKey+0xdc>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							while(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED);
    42c2:	88 89       	ldd	r24, Y+16	; 0x10
    42c4:	98 2f       	mov	r25, r24
    42c6:	9e 5f       	subi	r25, 0xFE	; 254
    42c8:	83 e0       	ldi	r24, 0x03	; 3
    42ca:	69 2f       	mov	r22, r25
    42cc:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <GPIO_readPin>
    42d0:	88 23       	and	r24, r24
    42d2:	b9 f3       	breq	.-18     	; 0x42c2 <KEYPAD_getPressedKey+0x9e>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    42d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    42d6:	88 2f       	mov	r24, r24
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	88 0f       	add	r24, r24
    42dc:	99 1f       	adc	r25, r25
    42de:	88 0f       	add	r24, r24
    42e0:	99 1f       	adc	r25, r25
    42e2:	98 2f       	mov	r25, r24
    42e4:	88 89       	ldd	r24, Y+16	; 0x10
    42e6:	89 0f       	add	r24, r25
    42e8:	8f 5f       	subi	r24, 0xFF	; 255
    42ea:	0e 94 08 22 	call	0x4410	; 0x4410 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    42ee:	60 96       	adiw	r28, 0x10	; 16
    42f0:	0f b6       	in	r0, 0x3f	; 63
    42f2:	f8 94       	cli
    42f4:	de bf       	out	0x3e, r29	; 62
    42f6:	0f be       	out	0x3f, r0	; 63
    42f8:	cd bf       	out	0x3d, r28	; 61
    42fa:	cf 91       	pop	r28
    42fc:	df 91       	pop	r29
    42fe:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    4300:	88 89       	ldd	r24, Y+16	; 0x10
    4302:	8f 5f       	subi	r24, 0xFF	; 255
    4304:	88 8b       	std	Y+16, r24	; 0x10
    4306:	88 89       	ldd	r24, Y+16	; 0x10
    4308:	84 30       	cpi	r24, 0x04	; 4
    430a:	90 f2       	brcs	.-92     	; 0x42b0 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    430c:	8f 85       	ldd	r24, Y+15	; 0x0f
    430e:	98 2f       	mov	r25, r24
    4310:	9c 5f       	subi	r25, 0xFC	; 252
    4312:	81 e0       	ldi	r24, 0x01	; 1
    4314:	69 2f       	mov	r22, r25
    4316:	40 e0       	ldi	r20, 0x00	; 0
    4318:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <GPIO_setupPinDirection>
    431c:	80 e0       	ldi	r24, 0x00	; 0
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	a0 ea       	ldi	r26, 0xA0	; 160
    4322:	b0 e4       	ldi	r27, 0x40	; 64
    4324:	8b 87       	std	Y+11, r24	; 0x0b
    4326:	9c 87       	std	Y+12, r25	; 0x0c
    4328:	ad 87       	std	Y+13, r26	; 0x0d
    432a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    432c:	6b 85       	ldd	r22, Y+11	; 0x0b
    432e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4330:	8d 85       	ldd	r24, Y+13	; 0x0d
    4332:	9e 85       	ldd	r25, Y+14	; 0x0e
    4334:	20 e0       	ldi	r18, 0x00	; 0
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	4a ef       	ldi	r20, 0xFA	; 250
    433a:	54 e4       	ldi	r21, 0x44	; 68
    433c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4340:	dc 01       	movw	r26, r24
    4342:	cb 01       	movw	r24, r22
    4344:	8f 83       	std	Y+7, r24	; 0x07
    4346:	98 87       	std	Y+8, r25	; 0x08
    4348:	a9 87       	std	Y+9, r26	; 0x09
    434a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    434c:	6f 81       	ldd	r22, Y+7	; 0x07
    434e:	78 85       	ldd	r23, Y+8	; 0x08
    4350:	89 85       	ldd	r24, Y+9	; 0x09
    4352:	9a 85       	ldd	r25, Y+10	; 0x0a
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	40 e8       	ldi	r20, 0x80	; 128
    435a:	5f e3       	ldi	r21, 0x3F	; 63
    435c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4360:	88 23       	and	r24, r24
    4362:	2c f4       	brge	.+10     	; 0x436e <KEYPAD_getPressedKey+0x14a>
		__ticks = 1;
    4364:	81 e0       	ldi	r24, 0x01	; 1
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	9e 83       	std	Y+6, r25	; 0x06
    436a:	8d 83       	std	Y+5, r24	; 0x05
    436c:	3f c0       	rjmp	.+126    	; 0x43ec <KEYPAD_getPressedKey+0x1c8>
	else if (__tmp > 65535)
    436e:	6f 81       	ldd	r22, Y+7	; 0x07
    4370:	78 85       	ldd	r23, Y+8	; 0x08
    4372:	89 85       	ldd	r24, Y+9	; 0x09
    4374:	9a 85       	ldd	r25, Y+10	; 0x0a
    4376:	20 e0       	ldi	r18, 0x00	; 0
    4378:	3f ef       	ldi	r19, 0xFF	; 255
    437a:	4f e7       	ldi	r20, 0x7F	; 127
    437c:	57 e4       	ldi	r21, 0x47	; 71
    437e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4382:	18 16       	cp	r1, r24
    4384:	4c f5       	brge	.+82     	; 0x43d8 <KEYPAD_getPressedKey+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4386:	6b 85       	ldd	r22, Y+11	; 0x0b
    4388:	7c 85       	ldd	r23, Y+12	; 0x0c
    438a:	8d 85       	ldd	r24, Y+13	; 0x0d
    438c:	9e 85       	ldd	r25, Y+14	; 0x0e
    438e:	20 e0       	ldi	r18, 0x00	; 0
    4390:	30 e0       	ldi	r19, 0x00	; 0
    4392:	40 e2       	ldi	r20, 0x20	; 32
    4394:	51 e4       	ldi	r21, 0x41	; 65
    4396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    439a:	dc 01       	movw	r26, r24
    439c:	cb 01       	movw	r24, r22
    439e:	bc 01       	movw	r22, r24
    43a0:	cd 01       	movw	r24, r26
    43a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a6:	dc 01       	movw	r26, r24
    43a8:	cb 01       	movw	r24, r22
    43aa:	9e 83       	std	Y+6, r25	; 0x06
    43ac:	8d 83       	std	Y+5, r24	; 0x05
    43ae:	0f c0       	rjmp	.+30     	; 0x43ce <KEYPAD_getPressedKey+0x1aa>
    43b0:	88 ec       	ldi	r24, 0xC8	; 200
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	9c 83       	std	Y+4, r25	; 0x04
    43b6:	8b 83       	std	Y+3, r24	; 0x03
    43b8:	8b 81       	ldd	r24, Y+3	; 0x03
    43ba:	9c 81       	ldd	r25, Y+4	; 0x04
    43bc:	01 97       	sbiw	r24, 0x01	; 1
    43be:	f1 f7       	brne	.-4      	; 0x43bc <KEYPAD_getPressedKey+0x198>
    43c0:	9c 83       	std	Y+4, r25	; 0x04
    43c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43c4:	8d 81       	ldd	r24, Y+5	; 0x05
    43c6:	9e 81       	ldd	r25, Y+6	; 0x06
    43c8:	01 97       	sbiw	r24, 0x01	; 1
    43ca:	9e 83       	std	Y+6, r25	; 0x06
    43cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ce:	8d 81       	ldd	r24, Y+5	; 0x05
    43d0:	9e 81       	ldd	r25, Y+6	; 0x06
    43d2:	00 97       	sbiw	r24, 0x00	; 0
    43d4:	69 f7       	brne	.-38     	; 0x43b0 <KEYPAD_getPressedKey+0x18c>
    43d6:	14 c0       	rjmp	.+40     	; 0x4400 <KEYPAD_getPressedKey+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43d8:	6f 81       	ldd	r22, Y+7	; 0x07
    43da:	78 85       	ldd	r23, Y+8	; 0x08
    43dc:	89 85       	ldd	r24, Y+9	; 0x09
    43de:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e4:	dc 01       	movw	r26, r24
    43e6:	cb 01       	movw	r24, r22
    43e8:	9e 83       	std	Y+6, r25	; 0x06
    43ea:	8d 83       	std	Y+5, r24	; 0x05
    43ec:	8d 81       	ldd	r24, Y+5	; 0x05
    43ee:	9e 81       	ldd	r25, Y+6	; 0x06
    43f0:	9a 83       	std	Y+2, r25	; 0x02
    43f2:	89 83       	std	Y+1, r24	; 0x01
    43f4:	89 81       	ldd	r24, Y+1	; 0x01
    43f6:	9a 81       	ldd	r25, Y+2	; 0x02
    43f8:	01 97       	sbiw	r24, 0x01	; 1
    43fa:	f1 f7       	brne	.-4      	; 0x43f8 <KEYPAD_getPressedKey+0x1d4>
    43fc:	9a 83       	std	Y+2, r25	; 0x02
    43fe:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    4400:	8f 85       	ldd	r24, Y+15	; 0x0f
    4402:	8f 5f       	subi	r24, 0xFF	; 255
    4404:	8f 87       	std	Y+15, r24	; 0x0f
    4406:	8f 85       	ldd	r24, Y+15	; 0x0f
    4408:	84 30       	cpi	r24, 0x04	; 4
    440a:	08 f4       	brcc	.+2      	; 0x440e <KEYPAD_getPressedKey+0x1ea>
    440c:	3f cf       	rjmp	.-386    	; 0x428c <KEYPAD_getPressedKey+0x68>
    440e:	3c cf       	rjmp	.-392    	; 0x4288 <KEYPAD_getPressedKey+0x64>

00004410 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    4410:	df 93       	push	r29
    4412:	cf 93       	push	r28
    4414:	00 d0       	rcall	.+0      	; 0x4416 <KEYPAD_4x4_adjustKeyNumber+0x6>
    4416:	00 d0       	rcall	.+0      	; 0x4418 <KEYPAD_4x4_adjustKeyNumber+0x8>
    4418:	cd b7       	in	r28, 0x3d	; 61
    441a:	de b7       	in	r29, 0x3e	; 62
    441c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    441e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    4420:	8a 81       	ldd	r24, Y+2	; 0x02
    4422:	28 2f       	mov	r18, r24
    4424:	30 e0       	ldi	r19, 0x00	; 0
    4426:	3c 83       	std	Y+4, r19	; 0x04
    4428:	2b 83       	std	Y+3, r18	; 0x03
    442a:	8b 81       	ldd	r24, Y+3	; 0x03
    442c:	9c 81       	ldd	r25, Y+4	; 0x04
    442e:	88 30       	cpi	r24, 0x08	; 8
    4430:	91 05       	cpc	r25, r1
    4432:	09 f4       	brne	.+2      	; 0x4436 <KEYPAD_4x4_adjustKeyNumber+0x26>
    4434:	70 c0       	rjmp	.+224    	; 0x4516 <KEYPAD_4x4_adjustKeyNumber+0x106>
    4436:	2b 81       	ldd	r18, Y+3	; 0x03
    4438:	3c 81       	ldd	r19, Y+4	; 0x04
    443a:	29 30       	cpi	r18, 0x09	; 9
    443c:	31 05       	cpc	r19, r1
    443e:	5c f5       	brge	.+86     	; 0x4496 <KEYPAD_4x4_adjustKeyNumber+0x86>
    4440:	8b 81       	ldd	r24, Y+3	; 0x03
    4442:	9c 81       	ldd	r25, Y+4	; 0x04
    4444:	84 30       	cpi	r24, 0x04	; 4
    4446:	91 05       	cpc	r25, r1
    4448:	09 f4       	brne	.+2      	; 0x444c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    444a:	59 c0       	rjmp	.+178    	; 0x44fe <KEYPAD_4x4_adjustKeyNumber+0xee>
    444c:	2b 81       	ldd	r18, Y+3	; 0x03
    444e:	3c 81       	ldd	r19, Y+4	; 0x04
    4450:	25 30       	cpi	r18, 0x05	; 5
    4452:	31 05       	cpc	r19, r1
    4454:	9c f4       	brge	.+38     	; 0x447c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    4456:	8b 81       	ldd	r24, Y+3	; 0x03
    4458:	9c 81       	ldd	r25, Y+4	; 0x04
    445a:	82 30       	cpi	r24, 0x02	; 2
    445c:	91 05       	cpc	r25, r1
    445e:	09 f4       	brne	.+2      	; 0x4462 <KEYPAD_4x4_adjustKeyNumber+0x52>
    4460:	48 c0       	rjmp	.+144    	; 0x44f2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    4462:	2b 81       	ldd	r18, Y+3	; 0x03
    4464:	3c 81       	ldd	r19, Y+4	; 0x04
    4466:	23 30       	cpi	r18, 0x03	; 3
    4468:	31 05       	cpc	r19, r1
    446a:	0c f0       	brlt	.+2      	; 0x446e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    446c:	45 c0       	rjmp	.+138    	; 0x44f8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    446e:	8b 81       	ldd	r24, Y+3	; 0x03
    4470:	9c 81       	ldd	r25, Y+4	; 0x04
    4472:	81 30       	cpi	r24, 0x01	; 1
    4474:	91 05       	cpc	r25, r1
    4476:	09 f4       	brne	.+2      	; 0x447a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    4478:	39 c0       	rjmp	.+114    	; 0x44ec <KEYPAD_4x4_adjustKeyNumber+0xdc>
    447a:	67 c0       	rjmp	.+206    	; 0x454a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    447c:	2b 81       	ldd	r18, Y+3	; 0x03
    447e:	3c 81       	ldd	r19, Y+4	; 0x04
    4480:	26 30       	cpi	r18, 0x06	; 6
    4482:	31 05       	cpc	r19, r1
    4484:	09 f4       	brne	.+2      	; 0x4488 <KEYPAD_4x4_adjustKeyNumber+0x78>
    4486:	41 c0       	rjmp	.+130    	; 0x450a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    4488:	8b 81       	ldd	r24, Y+3	; 0x03
    448a:	9c 81       	ldd	r25, Y+4	; 0x04
    448c:	87 30       	cpi	r24, 0x07	; 7
    448e:	91 05       	cpc	r25, r1
    4490:	0c f0       	brlt	.+2      	; 0x4494 <KEYPAD_4x4_adjustKeyNumber+0x84>
    4492:	3e c0       	rjmp	.+124    	; 0x4510 <KEYPAD_4x4_adjustKeyNumber+0x100>
    4494:	37 c0       	rjmp	.+110    	; 0x4504 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    4496:	2b 81       	ldd	r18, Y+3	; 0x03
    4498:	3c 81       	ldd	r19, Y+4	; 0x04
    449a:	2c 30       	cpi	r18, 0x0C	; 12
    449c:	31 05       	cpc	r19, r1
    449e:	09 f4       	brne	.+2      	; 0x44a2 <KEYPAD_4x4_adjustKeyNumber+0x92>
    44a0:	46 c0       	rjmp	.+140    	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    44a2:	8b 81       	ldd	r24, Y+3	; 0x03
    44a4:	9c 81       	ldd	r25, Y+4	; 0x04
    44a6:	8d 30       	cpi	r24, 0x0D	; 13
    44a8:	91 05       	cpc	r25, r1
    44aa:	5c f4       	brge	.+22     	; 0x44c2 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    44ac:	2b 81       	ldd	r18, Y+3	; 0x03
    44ae:	3c 81       	ldd	r19, Y+4	; 0x04
    44b0:	2a 30       	cpi	r18, 0x0A	; 10
    44b2:	31 05       	cpc	r19, r1
    44b4:	b1 f1       	breq	.+108    	; 0x4522 <KEYPAD_4x4_adjustKeyNumber+0x112>
    44b6:	8b 81       	ldd	r24, Y+3	; 0x03
    44b8:	9c 81       	ldd	r25, Y+4	; 0x04
    44ba:	8b 30       	cpi	r24, 0x0B	; 11
    44bc:	91 05       	cpc	r25, r1
    44be:	a4 f5       	brge	.+104    	; 0x4528 <KEYPAD_4x4_adjustKeyNumber+0x118>
    44c0:	2d c0       	rjmp	.+90     	; 0x451c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    44c2:	2b 81       	ldd	r18, Y+3	; 0x03
    44c4:	3c 81       	ldd	r19, Y+4	; 0x04
    44c6:	2e 30       	cpi	r18, 0x0E	; 14
    44c8:	31 05       	cpc	r19, r1
    44ca:	b9 f1       	breq	.+110    	; 0x453a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    44cc:	8b 81       	ldd	r24, Y+3	; 0x03
    44ce:	9c 81       	ldd	r25, Y+4	; 0x04
    44d0:	8e 30       	cpi	r24, 0x0E	; 14
    44d2:	91 05       	cpc	r25, r1
    44d4:	7c f1       	brlt	.+94     	; 0x4534 <KEYPAD_4x4_adjustKeyNumber+0x124>
    44d6:	2b 81       	ldd	r18, Y+3	; 0x03
    44d8:	3c 81       	ldd	r19, Y+4	; 0x04
    44da:	2f 30       	cpi	r18, 0x0F	; 15
    44dc:	31 05       	cpc	r19, r1
    44de:	79 f1       	breq	.+94     	; 0x453e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    44e0:	8b 81       	ldd	r24, Y+3	; 0x03
    44e2:	9c 81       	ldd	r25, Y+4	; 0x04
    44e4:	80 31       	cpi	r24, 0x10	; 16
    44e6:	91 05       	cpc	r25, r1
    44e8:	69 f1       	breq	.+90     	; 0x4544 <KEYPAD_4x4_adjustKeyNumber+0x134>
    44ea:	2f c0       	rjmp	.+94     	; 0x454a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    44ec:	87 e0       	ldi	r24, 0x07	; 7
    44ee:	89 83       	std	Y+1, r24	; 0x01
    44f0:	2e c0       	rjmp	.+92     	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    44f2:	88 e0       	ldi	r24, 0x08	; 8
    44f4:	89 83       	std	Y+1, r24	; 0x01
    44f6:	2b c0       	rjmp	.+86     	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    44f8:	89 e0       	ldi	r24, 0x09	; 9
    44fa:	89 83       	std	Y+1, r24	; 0x01
    44fc:	28 c0       	rjmp	.+80     	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    44fe:	85 e2       	ldi	r24, 0x25	; 37
    4500:	89 83       	std	Y+1, r24	; 0x01
    4502:	25 c0       	rjmp	.+74     	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    4504:	84 e0       	ldi	r24, 0x04	; 4
    4506:	89 83       	std	Y+1, r24	; 0x01
    4508:	22 c0       	rjmp	.+68     	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    450a:	85 e0       	ldi	r24, 0x05	; 5
    450c:	89 83       	std	Y+1, r24	; 0x01
    450e:	1f c0       	rjmp	.+62     	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    4510:	86 e0       	ldi	r24, 0x06	; 6
    4512:	89 83       	std	Y+1, r24	; 0x01
    4514:	1c c0       	rjmp	.+56     	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    4516:	8a e2       	ldi	r24, 0x2A	; 42
    4518:	89 83       	std	Y+1, r24	; 0x01
    451a:	19 c0       	rjmp	.+50     	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    451c:	81 e0       	ldi	r24, 0x01	; 1
    451e:	89 83       	std	Y+1, r24	; 0x01
    4520:	16 c0       	rjmp	.+44     	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    4522:	82 e0       	ldi	r24, 0x02	; 2
    4524:	89 83       	std	Y+1, r24	; 0x01
    4526:	13 c0       	rjmp	.+38     	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    4528:	83 e0       	ldi	r24, 0x03	; 3
    452a:	89 83       	std	Y+1, r24	; 0x01
    452c:	10 c0       	rjmp	.+32     	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    452e:	8d e2       	ldi	r24, 0x2D	; 45
    4530:	89 83       	std	Y+1, r24	; 0x01
    4532:	0d c0       	rjmp	.+26     	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    4534:	8d e0       	ldi	r24, 0x0D	; 13
    4536:	89 83       	std	Y+1, r24	; 0x01
    4538:	0a c0       	rjmp	.+20     	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    453a:	19 82       	std	Y+1, r1	; 0x01
    453c:	08 c0       	rjmp	.+16     	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    453e:	8d e3       	ldi	r24, 0x3D	; 61
    4540:	89 83       	std	Y+1, r24	; 0x01
    4542:	05 c0       	rjmp	.+10     	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    4544:	8b e2       	ldi	r24, 0x2B	; 43
    4546:	89 83       	std	Y+1, r24	; 0x01
    4548:	02 c0       	rjmp	.+4      	; 0x454e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    454a:	8a 81       	ldd	r24, Y+2	; 0x02
    454c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    454e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    4550:	0f 90       	pop	r0
    4552:	0f 90       	pop	r0
    4554:	0f 90       	pop	r0
    4556:	0f 90       	pop	r0
    4558:	cf 91       	pop	r28
    455a:	df 91       	pop	r29
    455c:	08 95       	ret

0000455e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    455e:	df 93       	push	r29
    4560:	cf 93       	push	r28
    4562:	cd b7       	in	r28, 0x3d	; 61
    4564:	de b7       	in	r29, 0x3e	; 62
    4566:	2e 97       	sbiw	r28, 0x0e	; 14
    4568:	0f b6       	in	r0, 0x3f	; 63
    456a:	f8 94       	cli
    456c:	de bf       	out	0x3e, r29	; 62
    456e:	0f be       	out	0x3f, r0	; 63
    4570:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	60 e0       	ldi	r22, 0x00	; 0
    4576:	41 e0       	ldi	r20, 0x01	; 1
    4578:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    457c:	81 e0       	ldi	r24, 0x01	; 1
    457e:	61 e0       	ldi	r22, 0x01	; 1
    4580:	41 e0       	ldi	r20, 0x01	; 1
    4582:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <GPIO_setupPinDirection>
    4586:	80 e0       	ldi	r24, 0x00	; 0
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	a0 ea       	ldi	r26, 0xA0	; 160
    458c:	b1 e4       	ldi	r27, 0x41	; 65
    458e:	8b 87       	std	Y+11, r24	; 0x0b
    4590:	9c 87       	std	Y+12, r25	; 0x0c
    4592:	ad 87       	std	Y+13, r26	; 0x0d
    4594:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4596:	6b 85       	ldd	r22, Y+11	; 0x0b
    4598:	7c 85       	ldd	r23, Y+12	; 0x0c
    459a:	8d 85       	ldd	r24, Y+13	; 0x0d
    459c:	9e 85       	ldd	r25, Y+14	; 0x0e
    459e:	20 e0       	ldi	r18, 0x00	; 0
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	4a ef       	ldi	r20, 0xFA	; 250
    45a4:	54 e4       	ldi	r21, 0x44	; 68
    45a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45aa:	dc 01       	movw	r26, r24
    45ac:	cb 01       	movw	r24, r22
    45ae:	8f 83       	std	Y+7, r24	; 0x07
    45b0:	98 87       	std	Y+8, r25	; 0x08
    45b2:	a9 87       	std	Y+9, r26	; 0x09
    45b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45b6:	6f 81       	ldd	r22, Y+7	; 0x07
    45b8:	78 85       	ldd	r23, Y+8	; 0x08
    45ba:	89 85       	ldd	r24, Y+9	; 0x09
    45bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    45be:	20 e0       	ldi	r18, 0x00	; 0
    45c0:	30 e0       	ldi	r19, 0x00	; 0
    45c2:	40 e8       	ldi	r20, 0x80	; 128
    45c4:	5f e3       	ldi	r21, 0x3F	; 63
    45c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45ca:	88 23       	and	r24, r24
    45cc:	2c f4       	brge	.+10     	; 0x45d8 <LCD_init+0x7a>
		__ticks = 1;
    45ce:	81 e0       	ldi	r24, 0x01	; 1
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	9e 83       	std	Y+6, r25	; 0x06
    45d4:	8d 83       	std	Y+5, r24	; 0x05
    45d6:	3f c0       	rjmp	.+126    	; 0x4656 <LCD_init+0xf8>
	else if (__tmp > 65535)
    45d8:	6f 81       	ldd	r22, Y+7	; 0x07
    45da:	78 85       	ldd	r23, Y+8	; 0x08
    45dc:	89 85       	ldd	r24, Y+9	; 0x09
    45de:	9a 85       	ldd	r25, Y+10	; 0x0a
    45e0:	20 e0       	ldi	r18, 0x00	; 0
    45e2:	3f ef       	ldi	r19, 0xFF	; 255
    45e4:	4f e7       	ldi	r20, 0x7F	; 127
    45e6:	57 e4       	ldi	r21, 0x47	; 71
    45e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45ec:	18 16       	cp	r1, r24
    45ee:	4c f5       	brge	.+82     	; 0x4642 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    45f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    45f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    45f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    45f8:	20 e0       	ldi	r18, 0x00	; 0
    45fa:	30 e0       	ldi	r19, 0x00	; 0
    45fc:	40 e2       	ldi	r20, 0x20	; 32
    45fe:	51 e4       	ldi	r21, 0x41	; 65
    4600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4604:	dc 01       	movw	r26, r24
    4606:	cb 01       	movw	r24, r22
    4608:	bc 01       	movw	r22, r24
    460a:	cd 01       	movw	r24, r26
    460c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4610:	dc 01       	movw	r26, r24
    4612:	cb 01       	movw	r24, r22
    4614:	9e 83       	std	Y+6, r25	; 0x06
    4616:	8d 83       	std	Y+5, r24	; 0x05
    4618:	0f c0       	rjmp	.+30     	; 0x4638 <LCD_init+0xda>
    461a:	88 ec       	ldi	r24, 0xC8	; 200
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	9c 83       	std	Y+4, r25	; 0x04
    4620:	8b 83       	std	Y+3, r24	; 0x03
    4622:	8b 81       	ldd	r24, Y+3	; 0x03
    4624:	9c 81       	ldd	r25, Y+4	; 0x04
    4626:	01 97       	sbiw	r24, 0x01	; 1
    4628:	f1 f7       	brne	.-4      	; 0x4626 <LCD_init+0xc8>
    462a:	9c 83       	std	Y+4, r25	; 0x04
    462c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    462e:	8d 81       	ldd	r24, Y+5	; 0x05
    4630:	9e 81       	ldd	r25, Y+6	; 0x06
    4632:	01 97       	sbiw	r24, 0x01	; 1
    4634:	9e 83       	std	Y+6, r25	; 0x06
    4636:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4638:	8d 81       	ldd	r24, Y+5	; 0x05
    463a:	9e 81       	ldd	r25, Y+6	; 0x06
    463c:	00 97       	sbiw	r24, 0x00	; 0
    463e:	69 f7       	brne	.-38     	; 0x461a <LCD_init+0xbc>
    4640:	14 c0       	rjmp	.+40     	; 0x466a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4642:	6f 81       	ldd	r22, Y+7	; 0x07
    4644:	78 85       	ldd	r23, Y+8	; 0x08
    4646:	89 85       	ldd	r24, Y+9	; 0x09
    4648:	9a 85       	ldd	r25, Y+10	; 0x0a
    464a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    464e:	dc 01       	movw	r26, r24
    4650:	cb 01       	movw	r24, r22
    4652:	9e 83       	std	Y+6, r25	; 0x06
    4654:	8d 83       	std	Y+5, r24	; 0x05
    4656:	8d 81       	ldd	r24, Y+5	; 0x05
    4658:	9e 81       	ldd	r25, Y+6	; 0x06
    465a:	9a 83       	std	Y+2, r25	; 0x02
    465c:	89 83       	std	Y+1, r24	; 0x01
    465e:	89 81       	ldd	r24, Y+1	; 0x01
    4660:	9a 81       	ldd	r25, Y+2	; 0x02
    4662:	01 97       	sbiw	r24, 0x01	; 1
    4664:	f1 f7       	brne	.-4      	; 0x4662 <LCD_init+0x104>
    4666:	9a 83       	std	Y+2, r25	; 0x02
    4668:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    466a:	80 e0       	ldi	r24, 0x00	; 0
    466c:	6f ef       	ldi	r22, 0xFF	; 255
    466e:	0e 94 45 20 	call	0x408a	; 0x408a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    4672:	88 e3       	ldi	r24, 0x38	; 56
    4674:	0e 94 4b 23 	call	0x4696	; 0x4696 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    4678:	8c e0       	ldi	r24, 0x0C	; 12
    467a:	0e 94 4b 23 	call	0x4696	; 0x4696 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    467e:	81 e0       	ldi	r24, 0x01	; 1
    4680:	0e 94 4b 23 	call	0x4696	; 0x4696 <LCD_sendCommand>
}
    4684:	2e 96       	adiw	r28, 0x0e	; 14
    4686:	0f b6       	in	r0, 0x3f	; 63
    4688:	f8 94       	cli
    468a:	de bf       	out	0x3e, r29	; 62
    468c:	0f be       	out	0x3f, r0	; 63
    468e:	cd bf       	out	0x3d, r28	; 61
    4690:	cf 91       	pop	r28
    4692:	df 91       	pop	r29
    4694:	08 95       	ret

00004696 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    4696:	df 93       	push	r29
    4698:	cf 93       	push	r28
    469a:	cd b7       	in	r28, 0x3d	; 61
    469c:	de b7       	in	r29, 0x3e	; 62
    469e:	e9 97       	sbiw	r28, 0x39	; 57
    46a0:	0f b6       	in	r0, 0x3f	; 63
    46a2:	f8 94       	cli
    46a4:	de bf       	out	0x3e, r29	; 62
    46a6:	0f be       	out	0x3f, r0	; 63
    46a8:	cd bf       	out	0x3d, r28	; 61
    46aa:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	60 e0       	ldi	r22, 0x00	; 0
    46b0:	40 e0       	ldi	r20, 0x00	; 0
    46b2:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <GPIO_writePin>
    46b6:	80 e0       	ldi	r24, 0x00	; 0
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	a0 e8       	ldi	r26, 0x80	; 128
    46bc:	bf e3       	ldi	r27, 0x3F	; 63
    46be:	8d ab       	std	Y+53, r24	; 0x35
    46c0:	9e ab       	std	Y+54, r25	; 0x36
    46c2:	af ab       	std	Y+55, r26	; 0x37
    46c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46c6:	6d a9       	ldd	r22, Y+53	; 0x35
    46c8:	7e a9       	ldd	r23, Y+54	; 0x36
    46ca:	8f a9       	ldd	r24, Y+55	; 0x37
    46cc:	98 ad       	ldd	r25, Y+56	; 0x38
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	30 e0       	ldi	r19, 0x00	; 0
    46d2:	4a ef       	ldi	r20, 0xFA	; 250
    46d4:	54 e4       	ldi	r21, 0x44	; 68
    46d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46da:	dc 01       	movw	r26, r24
    46dc:	cb 01       	movw	r24, r22
    46de:	89 ab       	std	Y+49, r24	; 0x31
    46e0:	9a ab       	std	Y+50, r25	; 0x32
    46e2:	ab ab       	std	Y+51, r26	; 0x33
    46e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    46e6:	69 a9       	ldd	r22, Y+49	; 0x31
    46e8:	7a a9       	ldd	r23, Y+50	; 0x32
    46ea:	8b a9       	ldd	r24, Y+51	; 0x33
    46ec:	9c a9       	ldd	r25, Y+52	; 0x34
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	40 e8       	ldi	r20, 0x80	; 128
    46f4:	5f e3       	ldi	r21, 0x3F	; 63
    46f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46fa:	88 23       	and	r24, r24
    46fc:	2c f4       	brge	.+10     	; 0x4708 <LCD_sendCommand+0x72>
		__ticks = 1;
    46fe:	81 e0       	ldi	r24, 0x01	; 1
    4700:	90 e0       	ldi	r25, 0x00	; 0
    4702:	98 ab       	std	Y+48, r25	; 0x30
    4704:	8f a7       	std	Y+47, r24	; 0x2f
    4706:	3f c0       	rjmp	.+126    	; 0x4786 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    4708:	69 a9       	ldd	r22, Y+49	; 0x31
    470a:	7a a9       	ldd	r23, Y+50	; 0x32
    470c:	8b a9       	ldd	r24, Y+51	; 0x33
    470e:	9c a9       	ldd	r25, Y+52	; 0x34
    4710:	20 e0       	ldi	r18, 0x00	; 0
    4712:	3f ef       	ldi	r19, 0xFF	; 255
    4714:	4f e7       	ldi	r20, 0x7F	; 127
    4716:	57 e4       	ldi	r21, 0x47	; 71
    4718:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    471c:	18 16       	cp	r1, r24
    471e:	4c f5       	brge	.+82     	; 0x4772 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4720:	6d a9       	ldd	r22, Y+53	; 0x35
    4722:	7e a9       	ldd	r23, Y+54	; 0x36
    4724:	8f a9       	ldd	r24, Y+55	; 0x37
    4726:	98 ad       	ldd	r25, Y+56	; 0x38
    4728:	20 e0       	ldi	r18, 0x00	; 0
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	40 e2       	ldi	r20, 0x20	; 32
    472e:	51 e4       	ldi	r21, 0x41	; 65
    4730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4734:	dc 01       	movw	r26, r24
    4736:	cb 01       	movw	r24, r22
    4738:	bc 01       	movw	r22, r24
    473a:	cd 01       	movw	r24, r26
    473c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4740:	dc 01       	movw	r26, r24
    4742:	cb 01       	movw	r24, r22
    4744:	98 ab       	std	Y+48, r25	; 0x30
    4746:	8f a7       	std	Y+47, r24	; 0x2f
    4748:	0f c0       	rjmp	.+30     	; 0x4768 <LCD_sendCommand+0xd2>
    474a:	88 ec       	ldi	r24, 0xC8	; 200
    474c:	90 e0       	ldi	r25, 0x00	; 0
    474e:	9e a7       	std	Y+46, r25	; 0x2e
    4750:	8d a7       	std	Y+45, r24	; 0x2d
    4752:	8d a5       	ldd	r24, Y+45	; 0x2d
    4754:	9e a5       	ldd	r25, Y+46	; 0x2e
    4756:	01 97       	sbiw	r24, 0x01	; 1
    4758:	f1 f7       	brne	.-4      	; 0x4756 <LCD_sendCommand+0xc0>
    475a:	9e a7       	std	Y+46, r25	; 0x2e
    475c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    475e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4760:	98 a9       	ldd	r25, Y+48	; 0x30
    4762:	01 97       	sbiw	r24, 0x01	; 1
    4764:	98 ab       	std	Y+48, r25	; 0x30
    4766:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4768:	8f a5       	ldd	r24, Y+47	; 0x2f
    476a:	98 a9       	ldd	r25, Y+48	; 0x30
    476c:	00 97       	sbiw	r24, 0x00	; 0
    476e:	69 f7       	brne	.-38     	; 0x474a <LCD_sendCommand+0xb4>
    4770:	14 c0       	rjmp	.+40     	; 0x479a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4772:	69 a9       	ldd	r22, Y+49	; 0x31
    4774:	7a a9       	ldd	r23, Y+50	; 0x32
    4776:	8b a9       	ldd	r24, Y+51	; 0x33
    4778:	9c a9       	ldd	r25, Y+52	; 0x34
    477a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    477e:	dc 01       	movw	r26, r24
    4780:	cb 01       	movw	r24, r22
    4782:	98 ab       	std	Y+48, r25	; 0x30
    4784:	8f a7       	std	Y+47, r24	; 0x2f
    4786:	8f a5       	ldd	r24, Y+47	; 0x2f
    4788:	98 a9       	ldd	r25, Y+48	; 0x30
    478a:	9c a7       	std	Y+44, r25	; 0x2c
    478c:	8b a7       	std	Y+43, r24	; 0x2b
    478e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4790:	9c a5       	ldd	r25, Y+44	; 0x2c
    4792:	01 97       	sbiw	r24, 0x01	; 1
    4794:	f1 f7       	brne	.-4      	; 0x4792 <LCD_sendCommand+0xfc>
    4796:	9c a7       	std	Y+44, r25	; 0x2c
    4798:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	61 e0       	ldi	r22, 0x01	; 1
    479e:	41 e0       	ldi	r20, 0x01	; 1
    47a0:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <GPIO_writePin>
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	a0 e8       	ldi	r26, 0x80	; 128
    47aa:	bf e3       	ldi	r27, 0x3F	; 63
    47ac:	8f a3       	std	Y+39, r24	; 0x27
    47ae:	98 a7       	std	Y+40, r25	; 0x28
    47b0:	a9 a7       	std	Y+41, r26	; 0x29
    47b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47b4:	6f a1       	ldd	r22, Y+39	; 0x27
    47b6:	78 a5       	ldd	r23, Y+40	; 0x28
    47b8:	89 a5       	ldd	r24, Y+41	; 0x29
    47ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    47bc:	20 e0       	ldi	r18, 0x00	; 0
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	4a ef       	ldi	r20, 0xFA	; 250
    47c2:	54 e4       	ldi	r21, 0x44	; 68
    47c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47c8:	dc 01       	movw	r26, r24
    47ca:	cb 01       	movw	r24, r22
    47cc:	8b a3       	std	Y+35, r24	; 0x23
    47ce:	9c a3       	std	Y+36, r25	; 0x24
    47d0:	ad a3       	std	Y+37, r26	; 0x25
    47d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    47d4:	6b a1       	ldd	r22, Y+35	; 0x23
    47d6:	7c a1       	ldd	r23, Y+36	; 0x24
    47d8:	8d a1       	ldd	r24, Y+37	; 0x25
    47da:	9e a1       	ldd	r25, Y+38	; 0x26
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	40 e8       	ldi	r20, 0x80	; 128
    47e2:	5f e3       	ldi	r21, 0x3F	; 63
    47e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47e8:	88 23       	and	r24, r24
    47ea:	2c f4       	brge	.+10     	; 0x47f6 <LCD_sendCommand+0x160>
		__ticks = 1;
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	9a a3       	std	Y+34, r25	; 0x22
    47f2:	89 a3       	std	Y+33, r24	; 0x21
    47f4:	3f c0       	rjmp	.+126    	; 0x4874 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    47f6:	6b a1       	ldd	r22, Y+35	; 0x23
    47f8:	7c a1       	ldd	r23, Y+36	; 0x24
    47fa:	8d a1       	ldd	r24, Y+37	; 0x25
    47fc:	9e a1       	ldd	r25, Y+38	; 0x26
    47fe:	20 e0       	ldi	r18, 0x00	; 0
    4800:	3f ef       	ldi	r19, 0xFF	; 255
    4802:	4f e7       	ldi	r20, 0x7F	; 127
    4804:	57 e4       	ldi	r21, 0x47	; 71
    4806:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    480a:	18 16       	cp	r1, r24
    480c:	4c f5       	brge	.+82     	; 0x4860 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    480e:	6f a1       	ldd	r22, Y+39	; 0x27
    4810:	78 a5       	ldd	r23, Y+40	; 0x28
    4812:	89 a5       	ldd	r24, Y+41	; 0x29
    4814:	9a a5       	ldd	r25, Y+42	; 0x2a
    4816:	20 e0       	ldi	r18, 0x00	; 0
    4818:	30 e0       	ldi	r19, 0x00	; 0
    481a:	40 e2       	ldi	r20, 0x20	; 32
    481c:	51 e4       	ldi	r21, 0x41	; 65
    481e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4822:	dc 01       	movw	r26, r24
    4824:	cb 01       	movw	r24, r22
    4826:	bc 01       	movw	r22, r24
    4828:	cd 01       	movw	r24, r26
    482a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    482e:	dc 01       	movw	r26, r24
    4830:	cb 01       	movw	r24, r22
    4832:	9a a3       	std	Y+34, r25	; 0x22
    4834:	89 a3       	std	Y+33, r24	; 0x21
    4836:	0f c0       	rjmp	.+30     	; 0x4856 <LCD_sendCommand+0x1c0>
    4838:	88 ec       	ldi	r24, 0xC8	; 200
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	98 a3       	std	Y+32, r25	; 0x20
    483e:	8f 8f       	std	Y+31, r24	; 0x1f
    4840:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4842:	98 a1       	ldd	r25, Y+32	; 0x20
    4844:	01 97       	sbiw	r24, 0x01	; 1
    4846:	f1 f7       	brne	.-4      	; 0x4844 <LCD_sendCommand+0x1ae>
    4848:	98 a3       	std	Y+32, r25	; 0x20
    484a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    484c:	89 a1       	ldd	r24, Y+33	; 0x21
    484e:	9a a1       	ldd	r25, Y+34	; 0x22
    4850:	01 97       	sbiw	r24, 0x01	; 1
    4852:	9a a3       	std	Y+34, r25	; 0x22
    4854:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4856:	89 a1       	ldd	r24, Y+33	; 0x21
    4858:	9a a1       	ldd	r25, Y+34	; 0x22
    485a:	00 97       	sbiw	r24, 0x00	; 0
    485c:	69 f7       	brne	.-38     	; 0x4838 <LCD_sendCommand+0x1a2>
    485e:	14 c0       	rjmp	.+40     	; 0x4888 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4860:	6b a1       	ldd	r22, Y+35	; 0x23
    4862:	7c a1       	ldd	r23, Y+36	; 0x24
    4864:	8d a1       	ldd	r24, Y+37	; 0x25
    4866:	9e a1       	ldd	r25, Y+38	; 0x26
    4868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    486c:	dc 01       	movw	r26, r24
    486e:	cb 01       	movw	r24, r22
    4870:	9a a3       	std	Y+34, r25	; 0x22
    4872:	89 a3       	std	Y+33, r24	; 0x21
    4874:	89 a1       	ldd	r24, Y+33	; 0x21
    4876:	9a a1       	ldd	r25, Y+34	; 0x22
    4878:	9e 8f       	std	Y+30, r25	; 0x1e
    487a:	8d 8f       	std	Y+29, r24	; 0x1d
    487c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    487e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4880:	01 97       	sbiw	r24, 0x01	; 1
    4882:	f1 f7       	brne	.-4      	; 0x4880 <LCD_sendCommand+0x1ea>
    4884:	9e 8f       	std	Y+30, r25	; 0x1e
    4886:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    4888:	80 e0       	ldi	r24, 0x00	; 0
    488a:	69 ad       	ldd	r22, Y+57	; 0x39
    488c:	0e 94 89 20 	call	0x4112	; 0x4112 <GPIO_writePort>
    4890:	80 e0       	ldi	r24, 0x00	; 0
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	a0 e8       	ldi	r26, 0x80	; 128
    4896:	bf e3       	ldi	r27, 0x3F	; 63
    4898:	89 8f       	std	Y+25, r24	; 0x19
    489a:	9a 8f       	std	Y+26, r25	; 0x1a
    489c:	ab 8f       	std	Y+27, r26	; 0x1b
    489e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48a0:	69 8d       	ldd	r22, Y+25	; 0x19
    48a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48a8:	20 e0       	ldi	r18, 0x00	; 0
    48aa:	30 e0       	ldi	r19, 0x00	; 0
    48ac:	4a ef       	ldi	r20, 0xFA	; 250
    48ae:	54 e4       	ldi	r21, 0x44	; 68
    48b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b4:	dc 01       	movw	r26, r24
    48b6:	cb 01       	movw	r24, r22
    48b8:	8d 8b       	std	Y+21, r24	; 0x15
    48ba:	9e 8b       	std	Y+22, r25	; 0x16
    48bc:	af 8b       	std	Y+23, r26	; 0x17
    48be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    48c0:	6d 89       	ldd	r22, Y+21	; 0x15
    48c2:	7e 89       	ldd	r23, Y+22	; 0x16
    48c4:	8f 89       	ldd	r24, Y+23	; 0x17
    48c6:	98 8d       	ldd	r25, Y+24	; 0x18
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	40 e8       	ldi	r20, 0x80	; 128
    48ce:	5f e3       	ldi	r21, 0x3F	; 63
    48d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48d4:	88 23       	and	r24, r24
    48d6:	2c f4       	brge	.+10     	; 0x48e2 <LCD_sendCommand+0x24c>
		__ticks = 1;
    48d8:	81 e0       	ldi	r24, 0x01	; 1
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	9c 8b       	std	Y+20, r25	; 0x14
    48de:	8b 8b       	std	Y+19, r24	; 0x13
    48e0:	3f c0       	rjmp	.+126    	; 0x4960 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    48e2:	6d 89       	ldd	r22, Y+21	; 0x15
    48e4:	7e 89       	ldd	r23, Y+22	; 0x16
    48e6:	8f 89       	ldd	r24, Y+23	; 0x17
    48e8:	98 8d       	ldd	r25, Y+24	; 0x18
    48ea:	20 e0       	ldi	r18, 0x00	; 0
    48ec:	3f ef       	ldi	r19, 0xFF	; 255
    48ee:	4f e7       	ldi	r20, 0x7F	; 127
    48f0:	57 e4       	ldi	r21, 0x47	; 71
    48f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    48f6:	18 16       	cp	r1, r24
    48f8:	4c f5       	brge	.+82     	; 0x494c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48fa:	69 8d       	ldd	r22, Y+25	; 0x19
    48fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4900:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4902:	20 e0       	ldi	r18, 0x00	; 0
    4904:	30 e0       	ldi	r19, 0x00	; 0
    4906:	40 e2       	ldi	r20, 0x20	; 32
    4908:	51 e4       	ldi	r21, 0x41	; 65
    490a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    490e:	dc 01       	movw	r26, r24
    4910:	cb 01       	movw	r24, r22
    4912:	bc 01       	movw	r22, r24
    4914:	cd 01       	movw	r24, r26
    4916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    491a:	dc 01       	movw	r26, r24
    491c:	cb 01       	movw	r24, r22
    491e:	9c 8b       	std	Y+20, r25	; 0x14
    4920:	8b 8b       	std	Y+19, r24	; 0x13
    4922:	0f c0       	rjmp	.+30     	; 0x4942 <LCD_sendCommand+0x2ac>
    4924:	88 ec       	ldi	r24, 0xC8	; 200
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	9a 8b       	std	Y+18, r25	; 0x12
    492a:	89 8b       	std	Y+17, r24	; 0x11
    492c:	89 89       	ldd	r24, Y+17	; 0x11
    492e:	9a 89       	ldd	r25, Y+18	; 0x12
    4930:	01 97       	sbiw	r24, 0x01	; 1
    4932:	f1 f7       	brne	.-4      	; 0x4930 <LCD_sendCommand+0x29a>
    4934:	9a 8b       	std	Y+18, r25	; 0x12
    4936:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4938:	8b 89       	ldd	r24, Y+19	; 0x13
    493a:	9c 89       	ldd	r25, Y+20	; 0x14
    493c:	01 97       	sbiw	r24, 0x01	; 1
    493e:	9c 8b       	std	Y+20, r25	; 0x14
    4940:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4942:	8b 89       	ldd	r24, Y+19	; 0x13
    4944:	9c 89       	ldd	r25, Y+20	; 0x14
    4946:	00 97       	sbiw	r24, 0x00	; 0
    4948:	69 f7       	brne	.-38     	; 0x4924 <LCD_sendCommand+0x28e>
    494a:	14 c0       	rjmp	.+40     	; 0x4974 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    494c:	6d 89       	ldd	r22, Y+21	; 0x15
    494e:	7e 89       	ldd	r23, Y+22	; 0x16
    4950:	8f 89       	ldd	r24, Y+23	; 0x17
    4952:	98 8d       	ldd	r25, Y+24	; 0x18
    4954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4958:	dc 01       	movw	r26, r24
    495a:	cb 01       	movw	r24, r22
    495c:	9c 8b       	std	Y+20, r25	; 0x14
    495e:	8b 8b       	std	Y+19, r24	; 0x13
    4960:	8b 89       	ldd	r24, Y+19	; 0x13
    4962:	9c 89       	ldd	r25, Y+20	; 0x14
    4964:	98 8b       	std	Y+16, r25	; 0x10
    4966:	8f 87       	std	Y+15, r24	; 0x0f
    4968:	8f 85       	ldd	r24, Y+15	; 0x0f
    496a:	98 89       	ldd	r25, Y+16	; 0x10
    496c:	01 97       	sbiw	r24, 0x01	; 1
    496e:	f1 f7       	brne	.-4      	; 0x496c <LCD_sendCommand+0x2d6>
    4970:	98 8b       	std	Y+16, r25	; 0x10
    4972:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4974:	81 e0       	ldi	r24, 0x01	; 1
    4976:	61 e0       	ldi	r22, 0x01	; 1
    4978:	40 e0       	ldi	r20, 0x00	; 0
    497a:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <GPIO_writePin>
    497e:	80 e0       	ldi	r24, 0x00	; 0
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	a0 e8       	ldi	r26, 0x80	; 128
    4984:	bf e3       	ldi	r27, 0x3F	; 63
    4986:	8b 87       	std	Y+11, r24	; 0x0b
    4988:	9c 87       	std	Y+12, r25	; 0x0c
    498a:	ad 87       	std	Y+13, r26	; 0x0d
    498c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    498e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4990:	7c 85       	ldd	r23, Y+12	; 0x0c
    4992:	8d 85       	ldd	r24, Y+13	; 0x0d
    4994:	9e 85       	ldd	r25, Y+14	; 0x0e
    4996:	20 e0       	ldi	r18, 0x00	; 0
    4998:	30 e0       	ldi	r19, 0x00	; 0
    499a:	4a ef       	ldi	r20, 0xFA	; 250
    499c:	54 e4       	ldi	r21, 0x44	; 68
    499e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49a2:	dc 01       	movw	r26, r24
    49a4:	cb 01       	movw	r24, r22
    49a6:	8f 83       	std	Y+7, r24	; 0x07
    49a8:	98 87       	std	Y+8, r25	; 0x08
    49aa:	a9 87       	std	Y+9, r26	; 0x09
    49ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49ae:	6f 81       	ldd	r22, Y+7	; 0x07
    49b0:	78 85       	ldd	r23, Y+8	; 0x08
    49b2:	89 85       	ldd	r24, Y+9	; 0x09
    49b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    49b6:	20 e0       	ldi	r18, 0x00	; 0
    49b8:	30 e0       	ldi	r19, 0x00	; 0
    49ba:	40 e8       	ldi	r20, 0x80	; 128
    49bc:	5f e3       	ldi	r21, 0x3F	; 63
    49be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    49c2:	88 23       	and	r24, r24
    49c4:	2c f4       	brge	.+10     	; 0x49d0 <LCD_sendCommand+0x33a>
		__ticks = 1;
    49c6:	81 e0       	ldi	r24, 0x01	; 1
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	9e 83       	std	Y+6, r25	; 0x06
    49cc:	8d 83       	std	Y+5, r24	; 0x05
    49ce:	3f c0       	rjmp	.+126    	; 0x4a4e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    49d0:	6f 81       	ldd	r22, Y+7	; 0x07
    49d2:	78 85       	ldd	r23, Y+8	; 0x08
    49d4:	89 85       	ldd	r24, Y+9	; 0x09
    49d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    49d8:	20 e0       	ldi	r18, 0x00	; 0
    49da:	3f ef       	ldi	r19, 0xFF	; 255
    49dc:	4f e7       	ldi	r20, 0x7F	; 127
    49de:	57 e4       	ldi	r21, 0x47	; 71
    49e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49e4:	18 16       	cp	r1, r24
    49e6:	4c f5       	brge	.+82     	; 0x4a3a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    49ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    49ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    49ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    49f0:	20 e0       	ldi	r18, 0x00	; 0
    49f2:	30 e0       	ldi	r19, 0x00	; 0
    49f4:	40 e2       	ldi	r20, 0x20	; 32
    49f6:	51 e4       	ldi	r21, 0x41	; 65
    49f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49fc:	dc 01       	movw	r26, r24
    49fe:	cb 01       	movw	r24, r22
    4a00:	bc 01       	movw	r22, r24
    4a02:	cd 01       	movw	r24, r26
    4a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a08:	dc 01       	movw	r26, r24
    4a0a:	cb 01       	movw	r24, r22
    4a0c:	9e 83       	std	Y+6, r25	; 0x06
    4a0e:	8d 83       	std	Y+5, r24	; 0x05
    4a10:	0f c0       	rjmp	.+30     	; 0x4a30 <LCD_sendCommand+0x39a>
    4a12:	88 ec       	ldi	r24, 0xC8	; 200
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	9c 83       	std	Y+4, r25	; 0x04
    4a18:	8b 83       	std	Y+3, r24	; 0x03
    4a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a1e:	01 97       	sbiw	r24, 0x01	; 1
    4a20:	f1 f7       	brne	.-4      	; 0x4a1e <LCD_sendCommand+0x388>
    4a22:	9c 83       	std	Y+4, r25	; 0x04
    4a24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a26:	8d 81       	ldd	r24, Y+5	; 0x05
    4a28:	9e 81       	ldd	r25, Y+6	; 0x06
    4a2a:	01 97       	sbiw	r24, 0x01	; 1
    4a2c:	9e 83       	std	Y+6, r25	; 0x06
    4a2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a30:	8d 81       	ldd	r24, Y+5	; 0x05
    4a32:	9e 81       	ldd	r25, Y+6	; 0x06
    4a34:	00 97       	sbiw	r24, 0x00	; 0
    4a36:	69 f7       	brne	.-38     	; 0x4a12 <LCD_sendCommand+0x37c>
    4a38:	14 c0       	rjmp	.+40     	; 0x4a62 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    4a3c:	78 85       	ldd	r23, Y+8	; 0x08
    4a3e:	89 85       	ldd	r24, Y+9	; 0x09
    4a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a46:	dc 01       	movw	r26, r24
    4a48:	cb 01       	movw	r24, r22
    4a4a:	9e 83       	std	Y+6, r25	; 0x06
    4a4c:	8d 83       	std	Y+5, r24	; 0x05
    4a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a50:	9e 81       	ldd	r25, Y+6	; 0x06
    4a52:	9a 83       	std	Y+2, r25	; 0x02
    4a54:	89 83       	std	Y+1, r24	; 0x01
    4a56:	89 81       	ldd	r24, Y+1	; 0x01
    4a58:	9a 81       	ldd	r25, Y+2	; 0x02
    4a5a:	01 97       	sbiw	r24, 0x01	; 1
    4a5c:	f1 f7       	brne	.-4      	; 0x4a5a <LCD_sendCommand+0x3c4>
    4a5e:	9a 83       	std	Y+2, r25	; 0x02
    4a60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    4a62:	e9 96       	adiw	r28, 0x39	; 57
    4a64:	0f b6       	in	r0, 0x3f	; 63
    4a66:	f8 94       	cli
    4a68:	de bf       	out	0x3e, r29	; 62
    4a6a:	0f be       	out	0x3f, r0	; 63
    4a6c:	cd bf       	out	0x3d, r28	; 61
    4a6e:	cf 91       	pop	r28
    4a70:	df 91       	pop	r29
    4a72:	08 95       	ret

00004a74 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    4a74:	df 93       	push	r29
    4a76:	cf 93       	push	r28
    4a78:	cd b7       	in	r28, 0x3d	; 61
    4a7a:	de b7       	in	r29, 0x3e	; 62
    4a7c:	e9 97       	sbiw	r28, 0x39	; 57
    4a7e:	0f b6       	in	r0, 0x3f	; 63
    4a80:	f8 94       	cli
    4a82:	de bf       	out	0x3e, r29	; 62
    4a84:	0f be       	out	0x3f, r0	; 63
    4a86:	cd bf       	out	0x3d, r28	; 61
    4a88:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    4a8a:	81 e0       	ldi	r24, 0x01	; 1
    4a8c:	60 e0       	ldi	r22, 0x00	; 0
    4a8e:	41 e0       	ldi	r20, 0x01	; 1
    4a90:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <GPIO_writePin>
    4a94:	80 e0       	ldi	r24, 0x00	; 0
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	a0 e8       	ldi	r26, 0x80	; 128
    4a9a:	bf e3       	ldi	r27, 0x3F	; 63
    4a9c:	8d ab       	std	Y+53, r24	; 0x35
    4a9e:	9e ab       	std	Y+54, r25	; 0x36
    4aa0:	af ab       	std	Y+55, r26	; 0x37
    4aa2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4aa4:	6d a9       	ldd	r22, Y+53	; 0x35
    4aa6:	7e a9       	ldd	r23, Y+54	; 0x36
    4aa8:	8f a9       	ldd	r24, Y+55	; 0x37
    4aaa:	98 ad       	ldd	r25, Y+56	; 0x38
    4aac:	20 e0       	ldi	r18, 0x00	; 0
    4aae:	30 e0       	ldi	r19, 0x00	; 0
    4ab0:	4a ef       	ldi	r20, 0xFA	; 250
    4ab2:	54 e4       	ldi	r21, 0x44	; 68
    4ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ab8:	dc 01       	movw	r26, r24
    4aba:	cb 01       	movw	r24, r22
    4abc:	89 ab       	std	Y+49, r24	; 0x31
    4abe:	9a ab       	std	Y+50, r25	; 0x32
    4ac0:	ab ab       	std	Y+51, r26	; 0x33
    4ac2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4ac4:	69 a9       	ldd	r22, Y+49	; 0x31
    4ac6:	7a a9       	ldd	r23, Y+50	; 0x32
    4ac8:	8b a9       	ldd	r24, Y+51	; 0x33
    4aca:	9c a9       	ldd	r25, Y+52	; 0x34
    4acc:	20 e0       	ldi	r18, 0x00	; 0
    4ace:	30 e0       	ldi	r19, 0x00	; 0
    4ad0:	40 e8       	ldi	r20, 0x80	; 128
    4ad2:	5f e3       	ldi	r21, 0x3F	; 63
    4ad4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ad8:	88 23       	and	r24, r24
    4ada:	2c f4       	brge	.+10     	; 0x4ae6 <LCD_displayCharacter+0x72>
		__ticks = 1;
    4adc:	81 e0       	ldi	r24, 0x01	; 1
    4ade:	90 e0       	ldi	r25, 0x00	; 0
    4ae0:	98 ab       	std	Y+48, r25	; 0x30
    4ae2:	8f a7       	std	Y+47, r24	; 0x2f
    4ae4:	3f c0       	rjmp	.+126    	; 0x4b64 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    4ae6:	69 a9       	ldd	r22, Y+49	; 0x31
    4ae8:	7a a9       	ldd	r23, Y+50	; 0x32
    4aea:	8b a9       	ldd	r24, Y+51	; 0x33
    4aec:	9c a9       	ldd	r25, Y+52	; 0x34
    4aee:	20 e0       	ldi	r18, 0x00	; 0
    4af0:	3f ef       	ldi	r19, 0xFF	; 255
    4af2:	4f e7       	ldi	r20, 0x7F	; 127
    4af4:	57 e4       	ldi	r21, 0x47	; 71
    4af6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4afa:	18 16       	cp	r1, r24
    4afc:	4c f5       	brge	.+82     	; 0x4b50 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4afe:	6d a9       	ldd	r22, Y+53	; 0x35
    4b00:	7e a9       	ldd	r23, Y+54	; 0x36
    4b02:	8f a9       	ldd	r24, Y+55	; 0x37
    4b04:	98 ad       	ldd	r25, Y+56	; 0x38
    4b06:	20 e0       	ldi	r18, 0x00	; 0
    4b08:	30 e0       	ldi	r19, 0x00	; 0
    4b0a:	40 e2       	ldi	r20, 0x20	; 32
    4b0c:	51 e4       	ldi	r21, 0x41	; 65
    4b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b12:	dc 01       	movw	r26, r24
    4b14:	cb 01       	movw	r24, r22
    4b16:	bc 01       	movw	r22, r24
    4b18:	cd 01       	movw	r24, r26
    4b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b1e:	dc 01       	movw	r26, r24
    4b20:	cb 01       	movw	r24, r22
    4b22:	98 ab       	std	Y+48, r25	; 0x30
    4b24:	8f a7       	std	Y+47, r24	; 0x2f
    4b26:	0f c0       	rjmp	.+30     	; 0x4b46 <LCD_displayCharacter+0xd2>
    4b28:	88 ec       	ldi	r24, 0xC8	; 200
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	9e a7       	std	Y+46, r25	; 0x2e
    4b2e:	8d a7       	std	Y+45, r24	; 0x2d
    4b30:	8d a5       	ldd	r24, Y+45	; 0x2d
    4b32:	9e a5       	ldd	r25, Y+46	; 0x2e
    4b34:	01 97       	sbiw	r24, 0x01	; 1
    4b36:	f1 f7       	brne	.-4      	; 0x4b34 <LCD_displayCharacter+0xc0>
    4b38:	9e a7       	std	Y+46, r25	; 0x2e
    4b3a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b3e:	98 a9       	ldd	r25, Y+48	; 0x30
    4b40:	01 97       	sbiw	r24, 0x01	; 1
    4b42:	98 ab       	std	Y+48, r25	; 0x30
    4b44:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b46:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b48:	98 a9       	ldd	r25, Y+48	; 0x30
    4b4a:	00 97       	sbiw	r24, 0x00	; 0
    4b4c:	69 f7       	brne	.-38     	; 0x4b28 <LCD_displayCharacter+0xb4>
    4b4e:	14 c0       	rjmp	.+40     	; 0x4b78 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b50:	69 a9       	ldd	r22, Y+49	; 0x31
    4b52:	7a a9       	ldd	r23, Y+50	; 0x32
    4b54:	8b a9       	ldd	r24, Y+51	; 0x33
    4b56:	9c a9       	ldd	r25, Y+52	; 0x34
    4b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b5c:	dc 01       	movw	r26, r24
    4b5e:	cb 01       	movw	r24, r22
    4b60:	98 ab       	std	Y+48, r25	; 0x30
    4b62:	8f a7       	std	Y+47, r24	; 0x2f
    4b64:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b66:	98 a9       	ldd	r25, Y+48	; 0x30
    4b68:	9c a7       	std	Y+44, r25	; 0x2c
    4b6a:	8b a7       	std	Y+43, r24	; 0x2b
    4b6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b70:	01 97       	sbiw	r24, 0x01	; 1
    4b72:	f1 f7       	brne	.-4      	; 0x4b70 <LCD_displayCharacter+0xfc>
    4b74:	9c a7       	std	Y+44, r25	; 0x2c
    4b76:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    4b78:	81 e0       	ldi	r24, 0x01	; 1
    4b7a:	61 e0       	ldi	r22, 0x01	; 1
    4b7c:	41 e0       	ldi	r20, 0x01	; 1
    4b7e:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <GPIO_writePin>
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	a0 e8       	ldi	r26, 0x80	; 128
    4b88:	bf e3       	ldi	r27, 0x3F	; 63
    4b8a:	8f a3       	std	Y+39, r24	; 0x27
    4b8c:	98 a7       	std	Y+40, r25	; 0x28
    4b8e:	a9 a7       	std	Y+41, r26	; 0x29
    4b90:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b92:	6f a1       	ldd	r22, Y+39	; 0x27
    4b94:	78 a5       	ldd	r23, Y+40	; 0x28
    4b96:	89 a5       	ldd	r24, Y+41	; 0x29
    4b98:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b9a:	20 e0       	ldi	r18, 0x00	; 0
    4b9c:	30 e0       	ldi	r19, 0x00	; 0
    4b9e:	4a ef       	ldi	r20, 0xFA	; 250
    4ba0:	54 e4       	ldi	r21, 0x44	; 68
    4ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba6:	dc 01       	movw	r26, r24
    4ba8:	cb 01       	movw	r24, r22
    4baa:	8b a3       	std	Y+35, r24	; 0x23
    4bac:	9c a3       	std	Y+36, r25	; 0x24
    4bae:	ad a3       	std	Y+37, r26	; 0x25
    4bb0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4bb2:	6b a1       	ldd	r22, Y+35	; 0x23
    4bb4:	7c a1       	ldd	r23, Y+36	; 0x24
    4bb6:	8d a1       	ldd	r24, Y+37	; 0x25
    4bb8:	9e a1       	ldd	r25, Y+38	; 0x26
    4bba:	20 e0       	ldi	r18, 0x00	; 0
    4bbc:	30 e0       	ldi	r19, 0x00	; 0
    4bbe:	40 e8       	ldi	r20, 0x80	; 128
    4bc0:	5f e3       	ldi	r21, 0x3F	; 63
    4bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4bc6:	88 23       	and	r24, r24
    4bc8:	2c f4       	brge	.+10     	; 0x4bd4 <LCD_displayCharacter+0x160>
		__ticks = 1;
    4bca:	81 e0       	ldi	r24, 0x01	; 1
    4bcc:	90 e0       	ldi	r25, 0x00	; 0
    4bce:	9a a3       	std	Y+34, r25	; 0x22
    4bd0:	89 a3       	std	Y+33, r24	; 0x21
    4bd2:	3f c0       	rjmp	.+126    	; 0x4c52 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    4bd4:	6b a1       	ldd	r22, Y+35	; 0x23
    4bd6:	7c a1       	ldd	r23, Y+36	; 0x24
    4bd8:	8d a1       	ldd	r24, Y+37	; 0x25
    4bda:	9e a1       	ldd	r25, Y+38	; 0x26
    4bdc:	20 e0       	ldi	r18, 0x00	; 0
    4bde:	3f ef       	ldi	r19, 0xFF	; 255
    4be0:	4f e7       	ldi	r20, 0x7F	; 127
    4be2:	57 e4       	ldi	r21, 0x47	; 71
    4be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4be8:	18 16       	cp	r1, r24
    4bea:	4c f5       	brge	.+82     	; 0x4c3e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bec:	6f a1       	ldd	r22, Y+39	; 0x27
    4bee:	78 a5       	ldd	r23, Y+40	; 0x28
    4bf0:	89 a5       	ldd	r24, Y+41	; 0x29
    4bf2:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bf4:	20 e0       	ldi	r18, 0x00	; 0
    4bf6:	30 e0       	ldi	r19, 0x00	; 0
    4bf8:	40 e2       	ldi	r20, 0x20	; 32
    4bfa:	51 e4       	ldi	r21, 0x41	; 65
    4bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c00:	dc 01       	movw	r26, r24
    4c02:	cb 01       	movw	r24, r22
    4c04:	bc 01       	movw	r22, r24
    4c06:	cd 01       	movw	r24, r26
    4c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c0c:	dc 01       	movw	r26, r24
    4c0e:	cb 01       	movw	r24, r22
    4c10:	9a a3       	std	Y+34, r25	; 0x22
    4c12:	89 a3       	std	Y+33, r24	; 0x21
    4c14:	0f c0       	rjmp	.+30     	; 0x4c34 <LCD_displayCharacter+0x1c0>
    4c16:	88 ec       	ldi	r24, 0xC8	; 200
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	98 a3       	std	Y+32, r25	; 0x20
    4c1c:	8f 8f       	std	Y+31, r24	; 0x1f
    4c1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c20:	98 a1       	ldd	r25, Y+32	; 0x20
    4c22:	01 97       	sbiw	r24, 0x01	; 1
    4c24:	f1 f7       	brne	.-4      	; 0x4c22 <LCD_displayCharacter+0x1ae>
    4c26:	98 a3       	std	Y+32, r25	; 0x20
    4c28:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c2a:	89 a1       	ldd	r24, Y+33	; 0x21
    4c2c:	9a a1       	ldd	r25, Y+34	; 0x22
    4c2e:	01 97       	sbiw	r24, 0x01	; 1
    4c30:	9a a3       	std	Y+34, r25	; 0x22
    4c32:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c34:	89 a1       	ldd	r24, Y+33	; 0x21
    4c36:	9a a1       	ldd	r25, Y+34	; 0x22
    4c38:	00 97       	sbiw	r24, 0x00	; 0
    4c3a:	69 f7       	brne	.-38     	; 0x4c16 <LCD_displayCharacter+0x1a2>
    4c3c:	14 c0       	rjmp	.+40     	; 0x4c66 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c3e:	6b a1       	ldd	r22, Y+35	; 0x23
    4c40:	7c a1       	ldd	r23, Y+36	; 0x24
    4c42:	8d a1       	ldd	r24, Y+37	; 0x25
    4c44:	9e a1       	ldd	r25, Y+38	; 0x26
    4c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c4a:	dc 01       	movw	r26, r24
    4c4c:	cb 01       	movw	r24, r22
    4c4e:	9a a3       	std	Y+34, r25	; 0x22
    4c50:	89 a3       	std	Y+33, r24	; 0x21
    4c52:	89 a1       	ldd	r24, Y+33	; 0x21
    4c54:	9a a1       	ldd	r25, Y+34	; 0x22
    4c56:	9e 8f       	std	Y+30, r25	; 0x1e
    4c58:	8d 8f       	std	Y+29, r24	; 0x1d
    4c5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c5e:	01 97       	sbiw	r24, 0x01	; 1
    4c60:	f1 f7       	brne	.-4      	; 0x4c5e <LCD_displayCharacter+0x1ea>
    4c62:	9e 8f       	std	Y+30, r25	; 0x1e
    4c64:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    4c66:	80 e0       	ldi	r24, 0x00	; 0
    4c68:	69 ad       	ldd	r22, Y+57	; 0x39
    4c6a:	0e 94 89 20 	call	0x4112	; 0x4112 <GPIO_writePort>
    4c6e:	80 e0       	ldi	r24, 0x00	; 0
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	a0 e8       	ldi	r26, 0x80	; 128
    4c74:	bf e3       	ldi	r27, 0x3F	; 63
    4c76:	89 8f       	std	Y+25, r24	; 0x19
    4c78:	9a 8f       	std	Y+26, r25	; 0x1a
    4c7a:	ab 8f       	std	Y+27, r26	; 0x1b
    4c7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c7e:	69 8d       	ldd	r22, Y+25	; 0x19
    4c80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c86:	20 e0       	ldi	r18, 0x00	; 0
    4c88:	30 e0       	ldi	r19, 0x00	; 0
    4c8a:	4a ef       	ldi	r20, 0xFA	; 250
    4c8c:	54 e4       	ldi	r21, 0x44	; 68
    4c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c92:	dc 01       	movw	r26, r24
    4c94:	cb 01       	movw	r24, r22
    4c96:	8d 8b       	std	Y+21, r24	; 0x15
    4c98:	9e 8b       	std	Y+22, r25	; 0x16
    4c9a:	af 8b       	std	Y+23, r26	; 0x17
    4c9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c9e:	6d 89       	ldd	r22, Y+21	; 0x15
    4ca0:	7e 89       	ldd	r23, Y+22	; 0x16
    4ca2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ca4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ca6:	20 e0       	ldi	r18, 0x00	; 0
    4ca8:	30 e0       	ldi	r19, 0x00	; 0
    4caa:	40 e8       	ldi	r20, 0x80	; 128
    4cac:	5f e3       	ldi	r21, 0x3F	; 63
    4cae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4cb2:	88 23       	and	r24, r24
    4cb4:	2c f4       	brge	.+10     	; 0x4cc0 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    4cb6:	81 e0       	ldi	r24, 0x01	; 1
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	9c 8b       	std	Y+20, r25	; 0x14
    4cbc:	8b 8b       	std	Y+19, r24	; 0x13
    4cbe:	3f c0       	rjmp	.+126    	; 0x4d3e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    4cc0:	6d 89       	ldd	r22, Y+21	; 0x15
    4cc2:	7e 89       	ldd	r23, Y+22	; 0x16
    4cc4:	8f 89       	ldd	r24, Y+23	; 0x17
    4cc6:	98 8d       	ldd	r25, Y+24	; 0x18
    4cc8:	20 e0       	ldi	r18, 0x00	; 0
    4cca:	3f ef       	ldi	r19, 0xFF	; 255
    4ccc:	4f e7       	ldi	r20, 0x7F	; 127
    4cce:	57 e4       	ldi	r21, 0x47	; 71
    4cd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4cd4:	18 16       	cp	r1, r24
    4cd6:	4c f5       	brge	.+82     	; 0x4d2a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cd8:	69 8d       	ldd	r22, Y+25	; 0x19
    4cda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4cdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ce0:	20 e0       	ldi	r18, 0x00	; 0
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	40 e2       	ldi	r20, 0x20	; 32
    4ce6:	51 e4       	ldi	r21, 0x41	; 65
    4ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cec:	dc 01       	movw	r26, r24
    4cee:	cb 01       	movw	r24, r22
    4cf0:	bc 01       	movw	r22, r24
    4cf2:	cd 01       	movw	r24, r26
    4cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf8:	dc 01       	movw	r26, r24
    4cfa:	cb 01       	movw	r24, r22
    4cfc:	9c 8b       	std	Y+20, r25	; 0x14
    4cfe:	8b 8b       	std	Y+19, r24	; 0x13
    4d00:	0f c0       	rjmp	.+30     	; 0x4d20 <LCD_displayCharacter+0x2ac>
    4d02:	88 ec       	ldi	r24, 0xC8	; 200
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	9a 8b       	std	Y+18, r25	; 0x12
    4d08:	89 8b       	std	Y+17, r24	; 0x11
    4d0a:	89 89       	ldd	r24, Y+17	; 0x11
    4d0c:	9a 89       	ldd	r25, Y+18	; 0x12
    4d0e:	01 97       	sbiw	r24, 0x01	; 1
    4d10:	f1 f7       	brne	.-4      	; 0x4d0e <LCD_displayCharacter+0x29a>
    4d12:	9a 8b       	std	Y+18, r25	; 0x12
    4d14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d16:	8b 89       	ldd	r24, Y+19	; 0x13
    4d18:	9c 89       	ldd	r25, Y+20	; 0x14
    4d1a:	01 97       	sbiw	r24, 0x01	; 1
    4d1c:	9c 8b       	std	Y+20, r25	; 0x14
    4d1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d20:	8b 89       	ldd	r24, Y+19	; 0x13
    4d22:	9c 89       	ldd	r25, Y+20	; 0x14
    4d24:	00 97       	sbiw	r24, 0x00	; 0
    4d26:	69 f7       	brne	.-38     	; 0x4d02 <LCD_displayCharacter+0x28e>
    4d28:	14 c0       	rjmp	.+40     	; 0x4d52 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d2a:	6d 89       	ldd	r22, Y+21	; 0x15
    4d2c:	7e 89       	ldd	r23, Y+22	; 0x16
    4d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    4d30:	98 8d       	ldd	r25, Y+24	; 0x18
    4d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d36:	dc 01       	movw	r26, r24
    4d38:	cb 01       	movw	r24, r22
    4d3a:	9c 8b       	std	Y+20, r25	; 0x14
    4d3c:	8b 8b       	std	Y+19, r24	; 0x13
    4d3e:	8b 89       	ldd	r24, Y+19	; 0x13
    4d40:	9c 89       	ldd	r25, Y+20	; 0x14
    4d42:	98 8b       	std	Y+16, r25	; 0x10
    4d44:	8f 87       	std	Y+15, r24	; 0x0f
    4d46:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d48:	98 89       	ldd	r25, Y+16	; 0x10
    4d4a:	01 97       	sbiw	r24, 0x01	; 1
    4d4c:	f1 f7       	brne	.-4      	; 0x4d4a <LCD_displayCharacter+0x2d6>
    4d4e:	98 8b       	std	Y+16, r25	; 0x10
    4d50:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4d52:	81 e0       	ldi	r24, 0x01	; 1
    4d54:	61 e0       	ldi	r22, 0x01	; 1
    4d56:	40 e0       	ldi	r20, 0x00	; 0
    4d58:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <GPIO_writePin>
    4d5c:	80 e0       	ldi	r24, 0x00	; 0
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	a0 e8       	ldi	r26, 0x80	; 128
    4d62:	bf e3       	ldi	r27, 0x3F	; 63
    4d64:	8b 87       	std	Y+11, r24	; 0x0b
    4d66:	9c 87       	std	Y+12, r25	; 0x0c
    4d68:	ad 87       	std	Y+13, r26	; 0x0d
    4d6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d70:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d72:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d74:	20 e0       	ldi	r18, 0x00	; 0
    4d76:	30 e0       	ldi	r19, 0x00	; 0
    4d78:	4a ef       	ldi	r20, 0xFA	; 250
    4d7a:	54 e4       	ldi	r21, 0x44	; 68
    4d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d80:	dc 01       	movw	r26, r24
    4d82:	cb 01       	movw	r24, r22
    4d84:	8f 83       	std	Y+7, r24	; 0x07
    4d86:	98 87       	std	Y+8, r25	; 0x08
    4d88:	a9 87       	std	Y+9, r26	; 0x09
    4d8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    4d8e:	78 85       	ldd	r23, Y+8	; 0x08
    4d90:	89 85       	ldd	r24, Y+9	; 0x09
    4d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d94:	20 e0       	ldi	r18, 0x00	; 0
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	40 e8       	ldi	r20, 0x80	; 128
    4d9a:	5f e3       	ldi	r21, 0x3F	; 63
    4d9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4da0:	88 23       	and	r24, r24
    4da2:	2c f4       	brge	.+10     	; 0x4dae <LCD_displayCharacter+0x33a>
		__ticks = 1;
    4da4:	81 e0       	ldi	r24, 0x01	; 1
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	9e 83       	std	Y+6, r25	; 0x06
    4daa:	8d 83       	std	Y+5, r24	; 0x05
    4dac:	3f c0       	rjmp	.+126    	; 0x4e2c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    4dae:	6f 81       	ldd	r22, Y+7	; 0x07
    4db0:	78 85       	ldd	r23, Y+8	; 0x08
    4db2:	89 85       	ldd	r24, Y+9	; 0x09
    4db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4db6:	20 e0       	ldi	r18, 0x00	; 0
    4db8:	3f ef       	ldi	r19, 0xFF	; 255
    4dba:	4f e7       	ldi	r20, 0x7F	; 127
    4dbc:	57 e4       	ldi	r21, 0x47	; 71
    4dbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4dc2:	18 16       	cp	r1, r24
    4dc4:	4c f5       	brge	.+82     	; 0x4e18 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dca:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dce:	20 e0       	ldi	r18, 0x00	; 0
    4dd0:	30 e0       	ldi	r19, 0x00	; 0
    4dd2:	40 e2       	ldi	r20, 0x20	; 32
    4dd4:	51 e4       	ldi	r21, 0x41	; 65
    4dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dda:	dc 01       	movw	r26, r24
    4ddc:	cb 01       	movw	r24, r22
    4dde:	bc 01       	movw	r22, r24
    4de0:	cd 01       	movw	r24, r26
    4de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4de6:	dc 01       	movw	r26, r24
    4de8:	cb 01       	movw	r24, r22
    4dea:	9e 83       	std	Y+6, r25	; 0x06
    4dec:	8d 83       	std	Y+5, r24	; 0x05
    4dee:	0f c0       	rjmp	.+30     	; 0x4e0e <LCD_displayCharacter+0x39a>
    4df0:	88 ec       	ldi	r24, 0xC8	; 200
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	9c 83       	std	Y+4, r25	; 0x04
    4df6:	8b 83       	std	Y+3, r24	; 0x03
    4df8:	8b 81       	ldd	r24, Y+3	; 0x03
    4dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    4dfc:	01 97       	sbiw	r24, 0x01	; 1
    4dfe:	f1 f7       	brne	.-4      	; 0x4dfc <LCD_displayCharacter+0x388>
    4e00:	9c 83       	std	Y+4, r25	; 0x04
    4e02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e04:	8d 81       	ldd	r24, Y+5	; 0x05
    4e06:	9e 81       	ldd	r25, Y+6	; 0x06
    4e08:	01 97       	sbiw	r24, 0x01	; 1
    4e0a:	9e 83       	std	Y+6, r25	; 0x06
    4e0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e10:	9e 81       	ldd	r25, Y+6	; 0x06
    4e12:	00 97       	sbiw	r24, 0x00	; 0
    4e14:	69 f7       	brne	.-38     	; 0x4df0 <LCD_displayCharacter+0x37c>
    4e16:	14 c0       	rjmp	.+40     	; 0x4e40 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e18:	6f 81       	ldd	r22, Y+7	; 0x07
    4e1a:	78 85       	ldd	r23, Y+8	; 0x08
    4e1c:	89 85       	ldd	r24, Y+9	; 0x09
    4e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e24:	dc 01       	movw	r26, r24
    4e26:	cb 01       	movw	r24, r22
    4e28:	9e 83       	std	Y+6, r25	; 0x06
    4e2a:	8d 83       	std	Y+5, r24	; 0x05
    4e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    4e30:	9a 83       	std	Y+2, r25	; 0x02
    4e32:	89 83       	std	Y+1, r24	; 0x01
    4e34:	89 81       	ldd	r24, Y+1	; 0x01
    4e36:	9a 81       	ldd	r25, Y+2	; 0x02
    4e38:	01 97       	sbiw	r24, 0x01	; 1
    4e3a:	f1 f7       	brne	.-4      	; 0x4e38 <LCD_displayCharacter+0x3c4>
    4e3c:	9a 83       	std	Y+2, r25	; 0x02
    4e3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    4e40:	e9 96       	adiw	r28, 0x39	; 57
    4e42:	0f b6       	in	r0, 0x3f	; 63
    4e44:	f8 94       	cli
    4e46:	de bf       	out	0x3e, r29	; 62
    4e48:	0f be       	out	0x3f, r0	; 63
    4e4a:	cd bf       	out	0x3d, r28	; 61
    4e4c:	cf 91       	pop	r28
    4e4e:	df 91       	pop	r29
    4e50:	08 95       	ret

00004e52 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    4e52:	df 93       	push	r29
    4e54:	cf 93       	push	r28
    4e56:	00 d0       	rcall	.+0      	; 0x4e58 <LCD_displayString+0x6>
    4e58:	0f 92       	push	r0
    4e5a:	cd b7       	in	r28, 0x3d	; 61
    4e5c:	de b7       	in	r29, 0x3e	; 62
    4e5e:	9b 83       	std	Y+3, r25	; 0x03
    4e60:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4e62:	19 82       	std	Y+1, r1	; 0x01
    4e64:	0e c0       	rjmp	.+28     	; 0x4e82 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    4e66:	89 81       	ldd	r24, Y+1	; 0x01
    4e68:	28 2f       	mov	r18, r24
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    4e70:	fc 01       	movw	r30, r24
    4e72:	e2 0f       	add	r30, r18
    4e74:	f3 1f       	adc	r31, r19
    4e76:	80 81       	ld	r24, Z
    4e78:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <LCD_displayCharacter>
		i++;
    4e7c:	89 81       	ldd	r24, Y+1	; 0x01
    4e7e:	8f 5f       	subi	r24, 0xFF	; 255
    4e80:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    4e82:	89 81       	ldd	r24, Y+1	; 0x01
    4e84:	28 2f       	mov	r18, r24
    4e86:	30 e0       	ldi	r19, 0x00	; 0
    4e88:	8a 81       	ldd	r24, Y+2	; 0x02
    4e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    4e8c:	fc 01       	movw	r30, r24
    4e8e:	e2 0f       	add	r30, r18
    4e90:	f3 1f       	adc	r31, r19
    4e92:	80 81       	ld	r24, Z
    4e94:	88 23       	and	r24, r24
    4e96:	39 f7       	brne	.-50     	; 0x4e66 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    4e98:	0f 90       	pop	r0
    4e9a:	0f 90       	pop	r0
    4e9c:	0f 90       	pop	r0
    4e9e:	cf 91       	pop	r28
    4ea0:	df 91       	pop	r29
    4ea2:	08 95       	ret

00004ea4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    4ea4:	df 93       	push	r29
    4ea6:	cf 93       	push	r28
    4ea8:	00 d0       	rcall	.+0      	; 0x4eaa <LCD_moveCursor+0x6>
    4eaa:	00 d0       	rcall	.+0      	; 0x4eac <LCD_moveCursor+0x8>
    4eac:	0f 92       	push	r0
    4eae:	cd b7       	in	r28, 0x3d	; 61
    4eb0:	de b7       	in	r29, 0x3e	; 62
    4eb2:	8a 83       	std	Y+2, r24	; 0x02
    4eb4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    4eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb8:	28 2f       	mov	r18, r24
    4eba:	30 e0       	ldi	r19, 0x00	; 0
    4ebc:	3d 83       	std	Y+5, r19	; 0x05
    4ebe:	2c 83       	std	Y+4, r18	; 0x04
    4ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    4ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    4ec4:	81 30       	cpi	r24, 0x01	; 1
    4ec6:	91 05       	cpc	r25, r1
    4ec8:	c1 f0       	breq	.+48     	; 0x4efa <LCD_moveCursor+0x56>
    4eca:	2c 81       	ldd	r18, Y+4	; 0x04
    4ecc:	3d 81       	ldd	r19, Y+5	; 0x05
    4ece:	22 30       	cpi	r18, 0x02	; 2
    4ed0:	31 05       	cpc	r19, r1
    4ed2:	2c f4       	brge	.+10     	; 0x4ede <LCD_moveCursor+0x3a>
    4ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ed6:	9d 81       	ldd	r25, Y+5	; 0x05
    4ed8:	00 97       	sbiw	r24, 0x00	; 0
    4eda:	61 f0       	breq	.+24     	; 0x4ef4 <LCD_moveCursor+0x50>
    4edc:	19 c0       	rjmp	.+50     	; 0x4f10 <LCD_moveCursor+0x6c>
    4ede:	2c 81       	ldd	r18, Y+4	; 0x04
    4ee0:	3d 81       	ldd	r19, Y+5	; 0x05
    4ee2:	22 30       	cpi	r18, 0x02	; 2
    4ee4:	31 05       	cpc	r19, r1
    4ee6:	69 f0       	breq	.+26     	; 0x4f02 <LCD_moveCursor+0x5e>
    4ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    4eea:	9d 81       	ldd	r25, Y+5	; 0x05
    4eec:	83 30       	cpi	r24, 0x03	; 3
    4eee:	91 05       	cpc	r25, r1
    4ef0:	61 f0       	breq	.+24     	; 0x4f0a <LCD_moveCursor+0x66>
    4ef2:	0e c0       	rjmp	.+28     	; 0x4f10 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    4ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ef6:	89 83       	std	Y+1, r24	; 0x01
    4ef8:	0b c0       	rjmp	.+22     	; 0x4f10 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    4efa:	8b 81       	ldd	r24, Y+3	; 0x03
    4efc:	80 5c       	subi	r24, 0xC0	; 192
    4efe:	89 83       	std	Y+1, r24	; 0x01
    4f00:	07 c0       	rjmp	.+14     	; 0x4f10 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    4f02:	8b 81       	ldd	r24, Y+3	; 0x03
    4f04:	80 5f       	subi	r24, 0xF0	; 240
    4f06:	89 83       	std	Y+1, r24	; 0x01
    4f08:	03 c0       	rjmp	.+6      	; 0x4f10 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    4f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f0c:	80 5b       	subi	r24, 0xB0	; 176
    4f0e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    4f10:	89 81       	ldd	r24, Y+1	; 0x01
    4f12:	80 68       	ori	r24, 0x80	; 128
    4f14:	0e 94 4b 23 	call	0x4696	; 0x4696 <LCD_sendCommand>
}
    4f18:	0f 90       	pop	r0
    4f1a:	0f 90       	pop	r0
    4f1c:	0f 90       	pop	r0
    4f1e:	0f 90       	pop	r0
    4f20:	0f 90       	pop	r0
    4f22:	cf 91       	pop	r28
    4f24:	df 91       	pop	r29
    4f26:	08 95       	ret

00004f28 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    4f28:	df 93       	push	r29
    4f2a:	cf 93       	push	r28
    4f2c:	00 d0       	rcall	.+0      	; 0x4f2e <LCD_displayStringRowColumn+0x6>
    4f2e:	00 d0       	rcall	.+0      	; 0x4f30 <LCD_displayStringRowColumn+0x8>
    4f30:	cd b7       	in	r28, 0x3d	; 61
    4f32:	de b7       	in	r29, 0x3e	; 62
    4f34:	89 83       	std	Y+1, r24	; 0x01
    4f36:	6a 83       	std	Y+2, r22	; 0x02
    4f38:	5c 83       	std	Y+4, r21	; 0x04
    4f3a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    4f3c:	89 81       	ldd	r24, Y+1	; 0x01
    4f3e:	6a 81       	ldd	r22, Y+2	; 0x02
    4f40:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    4f44:	8b 81       	ldd	r24, Y+3	; 0x03
    4f46:	9c 81       	ldd	r25, Y+4	; 0x04
    4f48:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
}
    4f4c:	0f 90       	pop	r0
    4f4e:	0f 90       	pop	r0
    4f50:	0f 90       	pop	r0
    4f52:	0f 90       	pop	r0
    4f54:	cf 91       	pop	r28
    4f56:	df 91       	pop	r29
    4f58:	08 95       	ret

00004f5a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    4f5a:	df 93       	push	r29
    4f5c:	cf 93       	push	r28
    4f5e:	cd b7       	in	r28, 0x3d	; 61
    4f60:	de b7       	in	r29, 0x3e	; 62
    4f62:	62 97       	sbiw	r28, 0x12	; 18
    4f64:	0f b6       	in	r0, 0x3f	; 63
    4f66:	f8 94       	cli
    4f68:	de bf       	out	0x3e, r29	; 62
    4f6a:	0f be       	out	0x3f, r0	; 63
    4f6c:	cd bf       	out	0x3d, r28	; 61
    4f6e:	9a 8b       	std	Y+18, r25	; 0x12
    4f70:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    4f72:	89 89       	ldd	r24, Y+17	; 0x11
    4f74:	9a 89       	ldd	r25, Y+18	; 0x12
    4f76:	9e 01       	movw	r18, r28
    4f78:	2f 5f       	subi	r18, 0xFF	; 255
    4f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f7c:	b9 01       	movw	r22, r18
    4f7e:	4a e0       	ldi	r20, 0x0A	; 10
    4f80:	50 e0       	ldi	r21, 0x00	; 0
    4f82:	0e 94 6f 2b 	call	0x56de	; 0x56de <itoa>
   LCD_displayString(buff); /* Display the string */
    4f86:	ce 01       	movw	r24, r28
    4f88:	01 96       	adiw	r24, 0x01	; 1
    4f8a:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_displayString>
}
    4f8e:	62 96       	adiw	r28, 0x12	; 18
    4f90:	0f b6       	in	r0, 0x3f	; 63
    4f92:	f8 94       	cli
    4f94:	de bf       	out	0x3e, r29	; 62
    4f96:	0f be       	out	0x3f, r0	; 63
    4f98:	cd bf       	out	0x3d, r28	; 61
    4f9a:	cf 91       	pop	r28
    4f9c:	df 91       	pop	r29
    4f9e:	08 95       	ret

00004fa0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    4fa0:	df 93       	push	r29
    4fa2:	cf 93       	push	r28
    4fa4:	cd b7       	in	r28, 0x3d	; 61
    4fa6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    4fa8:	81 e0       	ldi	r24, 0x01	; 1
    4faa:	0e 94 4b 23 	call	0x4696	; 0x4696 <LCD_sendCommand>
}
    4fae:	cf 91       	pop	r28
    4fb0:	df 91       	pop	r29
    4fb2:	08 95       	ret

00004fb4 <__vector_9>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    4fb4:	1f 92       	push	r1
    4fb6:	0f 92       	push	r0
    4fb8:	0f b6       	in	r0, 0x3f	; 63
    4fba:	0f 92       	push	r0
    4fbc:	11 24       	eor	r1, r1
    4fbe:	2f 93       	push	r18
    4fc0:	3f 93       	push	r19
    4fc2:	4f 93       	push	r20
    4fc4:	5f 93       	push	r21
    4fc6:	6f 93       	push	r22
    4fc8:	7f 93       	push	r23
    4fca:	8f 93       	push	r24
    4fcc:	9f 93       	push	r25
    4fce:	af 93       	push	r26
    4fd0:	bf 93       	push	r27
    4fd2:	ef 93       	push	r30
    4fd4:	ff 93       	push	r31
    4fd6:	df 93       	push	r29
    4fd8:	cf 93       	push	r28
    4fda:	cd b7       	in	r28, 0x3d	; 61
    4fdc:	de b7       	in	r29, 0x3e	; 62
	g_Ptr_OVFCallBack();
    4fde:	e0 91 99 01 	lds	r30, 0x0199
    4fe2:	f0 91 9a 01 	lds	r31, 0x019A
    4fe6:	09 95       	icall
}
    4fe8:	cf 91       	pop	r28
    4fea:	df 91       	pop	r29
    4fec:	ff 91       	pop	r31
    4fee:	ef 91       	pop	r30
    4ff0:	bf 91       	pop	r27
    4ff2:	af 91       	pop	r26
    4ff4:	9f 91       	pop	r25
    4ff6:	8f 91       	pop	r24
    4ff8:	7f 91       	pop	r23
    4ffa:	6f 91       	pop	r22
    4ffc:	5f 91       	pop	r21
    4ffe:	4f 91       	pop	r20
    5000:	3f 91       	pop	r19
    5002:	2f 91       	pop	r18
    5004:	0f 90       	pop	r0
    5006:	0f be       	out	0x3f, r0	; 63
    5008:	0f 90       	pop	r0
    500a:	1f 90       	pop	r1
    500c:	18 95       	reti

0000500e <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    500e:	1f 92       	push	r1
    5010:	0f 92       	push	r0
    5012:	0f b6       	in	r0, 0x3f	; 63
    5014:	0f 92       	push	r0
    5016:	11 24       	eor	r1, r1
    5018:	2f 93       	push	r18
    501a:	3f 93       	push	r19
    501c:	4f 93       	push	r20
    501e:	5f 93       	push	r21
    5020:	6f 93       	push	r22
    5022:	7f 93       	push	r23
    5024:	8f 93       	push	r24
    5026:	9f 93       	push	r25
    5028:	af 93       	push	r26
    502a:	bf 93       	push	r27
    502c:	ef 93       	push	r30
    502e:	ff 93       	push	r31
    5030:	df 93       	push	r29
    5032:	cf 93       	push	r28
    5034:	cd b7       	in	r28, 0x3d	; 61
    5036:	de b7       	in	r29, 0x3e	; 62
	g_Ptr_CTCCallBack();
    5038:	e0 91 9b 01 	lds	r30, 0x019B
    503c:	f0 91 9c 01 	lds	r31, 0x019C
    5040:	09 95       	icall
}
    5042:	cf 91       	pop	r28
    5044:	df 91       	pop	r29
    5046:	ff 91       	pop	r31
    5048:	ef 91       	pop	r30
    504a:	bf 91       	pop	r27
    504c:	af 91       	pop	r26
    504e:	9f 91       	pop	r25
    5050:	8f 91       	pop	r24
    5052:	7f 91       	pop	r23
    5054:	6f 91       	pop	r22
    5056:	5f 91       	pop	r21
    5058:	4f 91       	pop	r20
    505a:	3f 91       	pop	r19
    505c:	2f 91       	pop	r18
    505e:	0f 90       	pop	r0
    5060:	0f be       	out	0x3f, r0	; 63
    5062:	0f 90       	pop	r0
    5064:	1f 90       	pop	r1
    5066:	18 95       	reti

00005068 <Timer1_init>:

/* Description :
 * Function to initialize the Timer driver
 * */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    5068:	df 93       	push	r29
    506a:	cf 93       	push	r28
    506c:	00 d0       	rcall	.+0      	; 0x506e <Timer1_init+0x6>
    506e:	00 d0       	rcall	.+0      	; 0x5070 <Timer1_init+0x8>
    5070:	cd b7       	in	r28, 0x3d	; 61
    5072:	de b7       	in	r29, 0x3e	; 62
    5074:	9a 83       	std	Y+2, r25	; 0x02
    5076:	89 83       	std	Y+1, r24	; 0x01
	/* check Timer Mode*/
	switch (Config_Ptr->mode)
    5078:	e9 81       	ldd	r30, Y+1	; 0x01
    507a:	fa 81       	ldd	r31, Y+2	; 0x02
    507c:	85 81       	ldd	r24, Z+5	; 0x05
    507e:	28 2f       	mov	r18, r24
    5080:	30 e0       	ldi	r19, 0x00	; 0
    5082:	3c 83       	std	Y+4, r19	; 0x04
    5084:	2b 83       	std	Y+3, r18	; 0x03
    5086:	8b 81       	ldd	r24, Y+3	; 0x03
    5088:	9c 81       	ldd	r25, Y+4	; 0x04
    508a:	00 97       	sbiw	r24, 0x00	; 0
    508c:	31 f0       	breq	.+12     	; 0x509a <Timer1_init+0x32>
    508e:	2b 81       	ldd	r18, Y+3	; 0x03
    5090:	3c 81       	ldd	r19, Y+4	; 0x04
    5092:	21 30       	cpi	r18, 0x01	; 1
    5094:	31 05       	cpc	r19, r1
    5096:	31 f0       	breq	.+12     	; 0x50a4 <Timer1_init+0x3c>
    5098:	09 c0       	rjmp	.+18     	; 0x50ac <Timer1_init+0x44>
	{
		case Normal_Mode:	Timer1_NormalModeConfiguration(Config_Ptr);	break;
    509a:	89 81       	ldd	r24, Y+1	; 0x01
    509c:	9a 81       	ldd	r25, Y+2	; 0x02
    509e:	0e 94 a7 28 	call	0x514e	; 0x514e <Timer1_NormalModeConfiguration>
    50a2:	04 c0       	rjmp	.+8      	; 0x50ac <Timer1_init+0x44>
		case CTC_Mode   :   Timer1_CTCModeConfiguration(Config_Ptr)   ;	break;
    50a4:	89 81       	ldd	r24, Y+1	; 0x01
    50a6:	9a 81       	ldd	r25, Y+2	; 0x02
    50a8:	0e 94 ff 28 	call	0x51fe	; 0x51fe <Timer1_CTCModeConfiguration>
		default:                                               		    break;
	}

}
    50ac:	0f 90       	pop	r0
    50ae:	0f 90       	pop	r0
    50b0:	0f 90       	pop	r0
    50b2:	0f 90       	pop	r0
    50b4:	cf 91       	pop	r28
    50b6:	df 91       	pop	r29
    50b8:	08 95       	ret

000050ba <Timer1_deInit>:
/* Description :
 * Function to disable the Timer1.
 * */
void Timer1_deInit(void)
{
    50ba:	df 93       	push	r29
    50bc:	cf 93       	push	r28
    50be:	cd b7       	in	r28, 0x3d	; 61
    50c0:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = TCCR1B & TIMER1_PRESCALLER_MASK;
    50c2:	ae e4       	ldi	r26, 0x4E	; 78
    50c4:	b0 e0       	ldi	r27, 0x00	; 0
    50c6:	ee e4       	ldi	r30, 0x4E	; 78
    50c8:	f0 e0       	ldi	r31, 0x00	; 0
    50ca:	80 81       	ld	r24, Z
    50cc:	88 7f       	andi	r24, 0xF8	; 248
    50ce:	8c 93       	st	X, r24
	TCNT1=0;
    50d0:	ec e4       	ldi	r30, 0x4C	; 76
    50d2:	f0 e0       	ldi	r31, 0x00	; 0
    50d4:	11 82       	std	Z+1, r1	; 0x01
    50d6:	10 82       	st	Z, r1
	TCCR1A=0;
    50d8:	ef e4       	ldi	r30, 0x4F	; 79
    50da:	f0 e0       	ldi	r31, 0x00	; 0
    50dc:	10 82       	st	Z, r1
	TIMSK=0;
    50de:	e9 e5       	ldi	r30, 0x59	; 89
    50e0:	f0 e0       	ldi	r31, 0x00	; 0
    50e2:	10 82       	st	Z, r1
	OCR1A=0;
    50e4:	ea e4       	ldi	r30, 0x4A	; 74
    50e6:	f0 e0       	ldi	r31, 0x00	; 0
    50e8:	11 82       	std	Z+1, r1	; 0x01
    50ea:	10 82       	st	Z, r1
}
    50ec:	cf 91       	pop	r28
    50ee:	df 91       	pop	r29
    50f0:	08 95       	ret

000050f2 <Timer1_setCallBack>:
/* Description :
 * Function to set the Call Back function address.
 * */
void Timer1_setCallBack(uint8 Copy_U8_Mode , void(*a_ptr)(void))
{
    50f2:	df 93       	push	r29
    50f4:	cf 93       	push	r28
    50f6:	00 d0       	rcall	.+0      	; 0x50f8 <Timer1_setCallBack+0x6>
    50f8:	00 d0       	rcall	.+0      	; 0x50fa <Timer1_setCallBack+0x8>
    50fa:	0f 92       	push	r0
    50fc:	cd b7       	in	r28, 0x3d	; 61
    50fe:	de b7       	in	r29, 0x3e	; 62
    5100:	89 83       	std	Y+1, r24	; 0x01
    5102:	7b 83       	std	Y+3, r23	; 0x03
    5104:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_Mode)
    5106:	89 81       	ldd	r24, Y+1	; 0x01
    5108:	28 2f       	mov	r18, r24
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	3d 83       	std	Y+5, r19	; 0x05
    510e:	2c 83       	std	Y+4, r18	; 0x04
    5110:	8c 81       	ldd	r24, Y+4	; 0x04
    5112:	9d 81       	ldd	r25, Y+5	; 0x05
    5114:	00 97       	sbiw	r24, 0x00	; 0
    5116:	31 f0       	breq	.+12     	; 0x5124 <Timer1_setCallBack+0x32>
    5118:	2c 81       	ldd	r18, Y+4	; 0x04
    511a:	3d 81       	ldd	r19, Y+5	; 0x05
    511c:	21 30       	cpi	r18, 0x01	; 1
    511e:	31 05       	cpc	r19, r1
    5120:	41 f0       	breq	.+16     	; 0x5132 <Timer1_setCallBack+0x40>
    5122:	0d c0       	rjmp	.+26     	; 0x513e <Timer1_setCallBack+0x4c>
	{
	case Normal_Mode:g_Ptr_OVFCallBack = a_ptr; break;
    5124:	8a 81       	ldd	r24, Y+2	; 0x02
    5126:	9b 81       	ldd	r25, Y+3	; 0x03
    5128:	90 93 9a 01 	sts	0x019A, r25
    512c:	80 93 99 01 	sts	0x0199, r24
    5130:	06 c0       	rjmp	.+12     	; 0x513e <Timer1_setCallBack+0x4c>
	case CTC_Mode:   g_Ptr_CTCCallBack = a_ptr; break;
    5132:	8a 81       	ldd	r24, Y+2	; 0x02
    5134:	9b 81       	ldd	r25, Y+3	; 0x03
    5136:	90 93 9c 01 	sts	0x019C, r25
    513a:	80 93 9b 01 	sts	0x019B, r24

	default:                                    break;
	}

}
    513e:	0f 90       	pop	r0
    5140:	0f 90       	pop	r0
    5142:	0f 90       	pop	r0
    5144:	0f 90       	pop	r0
    5146:	0f 90       	pop	r0
    5148:	cf 91       	pop	r28
    514a:	df 91       	pop	r29
    514c:	08 95       	ret

0000514e <Timer1_NormalModeConfiguration>:

/*******************************************************************************
 *                    Static Functions Definitions                             *
 *******************************************************************************/
static void Timer1_NormalModeConfiguration(const Timer1_ConfigType * Config_Ptr)
{
    514e:	df 93       	push	r29
    5150:	cf 93       	push	r28
    5152:	00 d0       	rcall	.+0      	; 0x5154 <Timer1_NormalModeConfiguration+0x6>
    5154:	cd b7       	in	r28, 0x3d	; 61
    5156:	de b7       	in	r29, 0x3e	; 62
    5158:	9a 83       	std	Y+2, r25	; 0x02
    515a:	89 83       	std	Y+1, r24	; 0x01
	 *  Set  (prescaler)
	 *  TCNT1 =0
	 * Overflow Interrupt Enable
	 * */

	SET_BIT(TCCR1A,FOC1A);
    515c:	af e4       	ldi	r26, 0x4F	; 79
    515e:	b0 e0       	ldi	r27, 0x00	; 0
    5160:	ef e4       	ldi	r30, 0x4F	; 79
    5162:	f0 e0       	ldi	r31, 0x00	; 0
    5164:	80 81       	ld	r24, Z
    5166:	88 60       	ori	r24, 0x08	; 8
    5168:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    516a:	af e4       	ldi	r26, 0x4F	; 79
    516c:	b0 e0       	ldi	r27, 0x00	; 0
    516e:	ef e4       	ldi	r30, 0x4F	; 79
    5170:	f0 e0       	ldi	r31, 0x00	; 0
    5172:	80 81       	ld	r24, Z
    5174:	84 60       	ori	r24, 0x04	; 4
    5176:	8c 93       	st	X, r24
	if(Config_Ptr->mode==Normal_Mode)
    5178:	e9 81       	ldd	r30, Y+1	; 0x01
    517a:	fa 81       	ldd	r31, Y+2	; 0x02
    517c:	85 81       	ldd	r24, Z+5	; 0x05
    517e:	88 23       	and	r24, r24
    5180:	e1 f4       	brne	.+56     	; 0x51ba <Timer1_NormalModeConfiguration+0x6c>
	{
		CLEAR_BIT(TCCR1A,WGM10);
    5182:	af e4       	ldi	r26, 0x4F	; 79
    5184:	b0 e0       	ldi	r27, 0x00	; 0
    5186:	ef e4       	ldi	r30, 0x4F	; 79
    5188:	f0 e0       	ldi	r31, 0x00	; 0
    518a:	80 81       	ld	r24, Z
    518c:	8e 7f       	andi	r24, 0xFE	; 254
    518e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    5190:	af e4       	ldi	r26, 0x4F	; 79
    5192:	b0 e0       	ldi	r27, 0x00	; 0
    5194:	ef e4       	ldi	r30, 0x4F	; 79
    5196:	f0 e0       	ldi	r31, 0x00	; 0
    5198:	80 81       	ld	r24, Z
    519a:	8d 7f       	andi	r24, 0xFD	; 253
    519c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    519e:	ae e4       	ldi	r26, 0x4E	; 78
    51a0:	b0 e0       	ldi	r27, 0x00	; 0
    51a2:	ee e4       	ldi	r30, 0x4E	; 78
    51a4:	f0 e0       	ldi	r31, 0x00	; 0
    51a6:	80 81       	ld	r24, Z
    51a8:	87 7f       	andi	r24, 0xF7	; 247
    51aa:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    51ac:	ae e4       	ldi	r26, 0x4E	; 78
    51ae:	b0 e0       	ldi	r27, 0x00	; 0
    51b0:	ee e4       	ldi	r30, 0x4E	; 78
    51b2:	f0 e0       	ldi	r31, 0x00	; 0
    51b4:	80 81       	ld	r24, Z
    51b6:	8f 7e       	andi	r24, 0xEF	; 239
    51b8:	8c 93       	st	X, r24

	}
	TCCR1B = ((TCCR1B & TIMER1_PRESCALLER_MASK)|(Config_Ptr->prescaler & 0x07));
    51ba:	ae e4       	ldi	r26, 0x4E	; 78
    51bc:	b0 e0       	ldi	r27, 0x00	; 0
    51be:	ee e4       	ldi	r30, 0x4E	; 78
    51c0:	f0 e0       	ldi	r31, 0x00	; 0
    51c2:	80 81       	ld	r24, Z
    51c4:	98 2f       	mov	r25, r24
    51c6:	98 7f       	andi	r25, 0xF8	; 248
    51c8:	e9 81       	ldd	r30, Y+1	; 0x01
    51ca:	fa 81       	ldd	r31, Y+2	; 0x02
    51cc:	84 81       	ldd	r24, Z+4	; 0x04
    51ce:	87 70       	andi	r24, 0x07	; 7
    51d0:	89 2b       	or	r24, r25
    51d2:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TOIE1);
    51d4:	a9 e5       	ldi	r26, 0x59	; 89
    51d6:	b0 e0       	ldi	r27, 0x00	; 0
    51d8:	e9 e5       	ldi	r30, 0x59	; 89
    51da:	f0 e0       	ldi	r31, 0x00	; 0
    51dc:	80 81       	ld	r24, Z
    51de:	84 60       	ori	r24, 0x04	; 4
    51e0:	8c 93       	st	X, r24
	TCNT1  = Config_Ptr->initial_value;
    51e2:	ac e4       	ldi	r26, 0x4C	; 76
    51e4:	b0 e0       	ldi	r27, 0x00	; 0
    51e6:	e9 81       	ldd	r30, Y+1	; 0x01
    51e8:	fa 81       	ldd	r31, Y+2	; 0x02
    51ea:	80 81       	ld	r24, Z
    51ec:	91 81       	ldd	r25, Z+1	; 0x01
    51ee:	11 96       	adiw	r26, 0x01	; 1
    51f0:	9c 93       	st	X, r25
    51f2:	8e 93       	st	-X, r24
}
    51f4:	0f 90       	pop	r0
    51f6:	0f 90       	pop	r0
    51f8:	cf 91       	pop	r28
    51fa:	df 91       	pop	r29
    51fc:	08 95       	ret

000051fe <Timer1_CTCModeConfiguration>:
static void Timer1_CTCModeConfiguration(const Timer1_ConfigType * Config_Ptr)
{
    51fe:	df 93       	push	r29
    5200:	cf 93       	push	r28
    5202:	00 d0       	rcall	.+0      	; 0x5204 <Timer1_CTCModeConfiguration+0x6>
    5204:	cd b7       	in	r28, 0x3d	; 61
    5206:	de b7       	in	r29, 0x3e	; 62
    5208:	9a 83       	std	Y+2, r25	; 0x02
    520a:	89 83       	std	Y+1, r24	; 0x01
	 *  Set  (prescaler)
	 *  TCNT1 =0
	 *  OCR1A = top --> (31250 to generate interrupt each 1 sec at prescaller 256)
	 * Output Compare A Match Interrupt Enable
	 * */
	SET_BIT(TCCR1A,FOC1A);
    520c:	af e4       	ldi	r26, 0x4F	; 79
    520e:	b0 e0       	ldi	r27, 0x00	; 0
    5210:	ef e4       	ldi	r30, 0x4F	; 79
    5212:	f0 e0       	ldi	r31, 0x00	; 0
    5214:	80 81       	ld	r24, Z
    5216:	88 60       	ori	r24, 0x08	; 8
    5218:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    521a:	af e4       	ldi	r26, 0x4F	; 79
    521c:	b0 e0       	ldi	r27, 0x00	; 0
    521e:	ef e4       	ldi	r30, 0x4F	; 79
    5220:	f0 e0       	ldi	r31, 0x00	; 0
    5222:	80 81       	ld	r24, Z
    5224:	84 60       	ori	r24, 0x04	; 4
    5226:	8c 93       	st	X, r24
	if(Config_Ptr->mode==CTC_Mode)
    5228:	e9 81       	ldd	r30, Y+1	; 0x01
    522a:	fa 81       	ldd	r31, Y+2	; 0x02
    522c:	85 81       	ldd	r24, Z+5	; 0x05
    522e:	81 30       	cpi	r24, 0x01	; 1
    5230:	e1 f4       	brne	.+56     	; 0x526a <Timer1_CTCModeConfiguration+0x6c>
	{
		CLEAR_BIT(TCCR1A,WGM10);
    5232:	af e4       	ldi	r26, 0x4F	; 79
    5234:	b0 e0       	ldi	r27, 0x00	; 0
    5236:	ef e4       	ldi	r30, 0x4F	; 79
    5238:	f0 e0       	ldi	r31, 0x00	; 0
    523a:	80 81       	ld	r24, Z
    523c:	8e 7f       	andi	r24, 0xFE	; 254
    523e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    5240:	af e4       	ldi	r26, 0x4F	; 79
    5242:	b0 e0       	ldi	r27, 0x00	; 0
    5244:	ef e4       	ldi	r30, 0x4F	; 79
    5246:	f0 e0       	ldi	r31, 0x00	; 0
    5248:	80 81       	ld	r24, Z
    524a:	8d 7f       	andi	r24, 0xFD	; 253
    524c:	8c 93       	st	X, r24
		SET_BIT  (TCCR1B,WGM12);
    524e:	ae e4       	ldi	r26, 0x4E	; 78
    5250:	b0 e0       	ldi	r27, 0x00	; 0
    5252:	ee e4       	ldi	r30, 0x4E	; 78
    5254:	f0 e0       	ldi	r31, 0x00	; 0
    5256:	80 81       	ld	r24, Z
    5258:	88 60       	ori	r24, 0x08	; 8
    525a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    525c:	ae e4       	ldi	r26, 0x4E	; 78
    525e:	b0 e0       	ldi	r27, 0x00	; 0
    5260:	ee e4       	ldi	r30, 0x4E	; 78
    5262:	f0 e0       	ldi	r31, 0x00	; 0
    5264:	80 81       	ld	r24, Z
    5266:	8f 7e       	andi	r24, 0xEF	; 239
    5268:	8c 93       	st	X, r24
	}
	TCCR1B = ((TCCR1B & TIMER1_PRESCALLER_MASK)|(Config_Ptr->prescaler & 0x07));
    526a:	ae e4       	ldi	r26, 0x4E	; 78
    526c:	b0 e0       	ldi	r27, 0x00	; 0
    526e:	ee e4       	ldi	r30, 0x4E	; 78
    5270:	f0 e0       	ldi	r31, 0x00	; 0
    5272:	80 81       	ld	r24, Z
    5274:	98 2f       	mov	r25, r24
    5276:	98 7f       	andi	r25, 0xF8	; 248
    5278:	e9 81       	ldd	r30, Y+1	; 0x01
    527a:	fa 81       	ldd	r31, Y+2	; 0x02
    527c:	84 81       	ldd	r24, Z+4	; 0x04
    527e:	87 70       	andi	r24, 0x07	; 7
    5280:	89 2b       	or	r24, r25
    5282:	8c 93       	st	X, r24
	SET_BIT(TIMSK,OCIE1A);
    5284:	a9 e5       	ldi	r26, 0x59	; 89
    5286:	b0 e0       	ldi	r27, 0x00	; 0
    5288:	e9 e5       	ldi	r30, 0x59	; 89
    528a:	f0 e0       	ldi	r31, 0x00	; 0
    528c:	80 81       	ld	r24, Z
    528e:	80 61       	ori	r24, 0x10	; 16
    5290:	8c 93       	st	X, r24
	TCNT1  = Config_Ptr->initial_value;
    5292:	ac e4       	ldi	r26, 0x4C	; 76
    5294:	b0 e0       	ldi	r27, 0x00	; 0
    5296:	e9 81       	ldd	r30, Y+1	; 0x01
    5298:	fa 81       	ldd	r31, Y+2	; 0x02
    529a:	80 81       	ld	r24, Z
    529c:	91 81       	ldd	r25, Z+1	; 0x01
    529e:	11 96       	adiw	r26, 0x01	; 1
    52a0:	9c 93       	st	X, r25
    52a2:	8e 93       	st	-X, r24
	OCR1A  = Config_Ptr->compare_value;
    52a4:	aa e4       	ldi	r26, 0x4A	; 74
    52a6:	b0 e0       	ldi	r27, 0x00	; 0
    52a8:	e9 81       	ldd	r30, Y+1	; 0x01
    52aa:	fa 81       	ldd	r31, Y+2	; 0x02
    52ac:	82 81       	ldd	r24, Z+2	; 0x02
    52ae:	93 81       	ldd	r25, Z+3	; 0x03
    52b0:	11 96       	adiw	r26, 0x01	; 1
    52b2:	9c 93       	st	X, r25
    52b4:	8e 93       	st	-X, r24
}
    52b6:	0f 90       	pop	r0
    52b8:	0f 90       	pop	r0
    52ba:	cf 91       	pop	r28
    52bc:	df 91       	pop	r29
    52be:	08 95       	ret

000052c0 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    52c0:	df 93       	push	r29
    52c2:	cf 93       	push	r28
    52c4:	00 d0       	rcall	.+0      	; 0x52c6 <UART_init+0x6>
    52c6:	00 d0       	rcall	.+0      	; 0x52c8 <UART_init+0x8>
    52c8:	cd b7       	in	r28, 0x3d	; 61
    52ca:	de b7       	in	r29, 0x3e	; 62
    52cc:	9c 83       	std	Y+4, r25	; 0x04
    52ce:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    52d0:	1a 82       	std	Y+2, r1	; 0x02
    52d2:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    52d4:	eb e2       	ldi	r30, 0x2B	; 43
    52d6:	f0 e0       	ldi	r31, 0x00	; 0
    52d8:	82 e0       	ldi	r24, 0x02	; 2
    52da:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
		UCSRB =0;
    52dc:	ea e2       	ldi	r30, 0x2A	; 42
    52de:	f0 e0       	ldi	r31, 0x00	; 0
    52e0:	10 82       	st	Z, r1
		SET_BIT(UCSRB,RXEN);
    52e2:	aa e2       	ldi	r26, 0x2A	; 42
    52e4:	b0 e0       	ldi	r27, 0x00	; 0
    52e6:	ea e2       	ldi	r30, 0x2A	; 42
    52e8:	f0 e0       	ldi	r31, 0x00	; 0
    52ea:	80 81       	ld	r24, Z
    52ec:	80 61       	ori	r24, 0x10	; 16
    52ee:	8c 93       	st	X, r24
		SET_BIT(UCSRB,TXEN);
    52f0:	aa e2       	ldi	r26, 0x2A	; 42
    52f2:	b0 e0       	ldi	r27, 0x00	; 0
    52f4:	ea e2       	ldi	r30, 0x2A	; 42
    52f6:	f0 e0       	ldi	r31, 0x00	; 0
    52f8:	80 81       	ld	r24, Z
    52fa:	88 60       	ori	r24, 0x08	; 8
    52fc:	8c 93       	st	X, r24
	 * parity bit set from the user
	 * stop bit set from the user
	 * bit data mode  set from the user
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC=0;
    52fe:	e0 e4       	ldi	r30, 0x40	; 64
    5300:	f0 e0       	ldi	r31, 0x00	; 0
    5302:	10 82       	st	Z, r1
    /* URSEL   = 1 The URSEL must be one when writing the UCSRC*/
	SET_BIT(UCSRC,URSEL);
    5304:	a0 e4       	ldi	r26, 0x40	; 64
    5306:	b0 e0       	ldi	r27, 0x00	; 0
    5308:	e0 e4       	ldi	r30, 0x40	; 64
    530a:	f0 e0       	ldi	r31, 0x00	; 0
    530c:	80 81       	ld	r24, Z
    530e:	80 68       	ori	r24, 0x80	; 128
    5310:	8c 93       	st	X, r24
	/*Select parity bit*/
	UCSRC = (UCSRC & UART_PARITYBIT_MASK) | ( (Config_Ptr->parity) << 4 );
    5312:	a0 e4       	ldi	r26, 0x40	; 64
    5314:	b0 e0       	ldi	r27, 0x00	; 0
    5316:	e0 e4       	ldi	r30, 0x40	; 64
    5318:	f0 e0       	ldi	r31, 0x00	; 0
    531a:	80 81       	ld	r24, Z
    531c:	28 2f       	mov	r18, r24
    531e:	2f 7c       	andi	r18, 0xCF	; 207
    5320:	eb 81       	ldd	r30, Y+3	; 0x03
    5322:	fc 81       	ldd	r31, Y+4	; 0x04
    5324:	81 81       	ldd	r24, Z+1	; 0x01
    5326:	88 2f       	mov	r24, r24
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	82 95       	swap	r24
    532c:	92 95       	swap	r25
    532e:	90 7f       	andi	r25, 0xF0	; 240
    5330:	98 27       	eor	r25, r24
    5332:	80 7f       	andi	r24, 0xF0	; 240
    5334:	98 27       	eor	r25, r24
    5336:	82 2b       	or	r24, r18
    5338:	8c 93       	st	X, r24
	/*Select Stop Bit*/
	UCSRC = (UCSRC & UART_STOPBIT_MASK) | ( (Config_Ptr->stop_bit) << 3 );
    533a:	a0 e4       	ldi	r26, 0x40	; 64
    533c:	b0 e0       	ldi	r27, 0x00	; 0
    533e:	e0 e4       	ldi	r30, 0x40	; 64
    5340:	f0 e0       	ldi	r31, 0x00	; 0
    5342:	80 81       	ld	r24, Z
    5344:	28 2f       	mov	r18, r24
    5346:	27 7f       	andi	r18, 0xF7	; 247
    5348:	eb 81       	ldd	r30, Y+3	; 0x03
    534a:	fc 81       	ldd	r31, Y+4	; 0x04
    534c:	82 81       	ldd	r24, Z+2	; 0x02
    534e:	88 2f       	mov	r24, r24
    5350:	90 e0       	ldi	r25, 0x00	; 0
    5352:	88 0f       	add	r24, r24
    5354:	99 1f       	adc	r25, r25
    5356:	88 0f       	add	r24, r24
    5358:	99 1f       	adc	r25, r25
    535a:	88 0f       	add	r24, r24
    535c:	99 1f       	adc	r25, r25
    535e:	82 2b       	or	r24, r18
    5360:	8c 93       	st	X, r24

	/* Character Size */
	if((Config_Ptr->bit_data) == NINE_BIT)
    5362:	eb 81       	ldd	r30, Y+3	; 0x03
    5364:	fc 81       	ldd	r31, Y+4	; 0x04
    5366:	80 81       	ld	r24, Z
    5368:	87 30       	cpi	r24, 0x07	; 7
    536a:	c1 f4       	brne	.+48     	; 0x539c <UART_init+0xdc>
	{
		UCSRC = (UCSRC & UART_BitData_MASK) | ( (Config_Ptr->bit_data) << 1 );
    536c:	a0 e4       	ldi	r26, 0x40	; 64
    536e:	b0 e0       	ldi	r27, 0x00	; 0
    5370:	e0 e4       	ldi	r30, 0x40	; 64
    5372:	f0 e0       	ldi	r31, 0x00	; 0
    5374:	80 81       	ld	r24, Z
    5376:	28 2f       	mov	r18, r24
    5378:	29 7f       	andi	r18, 0xF9	; 249
    537a:	eb 81       	ldd	r30, Y+3	; 0x03
    537c:	fc 81       	ldd	r31, Y+4	; 0x04
    537e:	80 81       	ld	r24, Z
    5380:	88 2f       	mov	r24, r24
    5382:	90 e0       	ldi	r25, 0x00	; 0
    5384:	88 0f       	add	r24, r24
    5386:	99 1f       	adc	r25, r25
    5388:	82 2b       	or	r24, r18
    538a:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ2);
    538c:	aa e2       	ldi	r26, 0x2A	; 42
    538e:	b0 e0       	ldi	r27, 0x00	; 0
    5390:	ea e2       	ldi	r30, 0x2A	; 42
    5392:	f0 e0       	ldi	r31, 0x00	; 0
    5394:	80 81       	ld	r24, Z
    5396:	84 60       	ori	r24, 0x04	; 4
    5398:	8c 93       	st	X, r24
    539a:	17 c0       	rjmp	.+46     	; 0x53ca <UART_init+0x10a>
	}else
	{

		UCSRC = (UCSRC & UART_BitData_MASK) | ( (Config_Ptr->bit_data) << 1 );
    539c:	a0 e4       	ldi	r26, 0x40	; 64
    539e:	b0 e0       	ldi	r27, 0x00	; 0
    53a0:	e0 e4       	ldi	r30, 0x40	; 64
    53a2:	f0 e0       	ldi	r31, 0x00	; 0
    53a4:	80 81       	ld	r24, Z
    53a6:	28 2f       	mov	r18, r24
    53a8:	29 7f       	andi	r18, 0xF9	; 249
    53aa:	eb 81       	ldd	r30, Y+3	; 0x03
    53ac:	fc 81       	ldd	r31, Y+4	; 0x04
    53ae:	80 81       	ld	r24, Z
    53b0:	88 2f       	mov	r24, r24
    53b2:	90 e0       	ldi	r25, 0x00	; 0
    53b4:	88 0f       	add	r24, r24
    53b6:	99 1f       	adc	r25, r25
    53b8:	82 2b       	or	r24, r18
    53ba:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
    53bc:	aa e2       	ldi	r26, 0x2A	; 42
    53be:	b0 e0       	ldi	r27, 0x00	; 0
    53c0:	ea e2       	ldi	r30, 0x2A	; 42
    53c2:	f0 e0       	ldi	r31, 0x00	; 0
    53c4:	80 81       	ld	r24, Z
    53c6:	8b 7f       	andi	r24, 0xFB	; 251
    53c8:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ( (Config_Ptr->baud_rate) * 8UL))) - 1);
    53ca:	eb 81       	ldd	r30, Y+3	; 0x03
    53cc:	fc 81       	ldd	r31, Y+4	; 0x04
    53ce:	83 81       	ldd	r24, Z+3	; 0x03
    53d0:	94 81       	ldd	r25, Z+4	; 0x04
    53d2:	a5 81       	ldd	r26, Z+5	; 0x05
    53d4:	b6 81       	ldd	r27, Z+6	; 0x06
    53d6:	88 0f       	add	r24, r24
    53d8:	99 1f       	adc	r25, r25
    53da:	aa 1f       	adc	r26, r26
    53dc:	bb 1f       	adc	r27, r27
    53de:	88 0f       	add	r24, r24
    53e0:	99 1f       	adc	r25, r25
    53e2:	aa 1f       	adc	r26, r26
    53e4:	bb 1f       	adc	r27, r27
    53e6:	88 0f       	add	r24, r24
    53e8:	99 1f       	adc	r25, r25
    53ea:	aa 1f       	adc	r26, r26
    53ec:	bb 1f       	adc	r27, r27
    53ee:	9c 01       	movw	r18, r24
    53f0:	ad 01       	movw	r20, r26
    53f2:	80 e0       	ldi	r24, 0x00	; 0
    53f4:	92 e1       	ldi	r25, 0x12	; 18
    53f6:	aa e7       	ldi	r26, 0x7A	; 122
    53f8:	b0 e0       	ldi	r27, 0x00	; 0
    53fa:	bc 01       	movw	r22, r24
    53fc:	cd 01       	movw	r24, r26
    53fe:	0e 94 16 2b 	call	0x562c	; 0x562c <__udivmodsi4>
    5402:	da 01       	movw	r26, r20
    5404:	c9 01       	movw	r24, r18
    5406:	01 97       	sbiw	r24, 0x01	; 1
    5408:	9a 83       	std	Y+2, r25	; 0x02
    540a:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    540c:	e0 e4       	ldi	r30, 0x40	; 64
    540e:	f0 e0       	ldi	r31, 0x00	; 0
    5410:	89 81       	ldd	r24, Y+1	; 0x01
    5412:	9a 81       	ldd	r25, Y+2	; 0x02
    5414:	89 2f       	mov	r24, r25
    5416:	99 27       	eor	r25, r25
    5418:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    541a:	e9 e2       	ldi	r30, 0x29	; 41
    541c:	f0 e0       	ldi	r31, 0x00	; 0
    541e:	89 81       	ldd	r24, Y+1	; 0x01
    5420:	80 83       	st	Z, r24

}
    5422:	0f 90       	pop	r0
    5424:	0f 90       	pop	r0
    5426:	0f 90       	pop	r0
    5428:	0f 90       	pop	r0
    542a:	cf 91       	pop	r28
    542c:	df 91       	pop	r29
    542e:	08 95       	ret

00005430 <UART_init1>:
void UART_init1(uint32 baud_rate)
{
    5430:	df 93       	push	r29
    5432:	cf 93       	push	r28
    5434:	00 d0       	rcall	.+0      	; 0x5436 <UART_init1+0x6>
    5436:	00 d0       	rcall	.+0      	; 0x5438 <UART_init1+0x8>
    5438:	00 d0       	rcall	.+0      	; 0x543a <UART_init1+0xa>
    543a:	cd b7       	in	r28, 0x3d	; 61
    543c:	de b7       	in	r29, 0x3e	; 62
    543e:	6b 83       	std	Y+3, r22	; 0x03
    5440:	7c 83       	std	Y+4, r23	; 0x04
    5442:	8d 83       	std	Y+5, r24	; 0x05
    5444:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    5446:	1a 82       	std	Y+2, r1	; 0x02
    5448:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
		UCSRA = (1<<U2X);
    544a:	eb e2       	ldi	r30, 0x2B	; 43
    544c:	f0 e0       	ldi	r31, 0x00	; 0
    544e:	82 e0       	ldi	r24, 0x02	; 2
    5450:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
		UCSRB =0;
    5452:	ea e2       	ldi	r30, 0x2A	; 42
    5454:	f0 e0       	ldi	r31, 0x00	; 0
    5456:	10 82       	st	Z, r1
		SET_BIT(UCSRB,RXEN);
    5458:	aa e2       	ldi	r26, 0x2A	; 42
    545a:	b0 e0       	ldi	r27, 0x00	; 0
    545c:	ea e2       	ldi	r30, 0x2A	; 42
    545e:	f0 e0       	ldi	r31, 0x00	; 0
    5460:	80 81       	ld	r24, Z
    5462:	80 61       	ori	r24, 0x10	; 16
    5464:	8c 93       	st	X, r24
		SET_BIT(UCSRB,TXEN);
    5466:	aa e2       	ldi	r26, 0x2A	; 42
    5468:	b0 e0       	ldi	r27, 0x00	; 0
    546a:	ea e2       	ldi	r30, 0x2A	; 42
    546c:	f0 e0       	ldi	r31, 0x00	; 0
    546e:	80 81       	ld	r24, Z
    5470:	88 60       	ori	r24, 0x08	; 8
    5472:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
		UCSRC=0;
    5474:	e0 e4       	ldi	r30, 0x40	; 64
    5476:	f0 e0       	ldi	r31, 0x00	; 0
    5478:	10 82       	st	Z, r1
		SET_BIT(UCSRC,URSEL);
    547a:	a0 e4       	ldi	r26, 0x40	; 64
    547c:	b0 e0       	ldi	r27, 0x00	; 0
    547e:	e0 e4       	ldi	r30, 0x40	; 64
    5480:	f0 e0       	ldi	r31, 0x00	; 0
    5482:	80 81       	ld	r24, Z
    5484:	80 68       	ori	r24, 0x80	; 128
    5486:	8c 93       	st	X, r24
		/* Character Size --> 8*/
		SET_BIT(UCSRC,UCSZ0);
    5488:	a0 e4       	ldi	r26, 0x40	; 64
    548a:	b0 e0       	ldi	r27, 0x00	; 0
    548c:	e0 e4       	ldi	r30, 0x40	; 64
    548e:	f0 e0       	ldi	r31, 0x00	; 0
    5490:	80 81       	ld	r24, Z
    5492:	82 60       	ori	r24, 0x02	; 2
    5494:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    5496:	a0 e4       	ldi	r26, 0x40	; 64
    5498:	b0 e0       	ldi	r27, 0x00	; 0
    549a:	e0 e4       	ldi	r30, 0x40	; 64
    549c:	f0 e0       	ldi	r31, 0x00	; 0
    549e:	80 81       	ld	r24, Z
    54a0:	84 60       	ori	r24, 0x04	; 4
    54a2:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    54a4:	8b 81       	ldd	r24, Y+3	; 0x03
    54a6:	9c 81       	ldd	r25, Y+4	; 0x04
    54a8:	ad 81       	ldd	r26, Y+5	; 0x05
    54aa:	be 81       	ldd	r27, Y+6	; 0x06
    54ac:	88 0f       	add	r24, r24
    54ae:	99 1f       	adc	r25, r25
    54b0:	aa 1f       	adc	r26, r26
    54b2:	bb 1f       	adc	r27, r27
    54b4:	88 0f       	add	r24, r24
    54b6:	99 1f       	adc	r25, r25
    54b8:	aa 1f       	adc	r26, r26
    54ba:	bb 1f       	adc	r27, r27
    54bc:	88 0f       	add	r24, r24
    54be:	99 1f       	adc	r25, r25
    54c0:	aa 1f       	adc	r26, r26
    54c2:	bb 1f       	adc	r27, r27
    54c4:	9c 01       	movw	r18, r24
    54c6:	ad 01       	movw	r20, r26
    54c8:	80 e0       	ldi	r24, 0x00	; 0
    54ca:	92 e1       	ldi	r25, 0x12	; 18
    54cc:	aa e7       	ldi	r26, 0x7A	; 122
    54ce:	b0 e0       	ldi	r27, 0x00	; 0
    54d0:	bc 01       	movw	r22, r24
    54d2:	cd 01       	movw	r24, r26
    54d4:	0e 94 16 2b 	call	0x562c	; 0x562c <__udivmodsi4>
    54d8:	da 01       	movw	r26, r20
    54da:	c9 01       	movw	r24, r18
    54dc:	01 97       	sbiw	r24, 0x01	; 1
    54de:	9a 83       	std	Y+2, r25	; 0x02
    54e0:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    54e2:	e0 e4       	ldi	r30, 0x40	; 64
    54e4:	f0 e0       	ldi	r31, 0x00	; 0
    54e6:	89 81       	ldd	r24, Y+1	; 0x01
    54e8:	9a 81       	ldd	r25, Y+2	; 0x02
    54ea:	89 2f       	mov	r24, r25
    54ec:	99 27       	eor	r25, r25
    54ee:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    54f0:	e9 e2       	ldi	r30, 0x29	; 41
    54f2:	f0 e0       	ldi	r31, 0x00	; 0
    54f4:	89 81       	ldd	r24, Y+1	; 0x01
    54f6:	80 83       	st	Z, r24

}
    54f8:	26 96       	adiw	r28, 0x06	; 6
    54fa:	0f b6       	in	r0, 0x3f	; 63
    54fc:	f8 94       	cli
    54fe:	de bf       	out	0x3e, r29	; 62
    5500:	0f be       	out	0x3f, r0	; 63
    5502:	cd bf       	out	0x3d, r28	; 61
    5504:	cf 91       	pop	r28
    5506:	df 91       	pop	r29
    5508:	08 95       	ret

0000550a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 copy_dataByte)
{
    550a:	df 93       	push	r29
    550c:	cf 93       	push	r28
    550e:	0f 92       	push	r0
    5510:	cd b7       	in	r28, 0x3d	; 61
    5512:	de b7       	in	r29, 0x3e	; 62
    5514:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
    5516:	eb e2       	ldi	r30, 0x2B	; 43
    5518:	f0 e0       	ldi	r31, 0x00	; 0
    551a:	80 81       	ld	r24, Z
    551c:	88 2f       	mov	r24, r24
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	80 72       	andi	r24, 0x20	; 32
    5522:	90 70       	andi	r25, 0x00	; 0
    5524:	00 97       	sbiw	r24, 0x00	; 0
    5526:	b9 f3       	breq	.-18     	; 0x5516 <UART_sendByte+0xc>
	{}
	/* Put data into buffer, sends the data */
	UDR = copy_dataByte;
    5528:	ec e2       	ldi	r30, 0x2C	; 44
    552a:	f0 e0       	ldi	r31, 0x00	; 0
    552c:	89 81       	ldd	r24, Y+1	; 0x01
    552e:	80 83       	st	Z, r24
}
    5530:	0f 90       	pop	r0
    5532:	cf 91       	pop	r28
    5534:	df 91       	pop	r29
    5536:	08 95       	ret

00005538 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    5538:	df 93       	push	r29
    553a:	cf 93       	push	r28
    553c:	cd b7       	in	r28, 0x3d	; 61
    553e:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
    5540:	eb e2       	ldi	r30, 0x2B	; 43
    5542:	f0 e0       	ldi	r31, 0x00	; 0
    5544:	80 81       	ld	r24, Z
    5546:	88 23       	and	r24, r24
    5548:	dc f7       	brge	.-10     	; 0x5540 <UART_recieveByte+0x8>
	{}
	/* Get and return received data from buffer */
	return UDR;
    554a:	ec e2       	ldi	r30, 0x2C	; 44
    554c:	f0 e0       	ldi	r31, 0x00	; 0
    554e:	80 81       	ld	r24, Z
}
    5550:	cf 91       	pop	r28
    5552:	df 91       	pop	r29
    5554:	08 95       	ret

00005556 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *StrData)
{
    5556:	df 93       	push	r29
    5558:	cf 93       	push	r28
    555a:	00 d0       	rcall	.+0      	; 0x555c <UART_sendString+0x6>
    555c:	0f 92       	push	r0
    555e:	cd b7       	in	r28, 0x3d	; 61
    5560:	de b7       	in	r29, 0x3e	; 62
    5562:	9b 83       	std	Y+3, r25	; 0x03
    5564:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    5566:	19 82       	std	Y+1, r1	; 0x01
    5568:	0e c0       	rjmp	.+28     	; 0x5586 <UART_sendString+0x30>
	/* Send the whole string */
	while(StrData[i] != '\0')
	{
		UART_sendByte(StrData[i]);
    556a:	89 81       	ldd	r24, Y+1	; 0x01
    556c:	28 2f       	mov	r18, r24
    556e:	30 e0       	ldi	r19, 0x00	; 0
    5570:	8a 81       	ldd	r24, Y+2	; 0x02
    5572:	9b 81       	ldd	r25, Y+3	; 0x03
    5574:	fc 01       	movw	r30, r24
    5576:	e2 0f       	add	r30, r18
    5578:	f3 1f       	adc	r31, r19
    557a:	80 81       	ld	r24, Z
    557c:	0e 94 85 2a 	call	0x550a	; 0x550a <UART_sendByte>
		i++;
    5580:	89 81       	ldd	r24, Y+1	; 0x01
    5582:	8f 5f       	subi	r24, 0xFF	; 255
    5584:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *StrData)
{
	uint8 i =0;
	/* Send the whole string */
	while(StrData[i] != '\0')
    5586:	89 81       	ldd	r24, Y+1	; 0x01
    5588:	28 2f       	mov	r18, r24
    558a:	30 e0       	ldi	r19, 0x00	; 0
    558c:	8a 81       	ldd	r24, Y+2	; 0x02
    558e:	9b 81       	ldd	r25, Y+3	; 0x03
    5590:	fc 01       	movw	r30, r24
    5592:	e2 0f       	add	r30, r18
    5594:	f3 1f       	adc	r31, r19
    5596:	80 81       	ld	r24, Z
    5598:	88 23       	and	r24, r24
    559a:	39 f7       	brne	.-50     	; 0x556a <UART_sendString+0x14>
	{
		UART_sendByte(StrData[i]);
		i++;
	}
}
    559c:	0f 90       	pop	r0
    559e:	0f 90       	pop	r0
    55a0:	0f 90       	pop	r0
    55a2:	cf 91       	pop	r28
    55a4:	df 91       	pop	r29
    55a6:	08 95       	ret

000055a8 <UART_recieveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_recieveString(uint8 *StrData)
{
    55a8:	0f 93       	push	r16
    55aa:	1f 93       	push	r17
    55ac:	df 93       	push	r29
    55ae:	cf 93       	push	r28
    55b0:	00 d0       	rcall	.+0      	; 0x55b2 <UART_recieveString+0xa>
    55b2:	0f 92       	push	r0
    55b4:	cd b7       	in	r28, 0x3d	; 61
    55b6:	de b7       	in	r29, 0x3e	; 62
    55b8:	9b 83       	std	Y+3, r25	; 0x03
    55ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    55bc:	19 82       	std	Y+1, r1	; 0x01
	StrData[i]= UART_recieveByte();
    55be:	89 81       	ldd	r24, Y+1	; 0x01
    55c0:	28 2f       	mov	r18, r24
    55c2:	30 e0       	ldi	r19, 0x00	; 0
    55c4:	8a 81       	ldd	r24, Y+2	; 0x02
    55c6:	9b 81       	ldd	r25, Y+3	; 0x03
    55c8:	8c 01       	movw	r16, r24
    55ca:	02 0f       	add	r16, r18
    55cc:	13 1f       	adc	r17, r19
    55ce:	0e 94 9c 2a 	call	0x5538	; 0x5538 <UART_recieveByte>
    55d2:	f8 01       	movw	r30, r16
    55d4:	80 83       	st	Z, r24
	if(StrData[i] != '#')
    55d6:	89 81       	ldd	r24, Y+1	; 0x01
    55d8:	28 2f       	mov	r18, r24
    55da:	30 e0       	ldi	r19, 0x00	; 0
    55dc:	8a 81       	ldd	r24, Y+2	; 0x02
    55de:	9b 81       	ldd	r25, Y+3	; 0x03
    55e0:	fc 01       	movw	r30, r24
    55e2:	e2 0f       	add	r30, r18
    55e4:	f3 1f       	adc	r31, r19
    55e6:	80 81       	ld	r24, Z
    55e8:	83 32       	cpi	r24, 0x23	; 35
    55ea:	79 f0       	breq	.+30     	; 0x560a <UART_recieveString+0x62>
	{
		i++;
    55ec:	89 81       	ldd	r24, Y+1	; 0x01
    55ee:	8f 5f       	subi	r24, 0xFF	; 255
    55f0:	89 83       	std	Y+1, r24	; 0x01
		StrData[i]= UART_recieveByte();
    55f2:	89 81       	ldd	r24, Y+1	; 0x01
    55f4:	28 2f       	mov	r18, r24
    55f6:	30 e0       	ldi	r19, 0x00	; 0
    55f8:	8a 81       	ldd	r24, Y+2	; 0x02
    55fa:	9b 81       	ldd	r25, Y+3	; 0x03
    55fc:	8c 01       	movw	r16, r24
    55fe:	02 0f       	add	r16, r18
    5600:	13 1f       	adc	r17, r19
    5602:	0e 94 9c 2a 	call	0x5538	; 0x5538 <UART_recieveByte>
    5606:	f8 01       	movw	r30, r16
    5608:	80 83       	st	Z, r24
	}
	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	StrData[i] = '\0';
    560a:	89 81       	ldd	r24, Y+1	; 0x01
    560c:	28 2f       	mov	r18, r24
    560e:	30 e0       	ldi	r19, 0x00	; 0
    5610:	8a 81       	ldd	r24, Y+2	; 0x02
    5612:	9b 81       	ldd	r25, Y+3	; 0x03
    5614:	fc 01       	movw	r30, r24
    5616:	e2 0f       	add	r30, r18
    5618:	f3 1f       	adc	r31, r19
    561a:	10 82       	st	Z, r1
}
    561c:	0f 90       	pop	r0
    561e:	0f 90       	pop	r0
    5620:	0f 90       	pop	r0
    5622:	cf 91       	pop	r28
    5624:	df 91       	pop	r29
    5626:	1f 91       	pop	r17
    5628:	0f 91       	pop	r16
    562a:	08 95       	ret

0000562c <__udivmodsi4>:
    562c:	a1 e2       	ldi	r26, 0x21	; 33
    562e:	1a 2e       	mov	r1, r26
    5630:	aa 1b       	sub	r26, r26
    5632:	bb 1b       	sub	r27, r27
    5634:	fd 01       	movw	r30, r26
    5636:	0d c0       	rjmp	.+26     	; 0x5652 <__udivmodsi4_ep>

00005638 <__udivmodsi4_loop>:
    5638:	aa 1f       	adc	r26, r26
    563a:	bb 1f       	adc	r27, r27
    563c:	ee 1f       	adc	r30, r30
    563e:	ff 1f       	adc	r31, r31
    5640:	a2 17       	cp	r26, r18
    5642:	b3 07       	cpc	r27, r19
    5644:	e4 07       	cpc	r30, r20
    5646:	f5 07       	cpc	r31, r21
    5648:	20 f0       	brcs	.+8      	; 0x5652 <__udivmodsi4_ep>
    564a:	a2 1b       	sub	r26, r18
    564c:	b3 0b       	sbc	r27, r19
    564e:	e4 0b       	sbc	r30, r20
    5650:	f5 0b       	sbc	r31, r21

00005652 <__udivmodsi4_ep>:
    5652:	66 1f       	adc	r22, r22
    5654:	77 1f       	adc	r23, r23
    5656:	88 1f       	adc	r24, r24
    5658:	99 1f       	adc	r25, r25
    565a:	1a 94       	dec	r1
    565c:	69 f7       	brne	.-38     	; 0x5638 <__udivmodsi4_loop>
    565e:	60 95       	com	r22
    5660:	70 95       	com	r23
    5662:	80 95       	com	r24
    5664:	90 95       	com	r25
    5666:	9b 01       	movw	r18, r22
    5668:	ac 01       	movw	r20, r24
    566a:	bd 01       	movw	r22, r26
    566c:	cf 01       	movw	r24, r30
    566e:	08 95       	ret

00005670 <__prologue_saves__>:
    5670:	2f 92       	push	r2
    5672:	3f 92       	push	r3
    5674:	4f 92       	push	r4
    5676:	5f 92       	push	r5
    5678:	6f 92       	push	r6
    567a:	7f 92       	push	r7
    567c:	8f 92       	push	r8
    567e:	9f 92       	push	r9
    5680:	af 92       	push	r10
    5682:	bf 92       	push	r11
    5684:	cf 92       	push	r12
    5686:	df 92       	push	r13
    5688:	ef 92       	push	r14
    568a:	ff 92       	push	r15
    568c:	0f 93       	push	r16
    568e:	1f 93       	push	r17
    5690:	cf 93       	push	r28
    5692:	df 93       	push	r29
    5694:	cd b7       	in	r28, 0x3d	; 61
    5696:	de b7       	in	r29, 0x3e	; 62
    5698:	ca 1b       	sub	r28, r26
    569a:	db 0b       	sbc	r29, r27
    569c:	0f b6       	in	r0, 0x3f	; 63
    569e:	f8 94       	cli
    56a0:	de bf       	out	0x3e, r29	; 62
    56a2:	0f be       	out	0x3f, r0	; 63
    56a4:	cd bf       	out	0x3d, r28	; 61
    56a6:	09 94       	ijmp

000056a8 <__epilogue_restores__>:
    56a8:	2a 88       	ldd	r2, Y+18	; 0x12
    56aa:	39 88       	ldd	r3, Y+17	; 0x11
    56ac:	48 88       	ldd	r4, Y+16	; 0x10
    56ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    56b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    56b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    56b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    56b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    56b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    56ba:	b9 84       	ldd	r11, Y+9	; 0x09
    56bc:	c8 84       	ldd	r12, Y+8	; 0x08
    56be:	df 80       	ldd	r13, Y+7	; 0x07
    56c0:	ee 80       	ldd	r14, Y+6	; 0x06
    56c2:	fd 80       	ldd	r15, Y+5	; 0x05
    56c4:	0c 81       	ldd	r16, Y+4	; 0x04
    56c6:	1b 81       	ldd	r17, Y+3	; 0x03
    56c8:	aa 81       	ldd	r26, Y+2	; 0x02
    56ca:	b9 81       	ldd	r27, Y+1	; 0x01
    56cc:	ce 0f       	add	r28, r30
    56ce:	d1 1d       	adc	r29, r1
    56d0:	0f b6       	in	r0, 0x3f	; 63
    56d2:	f8 94       	cli
    56d4:	de bf       	out	0x3e, r29	; 62
    56d6:	0f be       	out	0x3f, r0	; 63
    56d8:	cd bf       	out	0x3d, r28	; 61
    56da:	ed 01       	movw	r28, r26
    56dc:	08 95       	ret

000056de <itoa>:
    56de:	fb 01       	movw	r30, r22
    56e0:	9f 01       	movw	r18, r30
    56e2:	e8 94       	clt
    56e4:	42 30       	cpi	r20, 0x02	; 2
    56e6:	c4 f0       	brlt	.+48     	; 0x5718 <itoa+0x3a>
    56e8:	45 32       	cpi	r20, 0x25	; 37
    56ea:	b4 f4       	brge	.+44     	; 0x5718 <itoa+0x3a>
    56ec:	4a 30       	cpi	r20, 0x0A	; 10
    56ee:	29 f4       	brne	.+10     	; 0x56fa <itoa+0x1c>
    56f0:	97 fb       	bst	r25, 7
    56f2:	1e f4       	brtc	.+6      	; 0x56fa <itoa+0x1c>
    56f4:	90 95       	com	r25
    56f6:	81 95       	neg	r24
    56f8:	9f 4f       	sbci	r25, 0xFF	; 255
    56fa:	64 2f       	mov	r22, r20
    56fc:	77 27       	eor	r23, r23
    56fe:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__udivmodhi4>
    5702:	80 5d       	subi	r24, 0xD0	; 208
    5704:	8a 33       	cpi	r24, 0x3A	; 58
    5706:	0c f0       	brlt	.+2      	; 0x570a <itoa+0x2c>
    5708:	89 5d       	subi	r24, 0xD9	; 217
    570a:	81 93       	st	Z+, r24
    570c:	cb 01       	movw	r24, r22
    570e:	00 97       	sbiw	r24, 0x00	; 0
    5710:	a1 f7       	brne	.-24     	; 0x56fa <itoa+0x1c>
    5712:	16 f4       	brtc	.+4      	; 0x5718 <itoa+0x3a>
    5714:	5d e2       	ldi	r21, 0x2D	; 45
    5716:	51 93       	st	Z+, r21
    5718:	10 82       	st	Z, r1
    571a:	c9 01       	movw	r24, r18
    571c:	0c 94 90 2b 	jmp	0x5720	; 0x5720 <strrev>

00005720 <strrev>:
    5720:	dc 01       	movw	r26, r24
    5722:	fc 01       	movw	r30, r24
    5724:	67 2f       	mov	r22, r23
    5726:	71 91       	ld	r23, Z+
    5728:	77 23       	and	r23, r23
    572a:	e1 f7       	brne	.-8      	; 0x5724 <strrev+0x4>
    572c:	32 97       	sbiw	r30, 0x02	; 2
    572e:	04 c0       	rjmp	.+8      	; 0x5738 <strrev+0x18>
    5730:	7c 91       	ld	r23, X
    5732:	6d 93       	st	X+, r22
    5734:	70 83       	st	Z, r23
    5736:	62 91       	ld	r22, -Z
    5738:	ae 17       	cp	r26, r30
    573a:	bf 07       	cpc	r27, r31
    573c:	c8 f3       	brcs	.-14     	; 0x5730 <strrev+0x10>
    573e:	08 95       	ret

00005740 <__udivmodhi4>:
    5740:	aa 1b       	sub	r26, r26
    5742:	bb 1b       	sub	r27, r27
    5744:	51 e1       	ldi	r21, 0x11	; 17
    5746:	07 c0       	rjmp	.+14     	; 0x5756 <__udivmodhi4_ep>

00005748 <__udivmodhi4_loop>:
    5748:	aa 1f       	adc	r26, r26
    574a:	bb 1f       	adc	r27, r27
    574c:	a6 17       	cp	r26, r22
    574e:	b7 07       	cpc	r27, r23
    5750:	10 f0       	brcs	.+4      	; 0x5756 <__udivmodhi4_ep>
    5752:	a6 1b       	sub	r26, r22
    5754:	b7 0b       	sbc	r27, r23

00005756 <__udivmodhi4_ep>:
    5756:	88 1f       	adc	r24, r24
    5758:	99 1f       	adc	r25, r25
    575a:	5a 95       	dec	r21
    575c:	a9 f7       	brne	.-22     	; 0x5748 <__udivmodhi4_loop>
    575e:	80 95       	com	r24
    5760:	90 95       	com	r25
    5762:	bc 01       	movw	r22, r24
    5764:	cd 01       	movw	r24, r26
    5766:	08 95       	ret

00005768 <_exit>:
    5768:	f8 94       	cli

0000576a <__stop_program>:
    576a:	ff cf       	rjmp	.-2      	; 0x576a <__stop_program>
